[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfaca750>
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21df63050>
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2b436d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13f53310>
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821db3c390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e173406d0>
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fd21e00c190>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fd21e00ca90>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fd21dfa2750>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fd21dfa2910>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fd21dfa29d0>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fd21dfa2bd0>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fd21dfa2e90>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fd21dfba310>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fd21dfba6d0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fd21dfba7d0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fd21dfba8d0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fd21dfbad10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fd21df95550>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fd21dfbae10>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fd21dfbaf10>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fd21dfbd310>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fd21e00ce10>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fd21dfa2d10>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fd21dfba150>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fd21dfba590>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fd21dfbac10>],
             'dx': [<numba.core.ir.Assign object at 0x7fd21df95c50>],
             'field': [<numba.core.ir.Assign object at 0x7fd21dfbd050>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fd21e00c810>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fd21dfa2f90>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fd21df95dd0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fd21dfa25d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f94dfb07a90>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f94dfb07050>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f94dfb1d210>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f94dfb1d390>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f94dfb1d450>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f94dfb1d650>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f94dfb1d890>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f94dfb1dcd0>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f94dfb310d0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f94dfb311d0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f94dfb312d0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f94dfb31710>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f94dfb0d350>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f94dfb31810>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f94dfb31910>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f94dfb31cd0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f94dfb0d1d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f94dfb1d710>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f94dfb1db10>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f94dfb1df50>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f94dfb31610>],
             'dx': [<numba.core.ir.Assign object at 0x7f94dfb0d950>],
             'field': [<numba.core.ir.Assign object at 0x7f94dfb31a10>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f94dfb075d0>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f94dfb1d990>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f94dfb0dad0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f94dfb1d050>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fa5c2bf2f50>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fa5c2bf2cd0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fa5c2b87cd0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fa5c2b87e50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fa5c2b87f10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fa5c2ba5150>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fa5c2ba5410>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fa5c2ba5850>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fa5c2ba5bd0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fa5c2ba5cd0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fa5c2ba5dd0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fa5c2baa250>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa5c2b82110>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fa5c2baa350>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fa5c2baa450>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fa5c2baa810>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fa5c2bf2890>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fa5c2ba5290>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fa5c2ba5690>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fa5c2ba5ad0>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fa5c2baa150>],
             'dx': [<numba.core.ir.Assign object at 0x7fa5c2b82d90>],
             'field': [<numba.core.ir.Assign object at 0x7fa5c2baa550>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fa5c2bf2750>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fa5c2ba5510>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fa5c2b82f10>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fa5c2b87c90>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fcc14002d90>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fcc14002b10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fcc13f97d10>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fcc13f97e90>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fcc13f97f50>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fcc13fb5190>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fcc13fb5450>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fcc13fb5890>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fcc13fb5c50>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fcc13fb5d50>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fcc13fb5e50>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fcc13fba2d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fcc14002fd0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fcc13fba3d0>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fcc13fba4d0>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fcc13fba850>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fcc140027d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fcc13fb52d0>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fcc13fb56d0>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fcc13fb5b10>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fcc13fba1d0>],
             'dx': [<numba.core.ir.Assign object at 0x7fcc1400cd10>],
             'field': [<numba.core.ir.Assign object at 0x7fcc13fba5d0>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fcc13f97b10>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fcc13fb5550>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fcc1400ce90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fcc13f97b90>]})
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f822a87f6d0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f821dbe3b90>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f821db79910>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f821db79b10>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f821db79bd0>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f821db79dd0>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f821db990d0>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f821db99510>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f821db998d0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f821db999d0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f821db99ad0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f821db99f10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f821dbed110>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f821db9b050>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f821db9b150>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f821db9b510>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f821dbe3450>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f821db79f10>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f821db99350>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f821db99790>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f821db99e10>],
             'dx': [<numba.core.ir.Assign object at 0x7f821dbedd10>],
             'field': [<numba.core.ir.Assign object at 0x7f821db9b250>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f821dbe3990>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f821db991d0>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f821dbede90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f821db798d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f5e173efed0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f5e173efc50>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f5e17384c10>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f5e17384e50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f5e17384f10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f5e173a2150>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f5e173a23d0>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f5e173a2810>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f5e173a2bd0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f5e173a2cd0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f5e173a2dd0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f5e173a7250>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f5e1737f090>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f5e173a7350>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f5e173a7450>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f5e173a7810>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f5e173ef7d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f5e173a2250>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f5e173a2650>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f5e173a2a90>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f5e173a7150>],
             'dx': [<numba.core.ir.Assign object at 0x7f5e1737fd50>],
             'field': [<numba.core.ir.Assign object at 0x7f5e173a7550>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f5e173ef6d0>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f5e173a24d0>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f5e1737fed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f5e17384c90>]})
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d279690>
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f837d328dd0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f837d328b50>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f837d2bdc50>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f837d2bde10>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f837d2bded0>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f837d2db110>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f837d2db3d0>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f837d2db810>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f837d2dbbd0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f837d2dbcd0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f837d2dbdd0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f837d2e0250>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f837d3321d0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f837d2e0350>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f837d2e0450>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f837d2e0810>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f837d328810>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f837d2db250>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f837d2db650>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f837d2dba90>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f837d2e0150>],
             'dx': [<numba.core.ir.Assign object at 0x7f837d332d50>],
             'field': [<numba.core.ir.Assign object at 0x7f837d2e0550>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f837d2bd990>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f837d2db4d0>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f837d332ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f837d2bdb10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ee8450>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e172d6f50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21dee6e10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa5c650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2ad9f90>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dacad90>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa5c2ad9f50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa5c2ae2110>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fa5c2ad9c50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fa5c2ad9cd0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fcc13ee8fd0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fcc13ef2190>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fcc13ee8cd0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fcc13ee8d50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f821dacae90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f821dad3050>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f821dacab50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f821dacabd0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f5e172d6f10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f5e172df090>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f5e172d6bd0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f5e172d6c50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fd21deeeb50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fd21deeec90>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fd21deee810>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fd21deee890>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f94dfa6a450>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f94dfa6a5d0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f94dfa6a110>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f94dfa6a190>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d20fe90>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f837d20fe50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f837d20ffd0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f837d20fb50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f837d20fbd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1d6310>
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f970d27d5d0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f970d27db90>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f970d213a10>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f970d213bd0>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f970d213c90>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f970d213e90>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f970d232190>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f970d2325d0>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f970d232990>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f970d232a90>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f970d232b90>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f970d232fd0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f970d287190>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f970d235110>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f970d235210>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f970d2355d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f970d27df50>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f970d213fd0>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f970d232410>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f970d232850>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f970d232ed0>],
             'dx': [<numba.core.ir.Assign object at 0x7f970d287d10>],
             'field': [<numba.core.ir.Assign object at 0x7f970d235310>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f970d27d910>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f970d232290>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f970d287e90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f970d213950>]})
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc2c22af10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21de98e10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2aaa710>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821dad3d50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17289d90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fd21dec0510>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fd21dec0890>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fd21dec0c10>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fd21deac8d0>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fd21deb9210>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fd21deb9410>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fd21de98c90>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fd21deb9750>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fd21deb9b50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fd21deb9d50>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fd21deac450>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fd21debd0d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fd21debd2d0>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fd21debd690>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fd21debd790>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fd21debd890>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fd21deac650>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fd21debdc50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fd21debde50>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fd21deac7d0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fd21dec03d0>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fd21dec0790>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fd21de98b50>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fd21deb9f50>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fd21debd550>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fd21debdb10>],
             'bool34': [<numba.core.ir.Assign object at 0x7fd21deb9310>],
             'bool58': [<numba.core.ir.Assign object at 0x7fd21def5f10>],
             'bool66': [<numba.core.ir.Assign object at 0x7fd21deb9c50>],
             'bool74': [<numba.core.ir.Assign object at 0x7fd21debd1d0>],
             'bool8': [<numba.core.ir.Assign object at 0x7fd21deac550>],
             'bool94': [<numba.core.ir.Assign object at 0x7fd21debdd50>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fd21dea1210>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fd21deacdd0>,
                            <numba.core.ir.Assign object at 0x7fd21dec0590>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fd21deac090>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fd21deac150>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fd21deb96d0>],
             'src_index': [<numba.core.ir.Assign object at 0x7fd21deaca90>,
                           <numba.core.ir.Assign object at 0x7fd21dea1190>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fd21dea1ed0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fd21dea1f90>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f94dfa35c50>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f94dfa35fd0>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f94dfa39390>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f94dfa2c090>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f94dfa2c950>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f94dfa2cb90>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f94dfa11510>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f94dfa300d0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f94dfa302d0>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f94dfa30510>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f94dfa1c850>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f94dfa30810>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f94dfa30a50>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f94dfa30dd0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f94dfa30ed0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f94dfa30fd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f94dfa1cc50>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f94dfa35390>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f94dfa355d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f94dfa1c8d0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f94dfa35b10>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f94dfa35ed0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f94dfa11090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f94dfa30710>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f94dfa30cd0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f94dfa35290>],
             'bool34': [<numba.core.ir.Assign object at 0x7f94dfa2ca90>],
             'bool58': [<numba.core.ir.Assign object at 0x7f94dfa6d6d0>],
             'bool66': [<numba.core.ir.Assign object at 0x7f94dfa30410>],
             'bool74': [<numba.core.ir.Assign object at 0x7f94dfa30950>],
             'bool8': [<numba.core.ir.Assign object at 0x7f94dfa1ccd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f94dfa354d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f94dfa11ad0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f94dfa2c590>,
                            <numba.core.ir.Assign object at 0x7f94dfa35cd0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f94dfa1cc10>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f94dfa1cad0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f94dfa2ce50>],
             'src_index': [<numba.core.ir.Assign object at 0x7f94dfa2c210>,
                           <numba.core.ir.Assign object at 0x7f94dfa11a50>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f94dfa1c690>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f94dfa1c790>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fa5c2aae890>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fa5c2aaec10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fa5c2aaef90>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fa5c2a9bc10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c2aa5550>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fa5c2aa5790>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fa5c2a8c190>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fa5c2aa5ad0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c2aa5e90>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fa5c2aaa110>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c2a9ba10>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c2aaa410>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fa5c2aaa650>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fa5c2aaa9d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fa5c2aaaad0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fa5c2aaabd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa5c2a9b850>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c2aaaf50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fa5c2aae1d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fa5c2a9bad0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fa5c2aae750>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fa5c2aaeb10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fa5c2a8c050>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fa5c2aaa310>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fa5c2aaa8d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fa5c2aaae50>],
             'bool34': [<numba.core.ir.Assign object at 0x7fa5c2aa5690>],
             'bool58': [<numba.core.ir.Assign object at 0x7fa5c2a86c90>],
             'bool66': [<numba.core.ir.Assign object at 0x7fa5c2aa5fd0>],
             'bool74': [<numba.core.ir.Assign object at 0x7fa5c2aaa550>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa5c2a9b550>],
             'bool94': [<numba.core.ir.Assign object at 0x7fa5c2aae0d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fa5c2a8c590>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fa5c2aa5150>,
                            <numba.core.ir.Assign object at 0x7fa5c2aae910>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fa5c2a9b610>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fa5c2a9b450>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fa5c2aa5a50>],
             'src_index': [<numba.core.ir.Assign object at 0x7fa5c2a9bd90>,
                           <numba.core.ir.Assign object at 0x7fa5c2a8c510>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fa5c2a9b290>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fa5c2a9b5d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fcc13ebe950>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fcc13ebecd0>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fcc13ec3050>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fcc13eabcd0>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13eb5610>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fcc13eb5850>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fcc13e9c1d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fcc13eb5b90>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13eb5f50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fcc13eba1d0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13eaba90>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13eba4d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fcc13eba710>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fcc13ebaad0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fcc13ebabd0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fcc13ebacd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fcc13eab8d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13ebe090>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fcc13ebe2d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fcc13eabb90>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fcc13ebe810>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fcc13ebebd0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fcc13e9c090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fcc13eba3d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fcc13eba990>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fcc13ebaf50>],
             'bool34': [<numba.core.ir.Assign object at 0x7fcc13eb5750>],
             'bool58': [<numba.core.ir.Assign object at 0x7fcc13e95d50>],
             'bool66': [<numba.core.ir.Assign object at 0x7fcc13eba0d0>],
             'bool74': [<numba.core.ir.Assign object at 0x7fcc13eba610>],
             'bool8': [<numba.core.ir.Assign object at 0x7fcc13eab5d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7fcc13ebe1d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fcc13e9c610>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fcc13eb5250>,
                            <numba.core.ir.Assign object at 0x7fcc13ebe9d0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fcc13eab690>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fcc13eab4d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fcc13eb5b10>],
             'src_index': [<numba.core.ir.Assign object at 0x7fcc13eabe90>,
                           <numba.core.ir.Assign object at 0x7fcc13e9c590>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fcc13eab310>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fcc13eab650>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f821da9f890>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f821da9fc10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f821da9ff90>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f821da8dc10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f821da96550>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f821da96790>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f821da7d1d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f821da96ad0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f821da96e90>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f821da9b110>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f821da8da10>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f821da9b410>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f821da9b650>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f821da9b9d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f821da9bad0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f821da9bbd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f821da8d350>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f821da9bf50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f821da9f1d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f821da8dad0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f821da9f750>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f821da9fb10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f821da7d090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f821da9b310>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f821da9b8d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f821da9be50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f821da96690>],
             'bool58': [<numba.core.ir.Assign object at 0x7f821da77c50>],
             'bool66': [<numba.core.ir.Assign object at 0x7f821da96fd0>],
             'bool74': [<numba.core.ir.Assign object at 0x7f821da9b550>],
             'bool8': [<numba.core.ir.Assign object at 0x7f821da8d6d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f821da9f0d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f821da7d510>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f821da96190>,
                            <numba.core.ir.Assign object at 0x7f821da9f910>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f821da8d5d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f821da8d410>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f821da96a50>],
             'src_index': [<numba.core.ir.Assign object at 0x7f821da8ddd0>,
                           <numba.core.ir.Assign object at 0x7f821da7d490>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f821da8d250>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f821da8d590>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f5e172ab750>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f5e172abad0>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f5e172abe50>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f5e17299b10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f5e172a3410>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f5e172a3650>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f5e17289190>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f5e172a3b50>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f5e172a3d50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f5e172a3f90>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f5e172996d0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f5e172a72d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f5e172a7510>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f5e172a78d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f5e172a79d0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f5e172a7ad0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f5e17299910>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f5e172a7e10>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f5e172ab090>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f5e17299a10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f5e172ab610>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f5e172ab9d0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f5e17289050>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f5e172a71d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f5e172a7790>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f5e172a7d10>],
             'bool34': [<numba.core.ir.Assign object at 0x7f5e172a3550>],
             'bool58': [<numba.core.ir.Assign object at 0x7f5e17283bd0>],
             'bool66': [<numba.core.ir.Assign object at 0x7f5e172a3e90>],
             'bool74': [<numba.core.ir.Assign object at 0x7f5e172a7410>],
             'bool8': [<numba.core.ir.Assign object at 0x7f5e17299810>],
             'bool94': [<numba.core.ir.Assign object at 0x7f5e172a7f50>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f5e172894d0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f5e172a3050>,
                            <numba.core.ir.Assign object at 0x7f5e172abb90>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f5e172992d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f5e17299390>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f5e172a3910>],
             'src_index': [<numba.core.ir.Assign object at 0x7f5e17299cd0>,
                           <numba.core.ir.Assign object at 0x7f5e172ab810>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f5e17299150>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f5e17299210>]})
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa5c2a8cc10>],
             104: [<numba.core.ir.Assign object at 0x7fa5c2ae2e10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fcc13e9c750>],
             104: [<numba.core.ir.Assign object at 0x7fcc13ec39d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fd21dec0b10>],
             104: [<numba.core.ir.Assign object at 0x7fd21dea1c90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f94dfa11110>],
             104: [<numba.core.ir.Assign object at 0x7f94dfa39e10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f821da7d710>],
             104: [<numba.core.ir.Assign object at 0x7f821da31950>]})
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f5e172ab8d0>],
             104: [<numba.core.ir.Assign object at 0x7f5e17289690>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e172abc90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94dfa1c710>
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821da9fdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17289650>
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f94dfa11fd0>],
             104: [<numba.core.ir.Assign object at 0x7f94dfa39990>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f821da77b10>],
             104: [<numba.core.ir.Assign object at 0x7f821da311d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f5e17289cd0>],
             104: [<numba.core.ir.Assign object at 0x7f5e1723d0d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e95d90>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2aaee50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dea1ad0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa5c2a86b10>],
             104: [<numba.core.ir.Assign object at 0x7fa5c2a40150>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fcc13e95f10>],
             104: [<numba.core.ir.Assign object at 0x7fcc13ec3310>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fd21defa450>],
             104: [<numba.core.ir.Assign object at 0x7fd21de52190>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94dfa11dd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821da7dc10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e2261ded0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a8c750>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13ebafd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dec0dd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d1bca50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f837d1e4750>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f837d1e4ad0>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f837d1e4e50>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f837d1d0ad0>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f837d1dc410>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f837d1dc650>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f837d265050>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f837d1dc990>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f837d1dcd50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f837d1dcf90>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f837d1d05d0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f837d1df2d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f837d1df510>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f837d1df890>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f837d1df990>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f837d1dfa90>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f837d1d0810>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f837d1dfe10>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f837d1e4090>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f837d1d0990>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f837d1e4610>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f837d1e49d0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f837d219a90>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f837d1df1d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f837d1df790>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f837d1dfd10>],
             'bool34': [<numba.core.ir.Assign object at 0x7f837d1dc550>],
             'bool58': [<numba.core.ir.Assign object at 0x7f837d1bcfd0>],
             'bool66': [<numba.core.ir.Assign object at 0x7f837d1dce90>],
             'bool74': [<numba.core.ir.Assign object at 0x7f837d1df410>],
             'bool8': [<numba.core.ir.Assign object at 0x7f837d1d0710>],
             'bool94': [<numba.core.ir.Assign object at 0x7f837d1dff50>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f837d1c3350>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f837d1dc050>,
                            <numba.core.ir.Assign object at 0x7f837d1e47d0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f837d1d0210>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f837d1d02d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f837d1dc910>],
             'src_index': [<numba.core.ir.Assign object at 0x7f837d1d0c90>,
                           <numba.core.ir.Assign object at 0x7f837d1c32d0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f837d1d0090>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f837d1d0150>]})
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f837d1c3e90>],
             104: [<numba.core.ir.Assign object at 0x7f837d1bcad0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970da1f6d0>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f970d167b50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f970d167cd0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f970d1677d0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f970d167850>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1e4f50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bccd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f837d1c3750>],
             104: [<numba.core.ir.Assign object at 0x7f837d176110>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f8389f72810>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d139e10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f970d139790>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f970d139b10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f970d139e90>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f970d125ad0>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f970d131410>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f970d131650>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f970d16ebd0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f970d131990>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f970d131d50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f970d131f90>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f970d125610>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f970d1362d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f970d136510>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f970d1368d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f970d1369d0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f970d136ad0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f970d125850>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f970d136e50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f970d1390d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f970d125990>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f970d139650>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f970d139a10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f970d173e10>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f970d1361d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f970d136790>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f970d136d50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f970d131550>],
             'bool58': [<numba.core.ir.Assign object at 0x7f970d111fd0>],
             'bool66': [<numba.core.ir.Assign object at 0x7f970d131e90>],
             'bool74': [<numba.core.ir.Assign object at 0x7f970d136410>],
             'bool8': [<numba.core.ir.Assign object at 0x7f970d125750>],
             'bool94': [<numba.core.ir.Assign object at 0x7f970d136f90>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f970d118310>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f970d131050>,
                            <numba.core.ir.Assign object at 0x7f970d139810>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f970d125210>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f970d1252d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f970d131910>],
             'src_index': [<numba.core.ir.Assign object at 0x7f970d125c90>,
                           <numba.core.ir.Assign object at 0x7f970d118290>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f970d125090>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f970d125150>]})
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f970d118690>],
             104: [<numba.core.ir.Assign object at 0x7f970d111f50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d139d90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f970d111e90>],
             104: [<numba.core.ir.Assign object at 0x7f970d0cb0d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d118e10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21dd99650>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df984c10>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2a03090>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d9768d0>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17180a10>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13d92a90>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fd21de28e10>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fd21de28ed0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fd21de28ad0>],
             'align': [<numba.core.ir.Assign object at 0x7fd21de28890>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fd21de280d0>],
             'size': [<numba.core.ir.Assign object at 0x7fd21de28750>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f94df9a33d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f94df9a3490>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f94df9a30d0>],
             'align': [<numba.core.ir.Assign object at 0x7f94df99ce90>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f94df99c3d0>],
             'size': [<numba.core.ir.Assign object at 0x7f94df99cd50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fa5c2a1c250>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa5c2a1c350>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa5c2a16ed0>],
             'align': [<numba.core.ir.Assign object at 0x7fa5c2a16cd0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fa5c2a16b90>],
             'size': [<numba.core.ir.Assign object at 0x7fa5c2a16c10>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f821da0d110>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f821da0d210>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f821da07d90>],
             'align': [<numba.core.ir.Assign object at 0x7f821da07bd0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f821da079d0>],
             'size': [<numba.core.ir.Assign object at 0x7f821da07a90>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f5e17219110>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f5e172191d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f5e17213dd0>],
             'align': [<numba.core.ir.Assign object at 0x7f5e17213b90>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f5e17213a50>],
             'size': [<numba.core.ir.Assign object at 0x7f5e17213ad0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fcc13e2c1d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fcc13e2c2d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fcc13e26e50>],
             'align': [<numba.core.ir.Assign object at 0x7fcc13e26c10>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fcc13e26ad0>],
             'size': [<numba.core.ir.Assign object at 0x7fcc13e26b50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d98f6d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e1719b790>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21ddb1510>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df925990>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c299d750>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13dad890>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa5c29a4090>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa5c299dc50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa5c299df50>],
             'align': [<numba.core.ir.Assign object at 0x7fa5c299db10>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fa5c299da50>],
             'cls': [<numba.core.ir.Assign object at 0x7fa5c299d9d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fcc13db40d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fcc13dadc90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fcc13dadf90>],
             'align': [<numba.core.ir.Assign object at 0x7fcc13dadb90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fcc13dadad0>],
             'cls': [<numba.core.ir.Assign object at 0x7fcc13dada50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f821d98ff50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f821d98fb50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f821d98fe50>],
             'align': [<numba.core.ir.Assign object at 0x7f821d98fa50>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f821d98f910>],
             'cls': [<numba.core.ir.Assign object at 0x7f821d98f850>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f5e1719bf90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f5e1719bbd0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f5e1719bed0>],
             'align': [<numba.core.ir.Assign object at 0x7f5e1719ba90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f5e1719b9d0>],
             'cls': [<numba.core.ir.Assign object at 0x7f5e1719b950>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fd21ddb1c90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fd21ddb18d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fd21ddb1bd0>],
             'align': [<numba.core.ir.Assign object at 0x7fd21ddb1750>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fd21ddb1690>],
             'cls': [<numba.core.ir.Assign object at 0x7fd21ddb1610>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f94df92c190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f94df925d10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f94df92c090>],
             'align': [<numba.core.ir.Assign object at 0x7f94df925bd0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f94df925a90>],
             'cls': [<numba.core.ir.Assign object at 0x7f94df925050>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d0ba850>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f837d14cfd0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f837d152110>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f837d14cc90>],
             'align': [<numba.core.ir.Assign object at 0x7f837d14cad0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f837d14c990>],
             'size': [<numba.core.ir.Assign object at 0x7f837d14ca10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d0d3650>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f837d0d3f10>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f837d0d3ad0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f837d0d3e10>],
             'align': [<numba.core.ir.Assign object at 0x7f837d0d3990>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f837d0d3850>],
             'cls': [<numba.core.ir.Assign object at 0x7f837d0d3050>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d90c950>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e17118850>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21dd33fd0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df89ed50>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c291a190>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13d29210>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fa5c2920910>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa5c2920a50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa5c2920750>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fa5c291a0d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fa5c29203d0>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fa5c2920490>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fcc13d30950>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fcc13d30a90>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fcc13d30790>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fcc13d29150>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fcc13d303d0>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fcc13d30490>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f821d913890>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f821d9139d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f821d9136d0>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f821d9132d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f821d913350>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f821d913410>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f5e1711e8d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f5e1711e9d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f5e1711e710>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f5e17118150>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f5e1711e310>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f5e1711e410>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fd21dd336d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fd21dd337d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fd21dd33510>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fd21dd2c0d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fd21dd33150>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fd21dd33210>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f94df8a9b10>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f94df8a9c50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f94df8a9950>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f94df89e350>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f94df8a9510>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f94df8a9610>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d050b10>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f837d0567d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f837d056910>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f837d056610>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f837d056210>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f837d056290>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f837d056350>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d012690>
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f970d0a2e50>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f970d0a2f50>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f970d0a2b10>],
             'align': [<numba.core.ir.Assign object at 0x7f970d0a28d0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f970d0a2790>],
             'size': [<numba.core.ir.Assign object at 0x7f970d0a2810>]})
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d02a590>
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f970d02ad50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f970d02a910>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f970d02ac50>],
             'align': [<numba.core.ir.Assign object at 0x7f970d02a7d0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f970d02a710>],
             'cls': [<numba.core.ir.Assign object at 0x7f970d02a690>]})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c28d2e90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13ce26d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d8b8ad0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e170c4190>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21def5c90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df84ec10>
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c28cbc90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fa5c28cbed0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fa5c2a79350>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fa5c28ceb50>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fa5c28cef90>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fa5c28d2150>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fa5c28d2390>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fa5c28d2890>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fa5c28d2ad0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fa5c2a79590>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fa5c28d2dd0>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fa5c2a79490>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fa5c2a79b90>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fa5c2a79e50>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fa5c2a74590>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fa5c2a65e10>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa5c2a65ed0>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fa5c2a74ed0>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fa5c29387d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fa5c2938410>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fa5c2938e10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fa5c28c7390>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c28c7810>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fa5c28c7a50>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c28c7d90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fa5c28c7fd0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fa5c28cb110>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fa5c28cb350>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fa5c28cb6d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fa5c28cb910>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fa5c28ce350>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fa5c28cec50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fa5c28d2250>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fa5c28d2990>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fa5c28d2c90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fa5c2938990>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fa5c2938cd0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fa5c28c7710>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fa5c28cb210>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fa5c28cb5d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fa5c28cbb90>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fa5c2a798d0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fa5c2a745d0>],
             'ax': [<numba.core.ir.Assign object at 0x7fa5c2a65d50>],
             'bool102': [<numba.core.ir.Assign object at 0x7fa5c28cbdd0>],
             'bool140': [<numba.core.ir.Assign object at 0x7fa5c28cee90>],
             'bool34': [<numba.core.ir.Assign object at 0x7fa5c2938910>],
             'bool68': [<numba.core.ir.Assign object at 0x7fa5c28c7950>],
             'bool76': [<numba.core.ir.Assign object at 0x7fa5c28c7ed0>],
             'bool94': [<numba.core.ir.Assign object at 0x7fa5c28cb810>],
             'inferred': [<numba.core.ir.Assign object at 0x7fa5c28ce0d0>,
                          <numba.core.ir.Assign object at 0x7fa5c28ce810>],
             'known_size': [<numba.core.ir.Assign object at 0x7fa5c2a08850>,
                            <numba.core.ir.Assign object at 0x7fa5c2938f10>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fa5c28c7090>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fa5c2a08450>,
                               <numba.core.ir.Assign object at 0x7fa5c2a65ad0>],
             'ok': [<numba.core.ir.Assign object at 0x7fa5c28ce450>,
                    <numba.core.ir.Assign object at 0x7fa5c28ced50>],
             'origsize': [<numba.core.ir.Assign object at 0x7fa5c2a082d0>],
             's': [<numba.core.ir.Assign object at 0x7fa5c2a65f90>],
             'shape': [<numba.core.ir.Assign object at 0x7fa5c2a080d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13cdbd90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fcc13cdbfd0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fcc13e89a10>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fcc13cdec50>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fcc13ce20d0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fcc13ce2250>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fcc13ce2490>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fcc13ce2950>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fcc13ce2b90>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fcc13e89090>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fcc13ce2e90>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fcc13e89f50>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fcc13e89dd0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fcc13e89ad0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fcc13e89b50>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fcc13e74d90>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fcc13ec3390>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fcc13e74c90>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fcc13d48810>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fcc13d48790>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fcc13d48f10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fcc13cd7490>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13cd7910>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fcc13cd7b50>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13cd7e90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fcc13cdb110>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fcc13cdb210>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fcc13cdb450>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fcc13cdb7d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fcc13cdba10>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fcc13cde450>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fcc13cded50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fcc13ce2350>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fcc13ce2a50>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fcc13ce2d50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fcc13d48990>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fcc13d48dd0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fcc13cd7810>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fcc13cdb310>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fcc13cdb6d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fcc13cdbc90>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fcc13e89050>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fcc13e77910>],
             'ax': [<numba.core.ir.Assign object at 0x7fcc13ec3710>],
             'bool102': [<numba.core.ir.Assign object at 0x7fcc13cdbed0>],
             'bool140': [<numba.core.ir.Assign object at 0x7fcc13cdef90>],
             'bool34': [<numba.core.ir.Assign object at 0x7fcc13d48850>],
             'bool68': [<numba.core.ir.Assign object at 0x7fcc13cd7a50>],
             'bool76': [<numba.core.ir.Assign object at 0x7fcc13cd7fd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7fcc13cdb910>],
             'inferred': [<numba.core.ir.Assign object at 0x7fcc13cde1d0>,
                          <numba.core.ir.Assign object at 0x7fcc13cde910>],
             'known_size': [<numba.core.ir.Assign object at 0x7fcc13e84ed0>,
                            <numba.core.ir.Assign object at 0x7fcc13cd7150>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fcc13cd7190>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fcc13e18c50>,
                               <numba.core.ir.Assign object at 0x7fcc13ec3610>],
             'ok': [<numba.core.ir.Assign object at 0x7fcc13cde550>,
                    <numba.core.ir.Assign object at 0x7fcc13cdee50>],
             'origsize': [<numba.core.ir.Assign object at 0x7fcc13e186d0>],
             's': [<numba.core.ir.Assign object at 0x7fcc13d48ad0>],
             'shape': [<numba.core.ir.Assign object at 0x7fcc13e18390>]})
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.ssa DEBUG]  SSA violators {'known_size', 'inferred', 'ok', 'num_neg_value'}
[numba.core.ssa DEBUG]  SSA violators {'inferred', 'num_neg_value', 'ok', 'known_size'}
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f821d8bcc50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f821d8bce90>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f821da6a8d0>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f821d8bfb10>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f821d8bff50>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f821d8c3110>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f821d8c3350>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f821d8c3810>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f821d8c3a50>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f821da6a390>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f821d8c3d50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f821da6ab90>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f821da6ab10>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f821da6ac50>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f821da6a9d0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f821da56510>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f821da56b90>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f821da56d10>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f821d92a710>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f821d92a690>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f821d92add0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f821d8b8350>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f821d8b87d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f821d8b8a10>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f821d8b8d50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f821d8b8f90>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f821d8bc0d0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f821d8bc310>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f821d8bc690>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f821d8bc8d0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f821d8bf310>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f821d8bfc10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f821d8c3210>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f821d8c3910>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f821d8c3c10>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f821d92aad0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f821d92acd0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f821d8b86d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f821d8bc1d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f821d8bc590>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f821d8bcb50>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f821da6a090>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f821dadd990>],
             'ax': [<numba.core.ir.Assign object at 0x7f821da56dd0>],
             'bool102': [<numba.core.ir.Assign object at 0x7f821d8bcd90>],
             'bool140': [<numba.core.ir.Assign object at 0x7f821d8bfe50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f821d92a950>],
             'bool68': [<numba.core.ir.Assign object at 0x7f821d8b8910>],
             'bool76': [<numba.core.ir.Assign object at 0x7f821d8b8e90>],
             'bool94': [<numba.core.ir.Assign object at 0x7f821d8bc7d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7f821d8bf090>,
                          <numba.core.ir.Assign object at 0x7f821d8bf7d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7f821da7da50>,
                            <numba.core.ir.Assign object at 0x7f821d92afd0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f821d8b8050>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f821d9f8c50>,
                               <numba.core.ir.Assign object at 0x7f821da56e90>],
             'ok': [<numba.core.ir.Assign object at 0x7f821d8bf410>,
                    <numba.core.ir.Assign object at 0x7f821d8bfd10>],
             'origsize': [<numba.core.ir.Assign object at 0x7f821d9f8410>],
             's': [<numba.core.ir.Assign object at 0x7f8223e799d0>],
             'shape': [<numba.core.ir.Assign object at 0x7f821d9f82d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f5e170c8990>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f5e170c8bd0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f5e17276090>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f5e170cd850>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f5e170cdc90>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f5e170cde10>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f5e170cf090>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f5e170cf590>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f5e170cf7d0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f5e172766d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f5e170cfad0>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f5e17276890>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f5e17276a10>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f5e17276ad0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f5e17276c90>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f5e172e9710>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f5e17262d10>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f5e172e9890>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f5e17136810>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f5e17136610>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f5e17136b10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f5e170c4090>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f5e170c4510>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f5e170c4750>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f5e170c4a90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f5e170c4cd0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f5e170c4dd0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f5e170c8050>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f5e170c83d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f5e170c8610>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f5e170cd050>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f5e170cd950>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f5e170cdf10>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f5e170cf690>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f5e170cf990>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f5e17262c90>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f5e17136a10>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f5e170c4410>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f5e170c4ed0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f5e170c82d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f5e170c8890>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f5e17276350>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f5e172e9c50>],
             'ax': [<numba.core.ir.Assign object at 0x7f5e17262ed0>],
             'bool102': [<numba.core.ir.Assign object at 0x7f5e170c8ad0>],
             'bool140': [<numba.core.ir.Assign object at 0x7f5e170cdb90>],
             'bool34': [<numba.core.ir.Assign object at 0x7f5e171368d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7f5e170c4650>],
             'bool76': [<numba.core.ir.Assign object at 0x7f5e170c4bd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f5e170c8510>],
             'inferred': [<numba.core.ir.Assign object at 0x7f5e170c8d90>,
                          <numba.core.ir.Assign object at 0x7f5e170cd510>],
             'known_size': [<numba.core.ir.Assign object at 0x7f5e17270ed0>,
                            <numba.core.ir.Assign object at 0x7f5e170c4150>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f5e17136d90>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f5e17204290>,
                               <numba.core.ir.Assign object at 0x7f5e17136bd0>],
             'ok': [<numba.core.ir.Assign object at 0x7f5e170cd150>,
                    <numba.core.ir.Assign object at 0x7f5e170cda50>],
             'origsize': [<numba.core.ir.Assign object at 0x7f5e17204610>],
             's': [<numba.core.ir.Assign object at 0x7f5e17262d90>],
             'shape': [<numba.core.ir.Assign object at 0x7f5e17204250>]})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.ssa DEBUG]  SSA violators {'num_neg_value', 'known_size', 'ok', 'inferred'}
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  SSA violators {'ok', 'known_size', 'num_neg_value', 'inferred'}
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fd21dcdda90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fd21dcddc90>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fd21de867d0>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fd21dce2910>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fd21dce2d50>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fd21dce2ed0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fd21dce4150>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fd21dce4610>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fd21dce4850>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fd21de869d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fd21dce4b50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fd21de86050>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fd21de86b10>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fd21de86a50>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fd21de86110>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fd21de75f10>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fd21de75f50>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fd21de75810>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fd21dd4a590>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fd21dd4a550>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fd21dd4ab90>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fd21dcd8110>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fd21dcd85d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fd21dcd87d0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fd21dcd8b50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fd21dcd8d50>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fd21dcd8e90>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fd21dcdd110>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fd21dcdd4d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fd21dcdd6d0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fd21dce2110>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fd21dce2a10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fd21dce2fd0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fd21dce4710>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fd21dce4a10>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fd21dd4a750>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fd21dd4aa50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fd21dcd8490>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fd21dcd8f90>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fd21dcdd390>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fd21dcdd950>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fd21de86c10>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fd21de86150>],
             'ax': [<numba.core.ir.Assign object at 0x7fd21de75c10>],
             'bool102': [<numba.core.ir.Assign object at 0x7fd21dcddb90>],
             'bool140': [<numba.core.ir.Assign object at 0x7fd21dce2c50>],
             'bool34': [<numba.core.ir.Assign object at 0x7fd21dd4a690>],
             'bool68': [<numba.core.ir.Assign object at 0x7fd21dcd86d0>],
             'bool76': [<numba.core.ir.Assign object at 0x7fd21dcd8c50>],
             'bool94': [<numba.core.ir.Assign object at 0x7fd21dcdd5d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7fd21dcdde50>,
                          <numba.core.ir.Assign object at 0x7fd21dce25d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7fd21de1a3d0>,
                            <numba.core.ir.Assign object at 0x7fd21dd4ad90>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fd21dd4add0>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fd21de1a110>,
                               <numba.core.ir.Assign object at 0x7fd21de75990>],
             'ok': [<numba.core.ir.Assign object at 0x7fd21dce2250>,
                    <numba.core.ir.Assign object at 0x7fd21dce2b50>],
             'origsize': [<numba.core.ir.Assign object at 0x7fd21de1ab50>],
             's': [<numba.core.ir.Assign object at 0x7fd21de75b90>],
             'shape': [<numba.core.ir.Assign object at 0x7fd21de1a5d0>]})
[numba.core.ssa DEBUG]  SSA violators {'known_size', 'inferred', 'ok', 'num_neg_value'}
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f94df852d90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f94df852fd0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f94df9ff1d0>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f94df855c50>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f94df8590d0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f94df859250>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f94df859490>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f94df859990>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f94df859b90>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f94df9ff9d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f94df859e90>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f94df9ffd90>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f94df991310>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f94df991110>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f94df9914d0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f94dfa73890>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f94dfa73b50>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f94dfa73bd0>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f94df8c0c90>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f94df8c0b10>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f94df8c0f10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f94df84e490>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f94df84e910>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f94df84eb50>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f94df84ee90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f94df852110>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f94df852210>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f94df852450>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f94df8527d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f94df852a10>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f94df855450>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f94df855d50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f94df859350>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f94df859a90>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f94df859d50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f94df8c0c10>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f94df8c0dd0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f94df84e810>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f94df852310>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f94df8526d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f94df852c90>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f94df9ff050>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f94df9ff450>],
             'ax': [<numba.core.ir.Assign object at 0x7f94dfa73190>],
             'bool102': [<numba.core.ir.Assign object at 0x7f94df852ed0>],
             'bool140': [<numba.core.ir.Assign object at 0x7f94df855f90>],
             'bool34': [<numba.core.ir.Assign object at 0x7f94df8c0a50>],
             'bool68': [<numba.core.ir.Assign object at 0x7f94df84ea50>],
             'bool76': [<numba.core.ir.Assign object at 0x7f94df84efd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f94df852910>],
             'inferred': [<numba.core.ir.Assign object at 0x7f94df8551d0>,
                          <numba.core.ir.Assign object at 0x7f94df855910>],
             'known_size': [<numba.core.ir.Assign object at 0x7f94df9ff4d0>,
                            <numba.core.ir.Assign object at 0x7f94df84e150>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f94df84e190>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f94df9ff550>,
                               <numba.core.ir.Assign object at 0x7f94dfa73dd0>],
             'ok': [<numba.core.ir.Assign object at 0x7f94df855550>,
                    <numba.core.ir.Assign object at 0x7f94df855e50>],
             'origsize': [<numba.core.ir.Assign object at 0x7f94df98de10>],
             's': [<numba.core.ir.Assign object at 0x7f94dfa739d0>],
             'shape': [<numba.core.ir.Assign object at 0x7f94df9eaf90>]})
[numba.core.ssa DEBUG]  SSA violators {'ok', 'num_neg_value', 'inferred', 'known_size'}
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa5c2a74090>],
             50: [<numba.core.ir.Assign object at 0x7fa5c28e1b90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fcc13cf4a90>],
             118: [<numba.core.ir.Assign object at 0x7fcc13cf4ed0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f821d9f8710>],
             36: [<numba.core.ir.Assign object at 0x7f821d9f8b10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f5e170cff10>],
             118: [<numba.core.ir.Assign object at 0x7f5e170cd9d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fd21dce4e10>],
             50: [<numba.core.ir.Assign object at 0x7fd21de644d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f94df859f50>],
             118: [<numba.core.ir.Assign object at 0x7f94dfa791d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e17136dd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991650>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92abd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08950>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4f90>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13cf4f50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fcc13cf4890>],
             36: [<numba.core.ir.Assign object at 0x7fcc13cf41d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f94df859f90>],
             36: [<numba.core.ir.Assign object at 0x7f94df98d610>]})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f5e170cf890>],
             50: [<numba.core.ir.Assign object at 0x7f5e172049d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f821d8c3f10>],
             50: [<numba.core.ir.Assign object at 0x7f821da6af90>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fa5c28e1a10>],
             118: [<numba.core.ir.Assign object at 0x7fa5c28e1510>]})
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de1a090>
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fd21dcf3a50>],
             118: [<numba.core.ir.Assign object at 0x7fd21dcf3e90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4250>
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170cfc10>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8d2a50>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13e18710>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fcc13cf4e10>],
             118: [<numba.core.ir.Assign object at 0x7fcc13cf4350>]})
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f94df868390>],
             118: [<numba.core.ir.Assign object at 0x7f94df868410>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fa5c28e15d0>],
             118: [<numba.core.ir.Assign object at 0x7fa5c28e1a90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e17136c90>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fd21de641d0>],
             118: [<numba.core.ir.Assign object at 0x7fd21de64590>]})
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f5e17204b10>],
             36: [<numba.core.ir.Assign object at 0x7f5e170ded90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f821d8d2550>],
             118: [<numba.core.ir.Assign object at 0x7f821d8d2a90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13cf4e50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df84e250>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a74bd0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21ddb8e90>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d8b8450>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170de890>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fcc13d48410>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fcc13e899d0>],
             50: [<numba.core.ir.Assign object at 0x7fcc13cf46d0>]})
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f94df99c590>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f94df868910>],
             50: [<numba.core.ir.Assign object at 0x7f94df98df90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa5c29389d0>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa5c28e14d0>],
             36: [<numba.core.ir.Assign object at 0x7fa5c28e1890>]})
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd21de64210>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fd21de64290>],
             36: [<numba.core.ir.Assign object at 0x7fd21dcf3410>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f821d8d2950>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5e170cf210>
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f821d9f8890>],
             118: [<numba.core.ir.Assign object at 0x7f821d8db250>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f5e170de990>],
             118: [<numba.core.ir.Assign object at 0x7f5e170de450>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970cf9fd10>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f970cfae610>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f970cfae750>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f970cfae450>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f970cfa6f90>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f970cfae050>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f970cfae110>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fcc13e18ad0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa5c2a08f10>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837d008f90>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f94df991550>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd21dce4ed0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f821d92a9d0>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5e170def50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f837d001b90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f837d001dd0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f837d1af8d0>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f837d005a50>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f837d005e90>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f837d008050>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f837d008290>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f837d008750>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f837d008990>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f837d19bd10>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f837d008c90>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f837d19bb90>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f837d19be10>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f837d13e710>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f837d13efd0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f837d13e590>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f837d13e2d0>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f837d13e7d0>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f837d06e250>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f837d06e9d0>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f837d06ed10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f837cffc290>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f837cffc710>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f837cffc950>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f837cffcc90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f837cffced0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f837cffcfd0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f837d001250>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f837d0015d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f837d001810>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f837d005250>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f837d005b50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f837d008150>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f837d008850>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f837d008b50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f837d06e790>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f837d06ec10>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f837cffc610>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f837d001110>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f837d0014d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f837d001a90>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f837d188790>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f837d13eed0>],
             'ax': [<numba.core.ir.Assign object at 0x7f837d13e850>],
             'bool102': [<numba.core.ir.Assign object at 0x7f837d001cd0>],
             'bool140': [<numba.core.ir.Assign object at 0x7f837d005d90>],
             'bool34': [<numba.core.ir.Assign object at 0x7f837d06e690>],
             'bool68': [<numba.core.ir.Assign object at 0x7f837cffc850>],
             'bool76': [<numba.core.ir.Assign object at 0x7f837cffcdd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f837d001710>],
             'inferred': [<numba.core.ir.Assign object at 0x7f837d001f90>,
                          <numba.core.ir.Assign object at 0x7f837d005710>],
             'known_size': [<numba.core.ir.Assign object at 0x7f837d1af950>,
                            <numba.core.ir.Assign object at 0x7f837d06ef10>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f837d06ef50>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f837d1afd50>,
                               <numba.core.ir.Assign object at 0x7f837d13eb50>],
             'ok': [<numba.core.ir.Assign object at 0x7f837d005350>,
                    <numba.core.ir.Assign object at 0x7f837d005c50>],
             'origsize': [<numba.core.ir.Assign object at 0x7f837d188550>],
             's': [<numba.core.ir.Assign object at 0x7f837d20f6d0>],
             'shape': [<numba.core.ir.Assign object at 0x7f837d1afe50>]})
[numba.core.ssa DEBUG]  SSA violators {'ok', 'inferred', 'known_size', 'num_neg_value'}
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f837d0172d0>],
             118: [<numba.core.ir.Assign object at 0x7f837d017710>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d19bcd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d017f90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f837d017810>],
             118: [<numba.core.ir.Assign object at 0x7f837d19b8d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d1bc950>
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f837d19bcd0>],
             50: [<numba.core.ir.Assign object at 0x7f837d017f50>]})
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d176f50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f837d188310>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f837d188390>],
             36: [<numba.core.ir.Assign object at 0x7f837d0176d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f837d1bc950>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970d1798d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f970cf56a90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f970cf56cd0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f970d0f8d50>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f970cf5b950>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f970cf5bd90>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f970cf5bf10>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f970cf5d190>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f970cf5d690>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f970cf5d8d0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f970d0f8d10>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f970cf5dbd0>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f970d0f8b10>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f970d092050>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f970d092110>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f970d092390>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f970d092e50>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f970d0927d0>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f970d092750>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f970d092b10>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f970d179050>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f970d1791d0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f970d0eeb50>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f970cfc45d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f970cfc4810>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f970cfc4b50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f970cfc4d90>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f970cfc4ed0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f970cf56150>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f970cf564d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f970cf56710>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f970cf5b150>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f970cf5ba50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f970cf5d050>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f970cf5d790>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f970cf5da90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f970d092f50>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f970d1799d0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f970cfc44d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f970cfc4fd0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f970cf563d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f970cf56990>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f970d0f8dd0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f970d092710>],
             'ax': [<numba.core.ir.Assign object at 0x7f970d092e90>],
             'bool102': [<numba.core.ir.Assign object at 0x7f970cf56bd0>],
             'bool140': [<numba.core.ir.Assign object at 0x7f970cf5bc90>],
             'bool34': [<numba.core.ir.Assign object at 0x7f970d1792d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7f970cfc4710>],
             'bool76': [<numba.core.ir.Assign object at 0x7f970cfc4c90>],
             'bool94': [<numba.core.ir.Assign object at 0x7f970cf56610>],
             'inferred': [<numba.core.ir.Assign object at 0x7f970cf56e90>,
                          <numba.core.ir.Assign object at 0x7f970cf5b610>],
             'known_size': [<numba.core.ir.Assign object at 0x7f970d0f8850>,
                            <numba.core.ir.Assign object at 0x7f970d0eee50>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f970d0eee90>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f970d0f2ad0>,
                               <numba.core.ir.Assign object at 0x7f970d0929d0>],
             'ok': [<numba.core.ir.Assign object at 0x7f970cf5b250>,
                    <numba.core.ir.Assign object at 0x7f970cf5bb50>],
             'origsize': [<numba.core.ir.Assign object at 0x7f970d0ff8d0>],
             's': [<numba.core.ir.Assign object at 0x7f970d092910>],
             'shape': [<numba.core.ir.Assign object at 0x7f970d0ffd90>]})
[numba.core.ssa DEBUG]  SSA violators {'known_size', 'num_neg_value', 'inferred', 'ok'}
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f970cf5ded0>],
             50: [<numba.core.ir.Assign object at 0x7f970d0ff0d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5de90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f970d1186d0>],
             36: [<numba.core.ir.Assign object at 0x7f970d0ffdd0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f970cf6c7d0>],
             118: [<numba.core.ir.Assign object at 0x7f970cf6cad0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf6c790>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f970d092510>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f970cf6cf10>],
             118: [<numba.core.ir.Assign object at 0x7f970cf6c290>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f970cf5df50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c27daad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13beacd0>
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fa5c27e50d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa5c27e5210>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa5c27dff50>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fa5c27dfdd0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fcc13bf5310>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fcc13bf5450>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fcc13bf51d0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fcc13bf0fd0>]})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d7cbb10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e16fdd350>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f821d7d62d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f821d7d6410>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f821d7d6190>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f821d7d0f10>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f5e16fe3050>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f5e16fe3150>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f5e16fdded0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f5e16fddd10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21dbec510>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fd21dbf1f50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fd21dbf70d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fd21dbf1e50>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fd21dbf1c50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df767fd0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f94df76d210>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f94df76d310>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f94df76d110>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f94df767f10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2739b50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13bc7d10>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d730090>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e16f3c350>
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fa5c2744110>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa5c2744250>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa5c273efd0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fa5c273ee50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fcc13b55310>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fcc13b55450>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fcc13b551d0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fcc13b4ffd0>]})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f821d736350>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f821d736490>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f821d736250>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f821d736090>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f5e16f42090>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f5e16f42190>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f5e16f3cf10>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f5e16f3cd90>]})
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21db4b5d0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fd21db50f90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fd21db570d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fd21db50e90>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fd21db50290>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df767110>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f94df6cc290>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f94df6cc390>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f94df6cc190>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f94df6c6050>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837cf11a50>
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f837cf1d090>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f837cf1d1d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f837cf17f50>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f837cf17d50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa5c2722a10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fcc13b37450>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f821d736810>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5e16f20a10>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fa5c272e350>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fa5c272e590>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fa5c272e690>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fa5c272e7d0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fa5c272e190>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fa5c2726f50>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fa5c2726c50>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fa5c2726d90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fa5c2726e50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fcc13b3f510>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fcc13b3f750>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fcc13b3f890>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fcc13b3f9d0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fcc13b3f350>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fcc13b3f110>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fcc13b37390>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fcc13b37f10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fcc13b37fd0>]})
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f821d71f510>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f821d71f750>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f821d71f850>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f821d71f990>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f821d71f350>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f821d71f150>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f821d7173d0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f821d717f50>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f821d71f050>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f5e16f2b2d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f5e16f2b510>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f5e16f2b650>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f5e16f2b750>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f5e16f2b110>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f5e16f23e90>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f5e16f23310>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f5e16f23d10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f5e16f23dd0>]})
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd21db34390>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fd21db41110>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fd21db41350>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fd21db41450>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fd21db41550>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fd21db39f10>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fd21db39d10>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fd21db390d0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fd21db39b10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fd21db39bd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94df6b6f10>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f94df6b64d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f94df6b6710>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f94df6b6810>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f94df6b6910>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f94df6b6310>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f94df6b60d0>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f94df6aee50>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f94df6aeed0>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f94df6aef90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837ce71ad0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f837ce7b0d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f837ce7b210>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f837ce75f90>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f837ce75dd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f837ce59990>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f837ce65310>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f837ce65550>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f837ce65650>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f837ce65790>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f837ce65150>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f837ce5df10>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f837ce5dbd0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f837ce5dd10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f837ce5ddd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970ce65910>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f970ce6bed0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f970ce70050>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f970ce6bd90>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f970ce6bb90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970cdc48d0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f970cdcaf50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f970cdd00d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f970cdcae10>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f970cdcac10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f970cdb2e10>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f970cdba150>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f970cdba390>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f970cdba4d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f970cdba610>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f970cdb2f50>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f970cdb2d10>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f970cdb29d0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f970cdb2b10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f970cdb2bd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
Finished initialization.
[torcpy.runtime WARNING]  MPI.Query_thread returns 3
[torcpy.runtime WARNING]  Info: MPI.Query_thread returns MPI.THREAD_MULTIPLE
[32mTORCPY: main starts[0m
Initialization Runtime:  88.49809670448303
[32mTORCPY: node[0]: created=584005, executed=73001[0m
Finished initialization.
Finished initialization.
[32mTORCPY: node[4]: created=0, executed=73001[0m
[32mTORCPY: node[3]: created=0, executed=73001[0m
Finished initialization.
[32mTORCPY: node[5]: created=0, executed=73000[0m
Finished initialization.
Finished initialization.
[32mTORCPY: node[6]: created=0, executed=73000[0m
Finished initialization.
[32mTORCPY: node[7]: created=0, executed=73000[0m
[32mTORCPY: node[1]: created=0, executed=73001[0m
Finished initialization.
[32mTORCPY: node[2]: created=0, executed=73001[0m
Complete Runtime:  3374.731584787369
100000,3374.731584787369
Complete Runtime:  3374.7240006923676
100000,3374.7240006923676
Complete Runtime:  3374.633310317993
100000,3374.633310317993
Complete Runtime:  3374.598848104477
100000,3374.598848104477
Complete Runtime:  3374.7182817459106
100000,3374.7182817459106
Complete Runtime:  3374.719188451767
100000,3374.719188451767
Complete Runtime:  3374.0178689956665
100000,3374.0178689956665
Complete Runtime:  3373.204552412033
100000,3373.204552412033
