[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b25a5d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2b2d1d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cfe2310>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ae36450>
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f63e58d0>
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd40fe410>
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582742850>
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fbc7d08a1d0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fbc7d08ab10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fbc7d0247d0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fbc7d024990>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fbc7d024a90>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fbc7d024c50>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fbc7d024f10>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fbc7d03c390>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fbc7d03c750>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fbc7d03c810>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fbc7d03c910>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fbc7d03cd50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fbc7d016610>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fbc7d03ce50>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fbc7d03cf50>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fbc7d03f390>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fbc7d08aed0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fbc7d024d90>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fbc7d03c1d0>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fbc7d03c610>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fbc7d03cc50>],
             'dx': [<numba.core.ir.Assign object at 0x7fbc7d016d10>],
             'field': [<numba.core.ir.Assign object at 0x7fbc7d03f090>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fbc7d08a890>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fbc7d03c050>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fbc7d016e90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fbc8a0a08d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fc13aee5e10>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fc13aee5b90>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fc13ae7bc50>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fc13ae7be10>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fc13ae7bed0>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fc13ae98110>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fc13ae983d0>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fc13ae98810>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fc13ae98bd0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fc13ae98cd0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fc13ae98dd0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fc13ae9d250>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc13aeef190>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fc13ae9d350>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fc13ae9d450>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fc13ae9d810>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fc13aee56d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fc13ae98250>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fc13ae98650>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fc13ae98a90>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fc13ae9d150>],
             'dx': [<numba.core.ir.Assign object at 0x7fc13aeefd10>],
             'field': [<numba.core.ir.Assign object at 0x7fc13ae9d550>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fc13aee5950>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fc13ae984d0>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fc13aeefe90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fc13ae7bb10>]})
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f9fe2bd4e90>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f9fe2bd4c10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f9fe2b6aa10>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f9fe2b6abd0>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f9fe2b6ac90>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f9fe2b6ae90>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f9fe2b89190>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f9fe2b895d0>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f9fe2b89990>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f9fe2b89a90>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f9fe2b89b90>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f9fe2b89fd0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9fe2bde150>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f9fe2b8c110>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f9fe2b8c210>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f9fe2b8c5d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f9fe2bd4650>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f9fe2b6afd0>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f9fe2b89410>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f9fe2b89850>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f9fe2b89ed0>],
             'dx': [<numba.core.ir.Assign object at 0x7f9fe2bded50>],
             'field': [<numba.core.ir.Assign object at 0x7f9fe2b8c310>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f9fe2bd4990>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f9fe2b89290>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f9fe2bdeed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f9fe2b6a9d0>]})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f513b308dd0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f513b29e790>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f513b29ef90>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f513b2bb190>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f513b2bb250>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f513b2bb450>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f513b2bb710>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f513b2bbb50>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f513b2bbf10>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f513b2c1050>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f513b2c1150>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f513b2c1590>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f513b298090>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f513b2c1690>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f513b2c1790>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f513b2c1b50>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f513b308bd0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f513b2bb590>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f513b2bb990>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f513b2bbdd0>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f513b2c1490>],
             'dx': [<numba.core.ir.Assign object at 0x7f513b298d50>],
             'field': [<numba.core.ir.Assign object at 0x7f513b2c1890>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f513b29e510>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f513b2bb810>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f513b298ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f513b29ea10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f36f6493ed0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f36f6429dd0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f36f6429fd0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f36f64461d0>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f36f6446290>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f36f6446490>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f36f6446750>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f36f6446b90>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f36f6446f50>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f36f6446fd0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f36f644c110>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f36f644c590>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f36f6423190>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f36f644c650>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f36f644c750>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f36f644cb10>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f36f6493ad0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f36f64465d0>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f36f64469d0>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f36f6446e10>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f36f644c450>],
             'dx': [<numba.core.ir.Assign object at 0x7f36f6423d50>],
             'field': [<numba.core.ir.Assign object at 0x7f36f644c890>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f36f6429610>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f36f6446850>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f36f6423ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f36f6429f10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f4cd41ace50>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f4cd41acc10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f4cd4142e10>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f4cd4142fd0>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f4cd415f0d0>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f4cd415f2d0>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f4cd415f590>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f4cd415f9d0>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f4cd415fd90>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f4cd415fe90>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f4cd415ff90>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f4cd4165410>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f4cd413c090>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f4cd4165510>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f4cd4165610>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f4cd41659d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f4cd41aca10>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f4cd415f410>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f4cd415f810>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f4cd415fc50>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f4cd4165310>],
             'dx': [<numba.core.ir.Assign object at 0x7f4cd413cd50>],
             'field': [<numba.core.ir.Assign object at 0x7f4cd4165710>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f4cd4142590>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f4cd415f690>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f4cd413ced0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f4cd4142d90>]})
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f55827f0dd0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f5582786b10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f5582786e50>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f55827a3050>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f55827a3110>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f55827a3310>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f55827a35d0>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f55827a3a10>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f55827a3dd0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f55827a3ed0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f55827a3f90>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f55827a9410>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f5582780110>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f55827a9510>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f55827a9610>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f55827a99d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f55827f0a90>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f55827a3450>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f55827a3850>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f55827a3c90>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f55827a9310>],
             'dx': [<numba.core.ir.Assign object at 0x7f5582780dd0>],
             'field': [<numba.core.ir.Assign object at 0x7f55827a9710>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f5582786510>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f55827a36d0>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f5582780f50>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f5582786d90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a0d0350>
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fb43a175350>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fb43a175bd0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fb43a10a8d0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fb43a10aa90>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fb43a10ab50>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fb43a10ad50>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fb43a12a050>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fb43a12a490>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fb43a12a850>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fb43a12a950>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fb43a12aa50>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fb43a12ae90>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fb43a104650>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fb43a12af90>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fb43a12c0d0>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fb43a12c490>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fb43a175f90>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fb43a10ae90>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fb43a12a2d0>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fb43a12a710>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fb43a12ad90>],
             'dx': [<numba.core.ir.Assign object at 0x7fb43a104d50>],
             'field': [<numba.core.ir.Assign object at 0x7fb43a12c1d0>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fb43a175950>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fb43a12a150>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fb43a104ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fb43a10a850>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13adcce50>
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7d024410>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2abb3d0>
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f51473a3e90>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4093950>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6a9a1d0>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fbc7cf6fbd0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fbc7cf6fd10>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fbc7cf6f8d0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fbc7cf6f950>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc13add3050>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc13add31d0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fc13adcccd0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fc13adccd50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9fe2abbf50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9fe2ac40d0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f9fe2abbc50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f9fe2abbcd0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f4cd409a210>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f4cd409a390>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f4cd4093ed0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f4cd4093f50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f36f6381350>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f36f6381490>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f36f6379f90>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f36f6381050>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f513b1f5150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f513b1f5290>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f513b1efdd0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f513b1efe50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f55826d8e90>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f55826e1090>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f55826e11d0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f55826d8d10>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f55826d8d90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a055dd0>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fb43a05cd50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fb43a05ce90>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fb43a05ca10>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fb43a05ca90>]})
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ad98e50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd4065950>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6350050>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fbc7cf426d0>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fbc7cf42a50>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fbc7cf42dd0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fbc7cf2ea50>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cf3a350>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fbc7cf3a590>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fbc7cf77b10>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fbc7cf3a890>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cf3ac90>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fbc7cf3aed0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cf2e590>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cf3f210>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fbc7cf3f450>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fbc7cf3f810>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fbc7cf3f910>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fbc7cf3fa10>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fbc7cf2e7d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cf3fd90>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fbc7cf3ffd0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fbc7cf2e950>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fbc7cf42590>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fbc7cf42950>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fbc7cf7ce90>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fbc7cf3f110>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fbc7cf3f6d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fbc7cf3fc90>],
             'bool34': [<numba.core.ir.Assign object at 0x7fbc7cf3a490>],
             'bool58': [<numba.core.ir.Assign object at 0x7fbc7cf1afd0>],
             'bool66': [<numba.core.ir.Assign object at 0x7fbc7cf3add0>],
             'bool74': [<numba.core.ir.Assign object at 0x7fbc7cf3f350>],
             'bool8': [<numba.core.ir.Assign object at 0x7fbc7cf2e6d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7fbc7cf3fed0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fbc7cf21310>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fbc7cf2ef90>,
                            <numba.core.ir.Assign object at 0x7fbc7cf42750>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fbc7cf2e190>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fbc7cf2e250>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fbc7cf3a810>],
             'src_index': [<numba.core.ir.Assign object at 0x7fbc7cf2ec10>,
                           <numba.core.ir.Assign object at 0x7fbc7cf21290>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fbc7cf21fd0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fbc7cf2e0d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fc13ada1990>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fc13ada1d10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fc13ada60d0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fc13ad8ed50>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fc13ad98650>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fc13ad98890>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fc13ad7f1d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fc13ad98bd0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fc13ad98f90>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fc13ad9d210>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fc13ad8ead0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fc13ad9d510>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fc13ad9d750>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fc13ad9dad0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fc13ad9dbd0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fc13ad9dcd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fc13ad8e410>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fc13ada1090>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fc13ada12d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fc13ad8ec10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fc13ada1850>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fc13ada1c10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fc13ad7f090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fc13ad9d410>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fc13ad9d9d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fc13ad9df50>],
             'bool34': [<numba.core.ir.Assign object at 0x7fc13ad98790>],
             'bool58': [<numba.core.ir.Assign object at 0x7fc13ad79d90>],
             'bool66': [<numba.core.ir.Assign object at 0x7fc13ad9d110>],
             'bool74': [<numba.core.ir.Assign object at 0x7fc13ad9d650>],
             'bool8': [<numba.core.ir.Assign object at 0x7fc13ad8e790>],
             'bool94': [<numba.core.ir.Assign object at 0x7fc13ada11d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fc13ad7f650>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fc13ad98290>,
                            <numba.core.ir.Assign object at 0x7fc13ada1a10>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fc13ad8e610>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fc13ad8e490>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fc13ad98b50>],
             'src_index': [<numba.core.ir.Assign object at 0x7fc13ad8ef10>,
                           <numba.core.ir.Assign object at 0x7fc13ad7f5d0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fc13ad8e290>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fc13ad8e750>]})
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f4cd4069b10>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f4cd4069e90>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f4cd406d250>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f4cd4054e90>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd4060790>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f4cd40609d0>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f4cd4045310>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f4cd4060d10>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd4065110>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f4cd4065350>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd4054c50>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd4065650>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f4cd4065890>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f4cd4065c50>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f4cd4065d50>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f4cd4065e50>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f4cd4054a90>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd4069210>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f4cd4069450>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f4cd4054d50>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f4cd40699d0>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f4cd4069d90>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f4cd40451d0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f4cd4065550>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f4cd4065b10>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f4cd4069110>],
             'bool34': [<numba.core.ir.Assign object at 0x7f4cd40608d0>],
             'bool58': [<numba.core.ir.Assign object at 0x7f4cd40adf10>],
             'bool66': [<numba.core.ir.Assign object at 0x7f4cd4065250>],
             'bool74': [<numba.core.ir.Assign object at 0x7f4cd4065790>],
             'bool8': [<numba.core.ir.Assign object at 0x7f4cd4054790>],
             'bool94': [<numba.core.ir.Assign object at 0x7f4cd4069350>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f4cd4045810>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f4cd40603d0>,
                            <numba.core.ir.Assign object at 0x7f4cd4069b90>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f4cd40547d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f4cd4054650>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f4cd4060c90>],
             'src_index': [<numba.core.ir.Assign object at 0x7f4cd4060090>,
                           <numba.core.ir.Assign object at 0x7f4cd4045790>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f4cd4054490>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f4cd4054910>]})
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f36f6350bd0>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f36f6350f50>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f36f6354310>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f36f633afd0>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f36f63478d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f36f6347b10>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f36f632c350>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f36f634b050>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f36f634b250>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f36f634b490>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f36f633aa90>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f36f634b790>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f36f634b9d0>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f36f634bd90>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f36f634be50>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f36f634bf50>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f36f633ad50>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f36f6350310>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f36f6350550>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f36f633aed0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f36f6350ad0>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f36f6350e50>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f36f632c690>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f36f634b690>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f36f634bc50>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f36f6350210>],
             'bool34': [<numba.core.ir.Assign object at 0x7f36f6347a10>],
             'bool58': [<numba.core.ir.Assign object at 0x7f36f632c490>],
             'bool66': [<numba.core.ir.Assign object at 0x7f36f634b390>],
             'bool74': [<numba.core.ir.Assign object at 0x7f36f634b8d0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f36f633aad0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f36f6350450>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f36f632c910>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f36f6347510>,
                            <numba.core.ir.Assign object at 0x7f36f6350c50>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f36f633a8d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f36f633a710>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f36f6347dd0>],
             'src_index': [<numba.core.ir.Assign object at 0x7f36f63471d0>,
                           <numba.core.ir.Assign object at 0x7f36f632c890>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f36f633a550>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f36f633a890>]})
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2a6eb90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b1a3b10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f9fe2a907d0>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f9fe2a90b50>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f9fe2a90ed0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f9fe2a7ebd0>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe2a884d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f9fe2a88710>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f9fe2a6e1d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f9fe2a88a50>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe2a88e10>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f9fe2a8c090>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe2a7e9d0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe2a8c390>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f9fe2a8c5d0>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f9fe2a8c950>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f9fe2a8ca50>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f9fe2a8cb50>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f9fe2a7e810>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe2a8ced0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f9fe2a90150>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f9fe2a7ead0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f9fe2a90690>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f9fe2a90a50>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f9fe2a6e090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f9fe2a8c290>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f9fe2a8c850>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f9fe2a8cdd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7f9fe2a88610>],
             'bool58': [<numba.core.ir.Assign object at 0x7f9fe2a68c50>],
             'bool66': [<numba.core.ir.Assign object at 0x7f9fe2a88f50>],
             'bool74': [<numba.core.ir.Assign object at 0x7f9fe2a8c4d0>],
             'bool8': [<numba.core.ir.Assign object at 0x7f9fe2a7e510>],
             'bool94': [<numba.core.ir.Assign object at 0x7f9fe2a90050>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f9fe2a6e510>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f9fe2a88110>,
                            <numba.core.ir.Assign object at 0x7f9fe2a90850>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f9fe2a7e550>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f9fe2a7e3d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f9fe2a889d0>],
             'src_index': [<numba.core.ir.Assign object at 0x7f9fe2a7ed90>,
                           <numba.core.ir.Assign object at 0x7f9fe2a6e490>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f9fe2a7e210>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f9fe2a7e690>]})
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f513b1c5910>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f513b1c5c90>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f513b1ca050>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f513b1b0d10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f513b1bc610>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f513b1bc850>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f513b1a31d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f513b1bcb90>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f513b1bcf50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f513b1c11d0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f513b1b07d0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f513b1c14d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f513b1c1710>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f513b1c1ad0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f513b1c1bd0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f513b1c1cd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f513b1b0410>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f513b1c5090>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f513b1c52d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f513b1b0c10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f513b1c5810>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f513b1c5b90>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f513b1a3090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f513b1c13d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f513b1c1990>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f513b1c1f50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f513b1bc750>],
             'bool58': [<numba.core.ir.Assign object at 0x7f513b19cd90>],
             'bool66': [<numba.core.ir.Assign object at 0x7f513b1c10d0>],
             'bool74': [<numba.core.ir.Assign object at 0x7f513b1c1610>],
             'bool8': [<numba.core.ir.Assign object at 0x7f513b1b0790>],
             'bool94': [<numba.core.ir.Assign object at 0x7f513b1c51d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f513b1a3650>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f513b1bc250>,
                            <numba.core.ir.Assign object at 0x7f513b1c5990>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f513b1b05d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f513b1b0450>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f513b1bcb10>],
             'src_index': [<numba.core.ir.Assign object at 0x7f513b1b0ed0>,
                           <numba.core.ir.Assign object at 0x7f513b1a35d0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f513b1b0250>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f513b1b06d0>]})
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fbc7cf42f50>],
             104: [<numba.core.ir.Assign object at 0x7fbc7cf219d0>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd40a1b50>
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fc13ad79cd0>],
             104: [<numba.core.ir.Assign object at 0x7fc13ada6b50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f4cd4045150>],
             104: [<numba.core.ir.Assign object at 0x7f4cd406db10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f36f6354e50>],
             104: [<numba.core.ir.Assign object at 0x7f36f6354c90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f9fe2a6ead0>],
             104: [<numba.core.ir.Assign object at 0x7f9fe2a22790>]})
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f513b1a38d0>],
             104: [<numba.core.ir.Assign object at 0x7f513b1ca950>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f638f4d0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558268bad0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f55826ada10>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f55826add90>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f55826b2150>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f558269ad90>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f55826a4690>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f55826a48d0>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f558268b1d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f55826a4c10>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f55826a4fd0>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f55826a9250>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f558269a850>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f55826a9550>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f55826a9790>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f55826a9b50>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f55826a9c50>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f55826a9d50>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f558269ab10>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f55826ad110>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f55826ad350>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f558269ac90>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f55826ad8d0>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f55826adc90>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f558268b090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f55826a9450>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f55826a9a10>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f55826a9fd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7f55826a47d0>],
             'bool58': [<numba.core.ir.Assign object at 0x7f5582685d10>],
             'bool66': [<numba.core.ir.Assign object at 0x7f55826a9150>],
             'bool74': [<numba.core.ir.Assign object at 0x7f55826a9690>],
             'bool8': [<numba.core.ir.Assign object at 0x7f558269a890>],
             'bool94': [<numba.core.ir.Assign object at 0x7f55826ad250>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f558268b5d0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f55826a42d0>,
                            <numba.core.ir.Assign object at 0x7f55826ada90>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f558269a690>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f558269a4d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f55826a4b90>],
             'src_index': [<numba.core.ir.Assign object at 0x7f558269af50>,
                           <numba.core.ir.Assign object at 0x7f558268b550>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f558269a310>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f558269a650>]})
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf1aa50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13add3e50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fbc7cf21a10>],
             104: [<numba.core.ir.Assign object at 0x7fbc7ced4050>]})
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fc13ad7f850>],
             104: [<numba.core.ir.Assign object at 0x7fc13ada6050>]})
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f638f490>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f36f6354810>],
             104: [<numba.core.ir.Assign object at 0x7f36f632ca90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd4054050>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f4cd4045b10>],
             104: [<numba.core.ir.Assign object at 0x7f4cd406d510>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a90f90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f9fe2a68b50>],
             104: [<numba.core.ir.Assign object at 0x7f9fe2a22090>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f558268b950>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f558268bcd0>],
             104: [<numba.core.ir.Assign object at 0x7f55826b2b10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b1f5910>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f513b19ccd0>],
             104: [<numba.core.ir.Assign object at 0x7f513b1ca110>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf42e50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ada1f90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f6354a50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd40a1b50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a6e890>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b1c5390>
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55826e1c50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f5582685c90>],
             104: [<numba.core.ir.Assign object at 0x7f55826b2450>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f558268b950>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb43a00fc10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fb43a030710>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fb43a030a90>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fb43a030e10>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fb43a01cad0>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fb43a0283d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fb43a028610>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fb43a068710>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fb43a028950>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fb43a028d10>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fb43a028f50>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fb43a01c650>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fb43a02d290>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fb43a02d4d0>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fb43a02d850>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fb43a02d950>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fb43a02da50>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fb43a01c890>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fb43a02ddd0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fb43a030050>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fb43a01c990>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fb43a0305d0>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fb43a030990>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fb43a00f090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fb43a02d190>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fb43a02d750>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fb43a02dcd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fb43a028510>],
             'bool58': [<numba.core.ir.Assign object at 0x7fb43a008b10>],
             'bool66': [<numba.core.ir.Assign object at 0x7fb43a028e50>],
             'bool74': [<numba.core.ir.Assign object at 0x7fb43a02d3d0>],
             'bool8': [<numba.core.ir.Assign object at 0x7fb43a01c790>],
             'bool94': [<numba.core.ir.Assign object at 0x7fb43a02df10>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fb43a00f3d0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fb43a01cfd0>,
                            <numba.core.ir.Assign object at 0x7fb43a030790>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fb43a01c250>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fb43a01c310>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fb43a0288d0>],
             'src_index': [<numba.core.ir.Assign object at 0x7fb43a01cc90>,
                           <numba.core.ir.Assign object at 0x7fb43a00f350>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fb43a01c0d0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fb43a01c190>]})
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fb43a030fd0>],
             104: [<numba.core.ir.Assign object at 0x7fb43a00f6d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb43a00fcd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fb43a008bd0>],
             104: [<numba.core.ir.Assign object at 0x7fb439fc2190>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb43a030c50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd3f39b10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f629cc90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7ce1a750>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ac71b10>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b099a90>
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2967850>
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fbc7ceaae90>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fbc7ceaaf90>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fbc7ceaab90>],
             'align': [<numba.core.ir.Assign object at 0x7fbc7ceaa950>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fbc7ceaa810>],
             'size': [<numba.core.ir.Assign object at 0x7fbc7ceaa890>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fc13ad0f210>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fc13ad0f310>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fc13ad0aed0>],
             'align': [<numba.core.ir.Assign object at 0x7fc13ad0acd0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fc13ad0ab90>],
             'size': [<numba.core.ir.Assign object at 0x7fc13ad0ac10>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f4cd3fd7290>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f4cd3fd7390>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f4cd3fd0f50>],
             'align': [<numba.core.ir.Assign object at 0x7f4cd3fd0d90>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f4cd3fd0c50>],
             'size': [<numba.core.ir.Assign object at 0x7f4cd3fd0cd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f36f62be490>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f36f62be550>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f36f62be150>],
             'align': [<numba.core.ir.Assign object at 0x7f36f62b7f10>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f36f62b7dd0>],
             'size': [<numba.core.ir.Assign object at 0x7f36f62b7e50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f513b1331d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f513b133290>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f513b12de50>],
             'align': [<numba.core.ir.Assign object at 0x7f513b12dc50>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f513b12db10>],
             'size': [<numba.core.ir.Assign object at 0x7f513b12db90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f9fe29f8f50>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f9fe29ff090>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f9fe29f8c10>],
             'align': [<numba.core.ir.Assign object at 0x7f9fe29f8a90>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f9fe29f80d0>],
             'size': [<numba.core.ir.Assign object at 0x7f9fe29f8950>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f6240bd0>
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7ce33610>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ac91910>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd3f58a50>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b0b58d0>
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2980690>
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fbc7ce33d50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fbc7ce33950>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fbc7ce33c90>],
             'align': [<numba.core.ir.Assign object at 0x7fbc7ce33810>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fbc7ce33750>],
             'cls': [<numba.core.ir.Assign object at 0x7fbc7ce336d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc13ac981d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc13ac91d50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc13ac980d0>],
             'align': [<numba.core.ir.Assign object at 0x7fc13ac91c10>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fc13ac91b50>],
             'cls': [<numba.core.ir.Assign object at 0x7fc13ac91ad0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f4cd3f5f1d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f4cd3f58d90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f4cd3f5f0d0>],
             'align': [<numba.core.ir.Assign object at 0x7f4cd3f58c90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f4cd3f58bd0>],
             'cls': [<numba.core.ir.Assign object at 0x7f4cd3f58b50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f36f6247390>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f36f6240f50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f36f62472d0>],
             'align': [<numba.core.ir.Assign object at 0x7f36f6240e50>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f36f6240d90>],
             'cls': [<numba.core.ir.Assign object at 0x7f36f6240d10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f513b0bc0d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f513b0b5cd0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f513b0b5fd0>],
             'align': [<numba.core.ir.Assign object at 0x7f513b0b5b90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f513b0b5ad0>],
             'cls': [<numba.core.ir.Assign object at 0x7f513b0b5a50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f9fe2980ed0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f9fe2980b50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f9fe2980e10>],
             'align': [<numba.core.ir.Assign object at 0x7f9fe29809d0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f9fe2980910>],
             'cls': [<numba.core.ir.Assign object at 0x7f9fe2980890>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f55825fcb90>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f558261b290>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f558261b390>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f5582616f50>],
             'align': [<numba.core.ir.Assign object at 0x7f5582616d10>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f5582616bd0>],
             'size': [<numba.core.ir.Assign object at 0x7f5582616c50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558259d850>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f55825a4110>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f558259dcd0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f55825a4050>],
             'align': [<numba.core.ir.Assign object at 0x7f558259db90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f558259dad0>],
             'cls': [<numba.core.ir.Assign object at 0x7f558259da50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439f077d0>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fb439f98e90>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fb439f98f90>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fb439f98b90>],
             'align': [<numba.core.ir.Assign object at 0x7fb439f98990>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fb439f98050>],
             'size': [<numba.core.ir.Assign object at 0x7fb439f98850>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439f21610>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cdb0b50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13ac0f890>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd3ed2a90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f61bab90>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513b032a10>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2905fd0>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fb439f21d90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fb439f219d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fb439f21cd0>],
             'align': [<numba.core.ir.Assign object at 0x7fb439f218d0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fb439f21790>],
             'cls': [<numba.core.ir.Assign object at 0x7fb439f21050>]})
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f513b039950>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f513b039a50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f513b039790>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f513b032110>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f513b0393d0>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f513b039490>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f9fe2905810>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f9fe2905950>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9fe2905650>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f9fe28fe310>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f9fe29052d0>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f9fe2905390>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fbc7cdb7790>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fbc7cdb7890>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fbc7cdb75d0>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fbc7cdb0190>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fbc7cdb7210>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fbc7cdb72d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fc13ac16910>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fc13ac16a50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc13ac16750>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fc13ac0f0d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fc13ac16390>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fc13ac16450>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f4cd3edcb50>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f4cd3edcc90>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f4cd3edc990>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f4cd3ed22d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f4cd3edc5d0>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f4cd3edc690>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f36f61c2c50>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f36f61c2d50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f36f61c2a90>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f36f61ba3d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f36f61c2690>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f36f61c2750>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558251b390>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f5582522a10>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f5582522b10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f5582522850>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f55825223d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f5582522450>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f5582522510>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439ea5ed0>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fb439ea56d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fb439ea5810>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fb439ea5510>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fb439e9e110>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fb439ea5110>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fb439ea5210>]})
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513afebf50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe29e9e90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f617be10>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd406db50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cf81190>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f513afe4bd0>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f513afe4e10>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f513b18f110>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f513afe7a90>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f513afe7ed0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f513afeb090>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f513afeb2d0>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f513afeb7d0>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f513afeba10>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f513b18ff90>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f513afebd10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f513b18fc10>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f513b164610>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f513b164310>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f513b164510>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f513b164550>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f513b17bdd0>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f513b164a90>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f513b051790>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f513b0519d0>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f513b051d10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f513afe0290>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f513afe0710>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f513afe0950>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f513afe0c90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f513afe0ed0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f513afe4050>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f513afe4290>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f513afe4610>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f513afe4850>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f513afe7290>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f513afe7b90>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f513afeb190>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f513afeb8d0>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f513afebbd0>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f513b051890>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f513b051c10>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f513afe0610>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f513afe4150>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f513afe4510>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f513afe4ad0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f513b18f890>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f513b1641d0>],
             'ax': [<numba.core.ir.Assign object at 0x7f513b17bf10>],
             'bool102': [<numba.core.ir.Assign object at 0x7f513afe4d10>],
             'bool140': [<numba.core.ir.Assign object at 0x7f513afe7dd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7f513b051810>],
             'bool68': [<numba.core.ir.Assign object at 0x7f513afe0850>],
             'bool76': [<numba.core.ir.Assign object at 0x7f513afe0dd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f513afe4750>],
             'inferred': [<numba.core.ir.Assign object at 0x7f513afe4fd0>,
                          <numba.core.ir.Assign object at 0x7f513afe7750>],
             'known_size': [<numba.core.ir.Assign object at 0x7f513b18f350>,
                            <numba.core.ir.Assign object at 0x7f513b051f10>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f513b051f50>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f513b121450>,
                               <numba.core.ir.Assign object at 0x7f513b17bd90>],
             'ok': [<numba.core.ir.Assign object at 0x7f513afe7390>,
                    <numba.core.ir.Assign object at 0x7f513afe7c90>],
             'origsize': [<numba.core.ir.Assign object at 0x7f513b11d850>],
             's': [<numba.core.ir.Assign object at 0x7f513b17bf50>],
             'shape': [<numba.core.ir.Assign object at 0x7f513b11d810>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe28afb90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f9fe28afdd0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f9fe29e9610>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f9fe28b4a50>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f9fe28b4e90>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f9fe28b6050>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f9fe28b6290>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f9fe28b6790>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f9fe28b69d0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f9fe2a5b150>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f9fe28b6cd0>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f9fe2a5bf50>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f9fe2a5be90>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f9fe2a5b7d0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f9fe2a5bc50>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f9fe2a47d50>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f9fe2a47c50>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f9fe2a47ed0>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f9fe291c610>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f9fe291c5d0>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f9fe291cd10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f9fe28ab290>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe28ab710>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f9fe28ab950>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe28abc90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f9fe28abed0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f9fe28abfd0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f9fe28af250>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f9fe28af5d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f9fe28af810>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f9fe28b4250>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f9fe28b4b50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f9fe28b6150>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f9fe28b6890>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f9fe28b6b90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f9fe291c9d0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f9fe291cc10>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f9fe28ab610>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f9fe28af110>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f9fe28af4d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f9fe28afa90>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f9fe2a5b910>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f9fe2a5b950>],
             'ax': [<numba.core.ir.Assign object at 0x7f9fe2a47dd0>],
             'bool102': [<numba.core.ir.Assign object at 0x7f9fe28afcd0>],
             'bool140': [<numba.core.ir.Assign object at 0x7f9fe28b4d90>],
             'bool34': [<numba.core.ir.Assign object at 0x7f9fe291c690>],
             'bool68': [<numba.core.ir.Assign object at 0x7f9fe28ab850>],
             'bool76': [<numba.core.ir.Assign object at 0x7f9fe28abdd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f9fe28af710>],
             'inferred': [<numba.core.ir.Assign object at 0x7f9fe28aff90>,
                          <numba.core.ir.Assign object at 0x7f9fe28b4710>],
             'known_size': [<numba.core.ir.Assign object at 0x7f9fe29e93d0>,
                            <numba.core.ir.Assign object at 0x7f9fe291cf10>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f9fe291cf50>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f9fe29e9710>,
                               <numba.core.ir.Assign object at 0x7f9fe2a47d10>],
             'ok': [<numba.core.ir.Assign object at 0x7f9fe28b4350>,
                    <numba.core.ir.Assign object at 0x7f9fe28b4c50>],
             'origsize': [<numba.core.ir.Assign object at 0x7f9fe29e97d0>],
             's': [<numba.core.ir.Assign object at 0x7f9fe2a47c10>],
             'shape': [<numba.core.ir.Assign object at 0x7f9fe29e9890>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd3e88e10>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f4cd3e8b090>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f4cd4033a10>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f4cd3e8bcd0>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f4cd3e8f150>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f4cd3e8f2d0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f4cd3e8f510>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f4cd3e8fa10>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f4cd3e8fc50>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f4cd4033b50>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f4cd3e8ff50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f4cd4033250>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f4cd3fc7090>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f4cd3fc7310>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f4cd4021050>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f4cd40a7bd0>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f4cd40a7790>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f4cd40a7b90>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f4cd3ef4c90>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f4cd3ef4b10>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f4cd3ef4f90>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f4cd3e84510>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd3e84990>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f4cd3e84bd0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd3e84f10>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f4cd3e88190>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f4cd3e88290>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f4cd3e884d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f4cd3e88850>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f4cd3e88a90>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f4cd3e8b4d0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f4cd3e8bdd0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f4cd3e8f3d0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f4cd3e8fb10>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f4cd3e8fe10>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f4cd3ef4bd0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f4cd3ef4e50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f4cd3e84890>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f4cd3e88390>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f4cd3e88750>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f4cd3e88d10>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f4cd4033e90>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f4cd3fc7510>],
             'ax': [<numba.core.ir.Assign object at 0x7f4cd40a7750>],
             'bool102': [<numba.core.ir.Assign object at 0x7f4cd3e88f50>],
             'bool140': [<numba.core.ir.Assign object at 0x7f4cd3e8f050>],
             'bool34': [<numba.core.ir.Assign object at 0x7f4cd3ef4650>],
             'bool68': [<numba.core.ir.Assign object at 0x7f4cd3e84ad0>],
             'bool76': [<numba.core.ir.Assign object at 0x7f4cd3e88090>],
             'bool94': [<numba.core.ir.Assign object at 0x7f4cd3e88990>],
             'inferred': [<numba.core.ir.Assign object at 0x7f4cd3e8b250>,
                          <numba.core.ir.Assign object at 0x7f4cd3e8b990>],
             'known_size': [<numba.core.ir.Assign object at 0x7f4cd4033390>,
                            <numba.core.ir.Assign object at 0x7f4cd3e841d0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f4cd3e84210>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f4cd4033210>,
                               <numba.core.ir.Assign object at 0x7f4cd40a7490>],
             'ok': [<numba.core.ir.Assign object at 0x7f4cd3e8b5d0>,
                    <numba.core.ir.Assign object at 0x7f4cd3e8bed0>],
             'origsize': [<numba.core.ir.Assign object at 0x7f4cd3fc1850>],
             's': [<numba.core.ir.Assign object at 0x7f4cd40a7ed0>],
             'shape': [<numba.core.ir.Assign object at 0x7f4cd4033c10>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f36f616fed0>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f36f6172150>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f36f631a910>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f36f6172d90>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f36f6176210>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f36f6176390>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f36f61765d0>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f36f6176a90>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f36f6176cd0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f36f631a1d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f36f6176f90>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f36f62ad710>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f36f62ad450>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f36f62ad690>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f36f6308850>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f36f638f890>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f36f638f190>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f36f638fb50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f36f61dba50>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f36f61db690>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f36f616b0d0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f36f616b610>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f36f616ba90>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f36f616bcd0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f36f616f050>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f36f616f290>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f36f616f390>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f36f616f5d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f36f616f910>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f36f616fb50>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f36f6172590>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f36f6172e90>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f36f6176490>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f36f6176b90>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f36f6176e90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f36f61dbcd0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f36f61dbf50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f36f616b990>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f36f616f490>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f36f616f810>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f36f616fdd0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f36f633a050>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f36f638f750>],
             'ax': [<numba.core.ir.Assign object at 0x7f36f638f2d0>],
             'bool102': [<numba.core.ir.Assign object at 0x7f36f6172050>],
             'bool140': [<numba.core.ir.Assign object at 0x7f36f6176110>],
             'bool34': [<numba.core.ir.Assign object at 0x7f36f61dbb90>],
             'bool68': [<numba.core.ir.Assign object at 0x7f36f616bbd0>],
             'bool76': [<numba.core.ir.Assign object at 0x7f36f616f190>],
             'bool94': [<numba.core.ir.Assign object at 0x7f36f616fa50>],
             'inferred': [<numba.core.ir.Assign object at 0x7f36f6172310>,
                          <numba.core.ir.Assign object at 0x7f36f6172a50>],
             'known_size': [<numba.core.ir.Assign object at 0x7f36f631a090>,
                            <numba.core.ir.Assign object at 0x7f36f616b2d0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f36f616b310>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f36f631a410>,
                               <numba.core.ir.Assign object at 0x7f36f638fa90>],
             'ok': [<numba.core.ir.Assign object at 0x7f36f6172690>,
                    <numba.core.ir.Assign object at 0x7f36f6172f90>],
             'origsize': [<numba.core.ir.Assign object at 0x7f36f633a250>],
             's': [<numba.core.ir.Assign object at 0x7f36f63810d0>],
             'shape': [<numba.core.ir.Assign object at 0x7f36f631aad0>]})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.ssa DEBUG]  SSA violators {'ok', 'known_size', 'num_neg_value', 'inferred'}
[numba.core.ssa DEBUG]  SSA violators {'known_size', 'inferred', 'ok', 'num_neg_value'}
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  SSA violators {'known_size', 'inferred', 'num_neg_value', 'ok'}
[numba.core.ssa DEBUG]  SSA violators {'inferred', 'ok', 'num_neg_value', 'known_size'}
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cd61b10>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fbc7cd61d50>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fbc7cf082d0>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fbc7cd669d0>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fbc7cd66e10>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fbc7cd66f90>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fbc7cd68210>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fbc7cd68710>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fbc7cd68950>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fbc7cf084d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fbc7cd68c50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fbc7cf08150>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fbc7cf08d90>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fbc7cf08b50>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fbc7cf088d0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fbc7cef7910>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fbc7cef7b90>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fbc7cef7c50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fbc7cdce590>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fbc7cdce510>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fbc7cdcec50>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fbc7cd5d1d0>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cd5d650>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fbc7cd5d890>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cd5dbd0>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fbc7cd5de10>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fbc7cd5df50>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fbc7cd611d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fbc7cd61550>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fbc7cd61790>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fbc7cd661d0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fbc7cd66ad0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fbc7cd680d0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fbc7cd68810>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fbc7cd68b10>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fbc7cdce710>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fbc7cdceb50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fbc7cd5d550>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fbc7cd61090>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fbc7cd61450>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fbc7cd61a10>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fbc7cf08e10>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fbc7cef7e50>],
             'ax': [<numba.core.ir.Assign object at 0x7fbc7cef7a90>],
             'bool102': [<numba.core.ir.Assign object at 0x7fbc7cd61c50>],
             'bool140': [<numba.core.ir.Assign object at 0x7fbc7cd66d10>],
             'bool34': [<numba.core.ir.Assign object at 0x7fbc7cdce7d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7fbc7cd5d790>],
             'bool76': [<numba.core.ir.Assign object at 0x7fbc7cd5dd10>],
             'bool94': [<numba.core.ir.Assign object at 0x7fbc7cd61690>],
             'inferred': [<numba.core.ir.Assign object at 0x7fbc7cd61f10>,
                          <numba.core.ir.Assign object at 0x7fbc7cd66690>],
             'known_size': [<numba.core.ir.Assign object at 0x7fbc7cf77610>,
                            <numba.core.ir.Assign object at 0x7fbc7cdcee50>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fbc7cdcee90>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fbc7ce9b0d0>,
                               <numba.core.ir.Assign object at 0x7fbc7cef7ed0>],
             'ok': [<numba.core.ir.Assign object at 0x7fbc7cd662d0>,
                    <numba.core.ir.Assign object at 0x7fbc7cd66bd0>],
             'origsize': [<numba.core.ir.Assign object at 0x7fbc7ce9b310>],
             's': [<numba.core.ir.Assign object at 0x7fbc7cef7f90>],
             'shape': [<numba.core.ir.Assign object at 0x7fbc7ce9b190>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fc13abc0cd0>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fc13abc0f10>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fc13ad6cbd0>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fc13abc3b90>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fc13abc3fd0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fc13abc7190>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fc13abc73d0>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fc13abc7890>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fc13abc7ad0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fc13ad6c390>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fc13abc7dd0>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fc13ad6c150>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fc13ad6cb10>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fc13ad6ce50>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fc13ad6cf90>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fc13addfb90>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fc13addfdd0>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fc13addfa10>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fc13ac2d790>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fc13ac2d710>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fc13ac2de50>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fc13abbc3d0>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fc13abbc850>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fc13abbca90>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fc13abbcdd0>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fc13abc0050>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fc13abc0150>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fc13abc0390>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fc13abc0710>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fc13abc0950>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fc13abc3390>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fc13abc3c90>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fc13abc7290>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fc13abc7990>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fc13abc7c90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fc13ac2d8d0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fc13ac2dd50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fc13abbc750>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fc13abc0250>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fc13abc0610>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fc13abc0bd0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fc13ad6c290>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fc13ad6cd50>],
             'ax': [<numba.core.ir.Assign object at 0x7fc13addf890>],
             'bool102': [<numba.core.ir.Assign object at 0x7fc13abc0e10>],
             'bool140': [<numba.core.ir.Assign object at 0x7fc13abc3ed0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fc13ac2d7d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7fc13abbc990>],
             'bool76': [<numba.core.ir.Assign object at 0x7fc13abbcf10>],
             'bool94': [<numba.core.ir.Assign object at 0x7fc13abc0850>],
             'inferred': [<numba.core.ir.Assign object at 0x7fc13abc3110>,
                          <numba.core.ir.Assign object at 0x7fc13abc3850>],
             'known_size': [<numba.core.ir.Assign object at 0x7fc13acf9750>,
                            <numba.core.ir.Assign object at 0x7fc13abbc090>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fc13abbc0d0>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fc13acf9c50>,
                               <numba.core.ir.Assign object at 0x7fc13addf3d0>],
             'ok': [<numba.core.ir.Assign object at 0x7fc13abc3490>,
                    <numba.core.ir.Assign object at 0x7fc13abc3d90>],
             'origsize': [<numba.core.ir.Assign object at 0x7fc13acf9a50>],
             's': [<numba.core.ir.Assign object at 0x7fc13addf710>],
             'shape': [<numba.core.ir.Assign object at 0x7fc13acf9810>]})
[numba.core.ssa DEBUG]  SSA violators {'inferred', 'ok', 'known_size', 'num_neg_value'}
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  SSA violators {'known_size', 'num_neg_value', 'ok', 'inferred'}
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f513affad10>],
             118: [<numba.core.ir.Assign object at 0x7f513affa510>]})
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f9fe2a6e690>],
             50: [<numba.core.ir.Assign object at 0x7f9fe28c5a10>]})
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f4cd3fc1350>],
             50: [<numba.core.ir.Assign object at 0x7f4cd3ea1c90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f36f616bd90>],
             118: [<numba.core.ir.Assign object at 0x7f36f617bbd0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fc13abc7f50>],
             118: [<numba.core.ir.Assign object at 0x7fc13abd6350>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fbc7cdcedd0>],
             50: [<numba.core.ir.Assign object at 0x7fbc7cd68e90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513b18f650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7890>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13ad6cd10>
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6e10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b7d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f513afe0050>],
             50: [<numba.core.ir.Assign object at 0x7f513affa4d0>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f36f62a7890>],
             118: [<numba.core.ir.Assign object at 0x7f36f617b090>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fc13ad6cd10>],
             118: [<numba.core.ir.Assign object at 0x7fc13abd6910>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f9fe28c5a90>],
             118: [<numba.core.ir.Assign object at 0x7f9fe28c5910>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f4cd3ea1710>],
             118: [<numba.core.ir.Assign object at 0x7f4cd3ea1e50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fbc7cd68fd0>],
             36: [<numba.core.ir.Assign object at 0x7fbc7cd68ed0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f617b0d0>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abbcb50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28ab390>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513affad50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3ea1210>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f36f62a7e90>],
             36: [<numba.core.ir.Assign object at 0x7f36f61769d0>]})
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abd6790>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fc13abd6e10>],
             50: [<numba.core.ir.Assign object at 0x7fc13acf9490>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513b11dd50>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f513b18f650>],
             36: [<numba.core.ir.Assign object at 0x7f513affaa90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f9fe28c5110>],
             118: [<numba.core.ir.Assign object at 0x7f9fe28ab390>]})
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f4cd3fc75d0>],
             36: [<numba.core.ir.Assign object at 0x7f4cd3ea1d90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f5582663d90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fbc7cd774d0>],
             118: [<numba.core.ir.Assign object at 0x7fbc7cd779d0>]})
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f616b390>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f55824ccd50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f55824ccf90>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f5582678a90>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f55824cfc10>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f55824d3090>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f55824d3210>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f55824d3450>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f55824d3950>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f55824d3b90>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f55826782d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f55824d3e50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f5582678090>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f5582678990>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f5582678c90>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f5582678e50>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f55826eb890>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f55826eb850>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f55826ebe10>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f5582539810>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f5582539790>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f5582539f10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f55824c8490>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f55824c8910>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f55824c8b50>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f55824c8e90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f55824cc110>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f55824cc210>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f55824cc450>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f55824cc790>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f55824cc9d0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f55824cf410>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f55824cfd10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f55824d3310>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f55824d3a50>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f55824d3d50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f5582539bd0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f5582539dd0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f55824c8810>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f55824cc310>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f55824cc690>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f55824ccc50>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f55826781d0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f5582678c10>],
             'ax': [<numba.core.ir.Assign object at 0x7f55826eb2d0>],
             'bool102': [<numba.core.ir.Assign object at 0x7f55824cce90>],
             'bool140': [<numba.core.ir.Assign object at 0x7f55824cff50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f5582539a50>],
             'bool68': [<numba.core.ir.Assign object at 0x7f55824c8a50>],
             'bool76': [<numba.core.ir.Assign object at 0x7f55824c8fd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f55824cc8d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7f55824cf190>,
                          <numba.core.ir.Assign object at 0x7f55824cf8d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7f55826e1dd0>,
                            <numba.core.ir.Assign object at 0x7f55824c8150>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f55824c8190>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f55826063d0>,
                               <numba.core.ir.Assign object at 0x7f55826eba10>],
             'ok': [<numba.core.ir.Assign object at 0x7f55824cf510>,
                    <numba.core.ir.Assign object at 0x7f55824cfe10>],
             'origsize': [<numba.core.ir.Assign object at 0x7f5582606150>],
             's': [<numba.core.ir.Assign object at 0x7f55826ebc10>],
             'shape': [<numba.core.ir.Assign object at 0x7f55826065d0>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  SSA violators {'num_neg_value', 'known_size', 'ok', 'inferred'}
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe2a2f910>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd6b10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3e8fe90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7cf814d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f36f62ad4d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f36f62ad510>],
             50: [<numba.core.ir.Assign object at 0x7f36f617b0d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9fe28aba10>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f9fe28c5750>],
             36: [<numba.core.ir.Assign object at 0x7f9fe28c5f10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f55826069d0>],
             36: [<numba.core.ir.Assign object at 0x7f5582678f10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f513afe0390>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc13abc7e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f4cd3e84c90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f4cd3ea1fd0>],
             118: [<numba.core.ir.Assign object at 0x7f4cd3ea65d0>]})
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f513affa910>],
             118: [<numba.core.ir.Assign object at 0x7f513b004250>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fc13abbcb50>],
             36: [<numba.core.ir.Assign object at 0x7fc13acf9890>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fbc7cd77f90>
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fbc7cf814d0>],
             118: [<numba.core.ir.Assign object at 0x7fbc7cd80210>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9fe28b6fd0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f36f62a7090>
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f4cd3fc1e90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f513afebe50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8c10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc13abd65d0>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fbc7ce9b9d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f5582663f10>],
             50: [<numba.core.ir.Assign object at 0x7f55824e2050>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824e2bd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f55824e2f10>],
             118: [<numba.core.ir.Assign object at 0x7f55824e2890>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f5582673690>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439e54390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fb439e4f9d0>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fb439e4fc10>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fb439fd4390>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fb439e54890>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fb439e54cd0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fb439e54e50>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fb439e560d0>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fb439e565d0>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fb439e56810>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fb439ff6e10>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fb439e56b10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fb439ff6d50>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fb439ff6390>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fb439ff60d0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fb439ff6810>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fb439fe5e50>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fb439fe5d10>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fb439fe5f90>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fb439ebc6d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fb439ebc750>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fb439ebcb50>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fb439e4b0d0>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fb439e4b550>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fb439e4b790>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fb439e4bad0>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fb439e4bd10>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fb439e4be10>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fb439e4f090>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fb439e4f410>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fb439e4f650>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fb439e54090>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fb439e54990>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fb439e54f50>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fb439e566d0>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fb439e569d0>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fb439ebc7d0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fb439ebca10>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fb439e4b450>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fb439e4bf10>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fb439e4f310>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fb439e4f8d0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fb439fc2f10>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fb439ff6790>],
             'ax': [<numba.core.ir.Assign object at 0x7fb439fe5fd0>],
             'bool102': [<numba.core.ir.Assign object at 0x7fb439e4fb10>],
             'bool140': [<numba.core.ir.Assign object at 0x7fb439e54bd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fb439ebc590>],
             'bool68': [<numba.core.ir.Assign object at 0x7fb439e4b690>],
             'bool76': [<numba.core.ir.Assign object at 0x7fb439e4bc10>],
             'bool94': [<numba.core.ir.Assign object at 0x7fb439e4f550>],
             'inferred': [<numba.core.ir.Assign object at 0x7fb439e4fdd0>,
                          <numba.core.ir.Assign object at 0x7fb439e54550>],
             'known_size': [<numba.core.ir.Assign object at 0x7fb439fd45d0>,
                            <numba.core.ir.Assign object at 0x7fb439ebcd50>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fb439ebcd90>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fb43a064910>,
                               <numba.core.ir.Assign object at 0x7fb439fe5c90>],
             'ok': [<numba.core.ir.Assign object at 0x7fb439e54190>,
                    <numba.core.ir.Assign object at 0x7fb439e54a90>],
             'origsize': [<numba.core.ir.Assign object at 0x7fb439f892d0>],
             's': [<numba.core.ir.Assign object at 0x7fb439fe5c50>],
             'shape': [<numba.core.ir.Assign object at 0x7fb439f89910>]})
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  SSA violators {'num_neg_value', 'inferred', 'known_size', 'ok'}
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f55824e27d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f5582606d10>],
             118: [<numba.core.ir.Assign object at 0x7f55824e5190>]})
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fb439f89190>],
             36: [<numba.core.ir.Assign object at 0x7fb439e56e50>]})
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f55824c8250>
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439ff61d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fb439e65350>],
             118: [<numba.core.ir.Assign object at 0x7fb439e65d90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439e65b50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fb439e65790>],
             50: [<numba.core.ir.Assign object at 0x7fb439f896d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65f90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fb439fd4090>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fb439e65e90>],
             118: [<numba.core.ir.Assign object at 0x7fb439e6f110>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fb439e65bd0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513aef8e10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe27c2dd0>
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f513aefe0d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f513aefe210>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f513aef8f50>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f513aef8d50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f9fe27c8110>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9fe27c8250>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f9fe27c2fd0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f9fe27c2e10>]})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f607dd10>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f36f60883d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f36f6088490>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f36f6088290>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f36f6083f90>]})
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd3d9b890>
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f4cd3da03d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f4cd3da0510>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f4cd3da0290>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f4cd3da00d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13aacfc10>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fc13aada210>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc13aada350>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fc13aada110>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fc13aad4ed0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cd1f190>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fbc7cc7a150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fbc7cc7a250>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fbc7cc74fd0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fbc7cc74dd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513ae57e90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2721390>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f513ae5d110>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f513ae5d210>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f513ae57fd0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f513ae57dd0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f9fe2727150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9fe2727290>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f9fe2727050>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f9fe2721e10>]})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f605ad10>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f36f5fe83d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f36f5fe8490>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f36f5fe8290>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f36f5fe2f90>]})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd3cfbb10>
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f4cd3cff450>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f4cd3cff590>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f4cd3cff310>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f4cd3cff190>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13aaabc90>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fc13aa392d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc13aa39410>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fc13aa391d0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fc13aa33f90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cc74690>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fbc7cbda150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fbc7cbda290>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fbc7cbd4fd0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fbc7cbd4dd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f55823df410>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f55823e52d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f55823e53d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f55823e5190>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f55823dff50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f513ae3ef90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9fe2705d10>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f513ae462d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f513ae46510>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f513ae46610>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f513ae46710>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f513ae46110>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f513ae3ee90>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f513ae3e210>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f513ae3ec90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f513ae3ed50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f9fe27103d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f9fe2710610>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f9fe2710710>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f9fe2710850>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f9fe2710210>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f9fe2708fd0>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f9fe2708d10>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f9fe2708d90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f9fe2708e50>]})
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f36f5fd2fd0>
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f4cd3cddc50>
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f36f5fd2550>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f36f5fd2790>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f36f5fd28d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f36f5fd2990>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f36f5fd2390>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f36f5fd2150>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f36f5fca350>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f36f5fcaed0>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f36f5fcaf90>]})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f4cd3cea650>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f4cd3cea890>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f4cd3cea9d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f4cd3ceab10>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f4cd3cea490>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f4cd3cea290>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f4cd3ce2510>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f4cd3cea090>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f4cd3cea150>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc13aa179d0>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fc13aa22490>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fc13aa226d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fc13aa227d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fc13aa22910>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fc13aa222d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fc13aa22090>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fc13aa1ad10>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fc13aa1ae50>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fc13aa1af10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fbc7cbc3f50>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fbc7cbc3350>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fbc7cbc3590>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fbc7cbc36d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fbc7cbc3810>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fbc7cbc3190>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fbc7cbbbf10>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fbc7cbbb190>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fbc7cbbbd10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fbc7cbbbdd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f558233f490>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f5582345350>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f5582345450>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f5582345210>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f558233ffd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f55823266d0>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f558232e550>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f558232e790>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f558232e8d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f558232e9d0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f558232e390>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f558232e150>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f5582326dd0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f5582326f10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f5582326fd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439d5d990>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fb439d63f10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fb439d68090>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb439d63dd0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fb439d63c10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439d3c9d0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fb439cc2f10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fb439cc9090>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fb439cc2e10>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fb439cc2c50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fb439ca68d0>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fb439cb21d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fb439cb2410>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fb439cb2510>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fb439cb2650>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fb439ca9fd0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fb439ca9d90>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fb439ca9b50>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fb439ca9bd0>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fb439ca9c90>]})
[numba.core.ssa DEBUG]  SSA violators set()
Finished initialization.
[torcpy.runtime WARNING]  MPI.Query_thread returns 3
[torcpy.runtime WARNING]  Info: MPI.Query_thread returns MPI.THREAD_MULTIPLE
[32mTORCPY: main starts[0m
Initialization Runtime:  166.11872816085815
[32mTORCPY: node[0]: created=233607, executed=29201[0m
Finished initialization.
Finished initialization.
[32mTORCPY: node[5]: created=0, executed=29201[0m
[32mTORCPY: node[4]: created=0, executed=29201[0m
Finished initialization.
[32mTORCPY: node[1]: created=0, executed=29201[0m
Finished initialization.
[32mTORCPY: node[7]: created=0, executed=29200[0m
Finished initialization.
Finished initialization.
[32mTORCPY: node[3]: created=0, executed=29201[0m
Finished initialization.
[32mTORCPY: node[6]: created=0, executed=29201[0m
[32mTORCPY: node[2]: created=0, executed=29201[0m
Complete Runtime:  6016.422743320465
200000,6016.422743320465
Complete Runtime:  6016.4189994335175
200000,6016.4189994335175
Complete Runtime:  6016.357861757278
200000,6016.357861757278
Complete Runtime:  6016.361048936844
200000,6016.361048936844
Complete Runtime:  6016.265531301498
200000,6016.265531301498
Complete Runtime:  6016.34316110611
200000,6016.34316110611
Complete Runtime:  6015.123645067215
200000,6015.123645067215
Complete Runtime:  6015.841089487076
200000,6015.841089487076
