[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: NumExpr detected 36 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: NumExpr detected 36 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: NumExpr detected 36 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: NumExpr detected 36 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: NumExpr detected 36 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: NumExpr detected 36 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: NumExpr detected 36 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: NumExpr detected 36 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a5cc450>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c5627350>
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159586450>
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157c7e790>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f32586d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422ca84d0>
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932b6f690>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f6155892410>
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f0e3a67a450>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f0e3a67abd0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f0e3a60f990>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f0e3a60fb50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f0e3a60fc10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f0e3a60fe10>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f0e3a62e110>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f0e3a62e550>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f0e3a62e910>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f0e3a62ea10>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f0e3a62ead0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f0e3a62ef10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f0e3a6846d0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f0e3a631050>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f0e3a631150>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f0e3a631510>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f0e3a67af90>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f0e3a60ff50>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f0e3a62e390>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f0e3a62e7d0>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f0e3a62ee10>],
             'dx': [<numba.core.ir.Assign object at 0x7f0e3a684d50>],
             'field': [<numba.core.ir.Assign object at 0x7f0e3a631250>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f0e3a67a950>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f0e3a62e210>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f0e3a684ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f0e3a60f910>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f19c56d14d0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f19c56d1c50>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f19c5666990>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f19c5666b50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f19c5666c10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f19c5666e10>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f19c5685110>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f19c5685550>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f19c5685910>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f19c5685a10>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f19c5685b10>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f19c5685f50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f19c56db6d0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f19c5688090>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f19c5688190>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f19c5688550>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f19c56d1ed0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f19c5666f50>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f19c5685390>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f19c56857d0>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f19c5685e50>],
             'dx': [<numba.core.ir.Assign object at 0x7f19c56dbd50>],
             'field': [<numba.core.ir.Assign object at 0x7f19c5688290>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f19c56d19d0>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f19c5685210>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f19c56dbed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f19c5666950>]})
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fe159636d90>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fe159636b10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fe1595cbbd0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fe1595cbd90>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fe1595cbe50>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fe1595e9090>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fe1595e9350>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fe1595e9790>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fe1595e9b50>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fe1595e9c50>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fe1595e9d50>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fe1595ed1d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fe159636fd0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fe1595ed2d0>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fe1595ed3d0>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fe1595ed790>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fe1596367d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fe1595e91d0>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fe1595e95d0>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fe1595e9a10>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fe1595ed0d0>],
             'dx': [<numba.core.ir.Assign object at 0x7fe159640d10>],
             'field': [<numba.core.ir.Assign object at 0x7fe1595ed4d0>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fe1595cb9d0>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fe1595e9450>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fe159640e90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fe1595cba50>]})
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f99f3307dd0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f99f3307b50>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f99f329cd50>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f99f329cf10>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f99f329cfd0>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f99f32bb210>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f99f32bb490>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f99f32bb8d0>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f99f32bbc90>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f99f32bbd90>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f99f32bbe90>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f99f32bf310>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f99f3297090>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f99f32bf410>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f99f32bf510>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f99f32bf8d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f99f3307890>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f99f32bb310>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f99f32bb710>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f99f32bbb50>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f99f32bf210>],
             'dx': [<numba.core.ir.Assign object at 0x7f99f3297d50>],
             'field': [<numba.core.ir.Assign object at 0x7f99f32bf610>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f99f329cbd0>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f99f32bb590>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f99f3297ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f99f329ccd0>]})
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f9157d2ee50>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f9157d2ec10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f9157cc3ed0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f9157ce10d0>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f9157ce1190>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f9157ce1390>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f9157ce1650>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f9157ce1a90>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f9157ce1e50>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f9157ce1f50>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f9157ce5090>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f9157ce54d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9157cbd110>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f9157ce55d0>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f9157ce56d0>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f9157ce5a90>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f9157d2e9d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f9157ce14d0>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f9157ce18d0>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f9157ce1d10>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f9157ce53d0>],
             'dx': [<numba.core.ir.Assign object at 0x7f9157cbdd50>],
             'field': [<numba.core.ir.Assign object at 0x7f9157ce57d0>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f9157cc3690>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f9157ce1750>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f9157cbded0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f9157cc3e10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f9422d57d90>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f9422d57b10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f9422cecc50>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f9422cecdd0>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f9422cece90>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f9422d0b0d0>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f9422d0b390>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f9422d0b7d0>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f9422d0bb90>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f9422d0bc90>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f9422d0bd90>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f9422d0f210>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9422d57fd0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f9422d0f310>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f9422d0f410>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f9422d0f7d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f9422d577d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f9422d0b210>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f9422d0b610>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f9422d0ba50>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f9422d0f110>],
             'dx': [<numba.core.ir.Assign object at 0x7f9422d62d10>],
             'field': [<numba.core.ir.Assign object at 0x7f9422d0f510>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f9422cecad0>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f9422d0b490>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f9422d62e90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f9422cec910>]})
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fc932c1ee50>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fc932c1ebd0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fc932bb3cd0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fc932bb3e90>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fc932bb3f50>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fc932bd2190>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fc932bd2450>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fc932bd2890>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fc932bd2c50>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fc932bd2d50>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fc932bd2e50>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fc932bd62d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc932c29250>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fc932bd63d0>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fc932bd64d0>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fc932bd6850>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fc932c1e7d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fc932bd22d0>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fc932bd26d0>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fc932bd2b10>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fc932bd61d0>],
             'dx': [<numba.core.ir.Assign object at 0x7fc932c29d50>],
             'field': [<numba.core.ir.Assign object at 0x7fc932bd65d0>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fc932c1e650>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fc932bd2550>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fc932c29ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fc932bb3b90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f615593fd90>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f615593fb10>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f61558d5a90>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f61558d5c50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f61558d5d10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f61558d5f10>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f61558f31d0>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f61558f3610>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f61558f39d0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f61558f3ad0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f61558f3bd0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f61558f7050>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f615594a110>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f61558f7150>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f61558f7250>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f61558f7610>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f615593f510>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f61558f3090>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f61558f3450>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f61558f3890>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f61558f3f10>],
             'dx': [<numba.core.ir.Assign object at 0x7f615594ad10>],
             'field': [<numba.core.ir.Assign object at 0x7f61558f7350>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f615593f890>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f61558f32d0>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f615594ae90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f61558d59d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f31ede90>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe15951cfd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932bb38d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f99f31f0090>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f99f31f01d0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f99f31edd10>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f99f31edd90>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422c3ee50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157c5e090>
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c55b1f90>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9422c3ee10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9422c3ef90>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f9422c3ead0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f9422c3eb50>]})
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fe15951cf90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fe159522150>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fe15951cc50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fe15951ccd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a62e150>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc932b05f10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc932b0b0d0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fc932b05c10>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fc932b05c90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9157c15e50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9157c15fd0>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f9157c15b50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f9157c15bd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f19c55b8c50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f19c55b8d90>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f19c55b8950>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f19c55b89d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f0e3a560dd0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f0e3a560f10>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f0e3a560a90>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f0e3a560b10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61558f3110>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f6155828c10>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f6155828d50>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f61558288d0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f6155828950>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1594ee890>
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3278e50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bc8810>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422bf1b10>
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c558de90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932ab8750>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fe1594f2a10>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fe1594f2d90>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fe1594f6150>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fe1594ddd90>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fe1594e36d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fe1594e3910>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fe1594cf210>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fe1594e3c50>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fe1594ee050>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fe1594ee290>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fe1594dda90>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fe1594ee590>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fe1594ee7d0>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fe1594eeb50>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fe1594eec50>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fe1594eed50>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fe1594dd950>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fe1594f2110>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fe1594f2350>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fe1594ddc50>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fe1594f28d0>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fe1594f2c90>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fe1594cf0d0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fe1594ee490>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fe1594eea50>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fe1594eefd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fe1594e3810>],
             'bool58': [<numba.core.ir.Assign object at 0x7fe1594c8f10>],
             'bool66': [<numba.core.ir.Assign object at 0x7fe1594ee190>],
             'bool74': [<numba.core.ir.Assign object at 0x7fe1594ee6d0>],
             'bool8': [<numba.core.ir.Assign object at 0x7fe1594dd650>],
             'bool94': [<numba.core.ir.Assign object at 0x7fe1594f2250>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fe1594cf710>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fe1594e3310>,
                            <numba.core.ir.Assign object at 0x7fe1594f2a90>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fe1594dd7d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fe1594dd790>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fe1594e3bd0>],
             'src_index': [<numba.core.ir.Assign object at 0x7fe1594ddf50>,
                           <numba.core.ir.Assign object at 0x7fe1594cf690>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fe1594dd350>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fe1594dd2d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f99f31c4990>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f99f31c4d10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f99f31c8090>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f99f31b0d10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f99f31ba650>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f99f31ba890>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f99f31a11d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f99f31babd0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f99f31baf90>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f99f31c0210>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f99f31b07d0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f99f31c0510>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f99f31c0750>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f99f31c0ad0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f99f31c0bd0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f99f31c0cd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f99f31b03d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f99f31c4090>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f99f31c42d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f99f31b0bd0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f99f31c4850>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f99f31c4c10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f99f31a1090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f99f31c0410>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f99f31c09d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f99f31c0f50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f99f31ba790>],
             'bool58': [<numba.core.ir.Assign object at 0x7f99f319ac50>],
             'bool66': [<numba.core.ir.Assign object at 0x7f99f31c0110>],
             'bool74': [<numba.core.ir.Assign object at 0x7f99f31c0650>],
             'bool8': [<numba.core.ir.Assign object at 0x7f99f31b0750>],
             'bool94': [<numba.core.ir.Assign object at 0x7f99f31c41d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f99f31a1510>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f99f31ba290>,
                            <numba.core.ir.Assign object at 0x7f99f31c4a10>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f99f31b0650>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f99f31b0490>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f99f31bab50>],
             'src_index': [<numba.core.ir.Assign object at 0x7f99f31b0ed0>,
                           <numba.core.ir.Assign object at 0x7f99f31a1490>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f99f31b02d0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f99f31b0610>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f9157beb8d0>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f9157bebc50>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f9157bebfd0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f9157bd7c50>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f9157be2590>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f9157be27d0>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f9157bc81d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f9157be2b10>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f9157be2ed0>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f9157be7150>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f9157bd79d0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f9157be7450>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f9157be7690>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f9157be7a10>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f9157be7b10>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f9157be7c10>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f9157bd7310>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f9157be7f90>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f9157beb210>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f9157bd7b10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f9157beb790>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f9157bebb50>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f9157bc8090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f9157be7350>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f9157be7910>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f9157be7e90>],
             'bool34': [<numba.core.ir.Assign object at 0x7f9157be26d0>],
             'bool58': [<numba.core.ir.Assign object at 0x7f9157bc1c90>],
             'bool66': [<numba.core.ir.Assign object at 0x7f9157be7050>],
             'bool74': [<numba.core.ir.Assign object at 0x7f9157be7590>],
             'bool8': [<numba.core.ir.Assign object at 0x7f9157bd7690>],
             'bool94': [<numba.core.ir.Assign object at 0x7f9157beb110>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f9157bc8550>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f9157be21d0>,
                            <numba.core.ir.Assign object at 0x7f9157beb950>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f9157bd7590>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f9157bd73d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f9157be2a90>],
             'src_index': [<numba.core.ir.Assign object at 0x7f9157bd7e10>,
                           <numba.core.ir.Assign object at 0x7f9157bc84d0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f9157bd7210>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f9157bd7550>]})
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f9422c14790>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f9422c14b10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f9422c14e90>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f9422c04b10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f9422c0c450>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f9422c0c690>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f9422c4cf10>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f9422c0c9d0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f9422c0cd90>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f9422c0cfd0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f9422c04650>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f9422c10310>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f9422c10550>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f9422c108d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f9422c109d0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f9422c10ad0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f9422c04890>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f9422c10e50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f9422c140d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f9422c049d0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f9422c14650>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f9422c14a10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f9422bf1090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f9422c10210>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f9422c107d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f9422c10d50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f9422c0c590>],
             'bool58': [<numba.core.ir.Assign object at 0x7f9422beabd0>],
             'bool66': [<numba.core.ir.Assign object at 0x7f9422c0ced0>],
             'bool74': [<numba.core.ir.Assign object at 0x7f9422c10450>],
             'bool8': [<numba.core.ir.Assign object at 0x7f9422c04790>],
             'bool94': [<numba.core.ir.Assign object at 0x7f9422c10f90>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f9422bf1490>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f9422c0c090>,
                            <numba.core.ir.Assign object at 0x7f9422c14810>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f9422c04250>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f9422c04310>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f9422c0c950>],
             'src_index': [<numba.core.ir.Assign object at 0x7f9422c04cd0>,
                           <numba.core.ir.Assign object at 0x7f9422bf1410>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f9422c040d0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f9422c04190>]})
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fc932adb8d0>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fc932adbc50>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fc932adbfd0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fc932ac7c50>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fc932ad1590>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fc932ad17d0>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fc932ab81d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fc932ad1b10>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fc932ad1ed0>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fc932ad7150>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fc932ac7990>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fc932ad7450>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fc932ad7690>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fc932ad7a10>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fc932ad7b10>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fc932ad7c10>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fc932ac7850>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fc932ad7f90>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fc932adb210>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fc932ac7b10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fc932adb790>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fc932adbb50>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fc932ab8090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fc932ad7350>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fc932ad7910>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fc932ad7e90>],
             'bool34': [<numba.core.ir.Assign object at 0x7fc932ad16d0>],
             'bool58': [<numba.core.ir.Assign object at 0x7fc932ab1d10>],
             'bool66': [<numba.core.ir.Assign object at 0x7fc932ad7050>],
             'bool74': [<numba.core.ir.Assign object at 0x7fc932ad7590>],
             'bool8': [<numba.core.ir.Assign object at 0x7fc932ac7550>],
             'bool94': [<numba.core.ir.Assign object at 0x7fc932adb110>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fc932ab85d0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fc932ad11d0>,
                            <numba.core.ir.Assign object at 0x7fc932adb950>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fc932ac76d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fc932ac7690>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fc932ad1a90>],
             'src_index': [<numba.core.ir.Assign object at 0x7fc932ac7e10>,
                           <numba.core.ir.Assign object at 0x7fc932ab8550>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fc932ac7250>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fc932ac71d0>]})
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f0e3a536750>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f0e3a536ad0>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f0e3a536e50>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f0e3a525b90>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a52e410>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f0e3a52e650>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f0e3a5131d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f0e3a52e990>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a52ed50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f0e3a52ef90>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a525710>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a5322d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f0e3a532510>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f0e3a5328d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f0e3a5329d0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f0e3a532ad0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f0e3a525950>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a532e50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f0e3a5360d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f0e3a525a90>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f0e3a536650>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f0e3a5369d0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f0e3a513090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f0e3a5321d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f0e3a532790>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f0e3a532d50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f0e3a52e550>],
             'bool58': [<numba.core.ir.Assign object at 0x7f0e3a50cc10>],
             'bool66': [<numba.core.ir.Assign object at 0x7f0e3a52ee90>],
             'bool74': [<numba.core.ir.Assign object at 0x7f0e3a532410>],
             'bool8': [<numba.core.ir.Assign object at 0x7f0e3a525850>],
             'bool94': [<numba.core.ir.Assign object at 0x7f0e3a532f90>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f0e3a5134d0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f0e3a52e0d0>,
                            <numba.core.ir.Assign object at 0x7f0e3a5367d0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f0e3a525310>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f0e3a5253d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f0e3a52e910>],
             'src_index': [<numba.core.ir.Assign object at 0x7f0e3a525d50>,
                           <numba.core.ir.Assign object at 0x7f0e3a513450>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f0e3a525190>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f0e3a525250>]})
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f19c558d6d0>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f19c558da50>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f19c558ddd0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f19c557da50>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f19c5585390>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f19c55855d0>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f19c55c2910>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f19c5585910>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f19c5585cd0>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f19c5585f10>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f19c557d590>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f19c5589250>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f19c5589490>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f19c5589810>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f19c5589910>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f19c5589a10>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f19c557d7d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f19c5589d90>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f19c5589fd0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f19c557d950>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f19c558d590>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f19c558d950>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f19c55c5ed0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f19c5589150>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f19c5589710>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f19c5589c90>],
             'bool34': [<numba.core.ir.Assign object at 0x7f19c55854d0>],
             'bool58': [<numba.core.ir.Assign object at 0x7f19c5564f90>],
             'bool66': [<numba.core.ir.Assign object at 0x7f19c5585e10>],
             'bool74': [<numba.core.ir.Assign object at 0x7f19c5589390>],
             'bool8': [<numba.core.ir.Assign object at 0x7f19c557d6d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f19c5589ed0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f19c556e2d0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f19c557df90>,
                            <numba.core.ir.Assign object at 0x7f19c558d750>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f19c557d1d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f19c557d290>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f19c5585890>],
             'src_index': [<numba.core.ir.Assign object at 0x7f19c557dc10>,
                           <numba.core.ir.Assign object at 0x7f19c556e250>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f19c557d050>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f19c557d110>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fe1594cf850>],
             104: [<numba.core.ir.Assign object at 0x7fe1594f6a50>]})
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f99f31a17d0>],
             104: [<numba.core.ir.Assign object at 0x7f99f31c87d0>]})
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f9157bc86d0>],
             104: [<numba.core.ir.Assign object at 0x7f9157bef950>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f9422bf1a90>],
             104: [<numba.core.ir.Assign object at 0x7f9422c14cd0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f0e3a513910>],
             104: [<numba.core.ir.Assign object at 0x7f0e3a56ac50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fc932ab88d0>],
             104: [<numba.core.ir.Assign object at 0x7fc932adfb10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f19c556eed0>],
             104: [<numba.core.ir.Assign object at 0x7f19c558df90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932ab1f10>
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c14910>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f9422beac50>],
             104: [<numba.core.ir.Assign object at 0x7f9422c09090>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe1594f2d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f31bae50>
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157c1a890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f99f319aa50>],
             104: [<numba.core.ir.Assign object at 0x7f99f31c81d0>]})
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fe1594c8d90>],
             104: [<numba.core.ir.Assign object at 0x7fe1594f6550>]})
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f9157bc1e90>],
             104: [<numba.core.ir.Assign object at 0x7f9157bef490>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932b0bcd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a50ca50>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fc932ab8950>],
             104: [<numba.core.ir.Assign object at 0x7fc932adf210>]})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f0e3a513a10>],
             104: [<numba.core.ir.Assign object at 0x7f0e3a527250>]})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c558d8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f19c5564e10>],
             104: [<numba.core.ir.Assign object at 0x7f19c55821d0>]})
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61557d7bd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f61557fc790>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f61557fcb10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f61557fce50>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f61557ecb10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f61557f4410>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f61557f4650>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f6155834510>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f61557f4990>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f61557f4d50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f61557f4f90>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f61557ec650>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f61557f82d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f61557f8510>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f61557f88d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f61557f89d0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f61557f8ad0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f61557ec890>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f61557f8e50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f61557fc0d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f61557eca10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f61557fc650>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f61557fc9d0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f61557d7090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f61557f81d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f61557f8790>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f61557f8d50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f61557f4550>],
             'bool58': [<numba.core.ir.Assign object at 0x7f61557d2ad0>],
             'bool66': [<numba.core.ir.Assign object at 0x7f61557f4e90>],
             'bool74': [<numba.core.ir.Assign object at 0x7f61557f8410>],
             'bool8': [<numba.core.ir.Assign object at 0x7f61557ec790>],
             'bool94': [<numba.core.ir.Assign object at 0x7f61557f8f90>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f61557d7390>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f61557f4090>,
                            <numba.core.ir.Assign object at 0x7f61557fc7d0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f61557ec290>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f61557ec350>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f61557f4910>],
             'src_index': [<numba.core.ir.Assign object at 0x7f61557eccd0>,
                           <numba.core.ir.Assign object at 0x7f61557d7310>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f61557ec110>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f61557ec1d0>]})
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f61557d2c50>],
             104: [<numba.core.ir.Assign object at 0x7f61557d7590>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bebf50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f31a1a50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422c048d0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c556e650>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe1594cf9d0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a5368d0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc93f5bb690>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f61557d7e90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f61557d2910>],
             104: [<numba.core.ir.Assign object at 0x7f61557f1a50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f61557fcf50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1593c6a10>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a40d890>
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9329b09d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f3099990>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422ae9950>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fe159460150>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fe159460250>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fe15945add0>],
             'align': [<numba.core.ir.Assign object at 0x7fe15945ac10>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fe15945aa50>],
             'size': [<numba.core.ir.Assign object at 0x7fe15945aad0>]})
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157ac27d0>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f0e3a4a4090>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0e3a4a4150>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f0e3a49ed10>],
             'align': [<numba.core.ir.Assign object at 0x7f0e3a49ead0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f0e3a49e990>],
             'size': [<numba.core.ir.Assign object at 0x7f0e3a49ea10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fc932a490d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fc932a491d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fc932a43d50>],
             'align': [<numba.core.ir.Assign object at 0x7fc932a43b90>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fc932a43a50>],
             'size': [<numba.core.ir.Assign object at 0x7fc932a43ad0>]})
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f99f3132110>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f99f3132210>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f99f312bdd0>],
             'align': [<numba.core.ir.Assign object at 0x7f99f312bbd0>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f99f312ba90>],
             'size': [<numba.core.ir.Assign object at 0x7f99f312bb10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f9422b820d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f9422b821d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f9422b7cd50>],
             'align': [<numba.core.ir.Assign object at 0x7f9422b7cb50>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f9422b7c950>],
             'size': [<numba.core.ir.Assign object at 0x7f9422b7ca10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f9157b52f50>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f9157b59090>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f9157b52c10>],
             'align': [<numba.core.ir.Assign object at 0x7f9157b52a90>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f9157b52990>],
             'size': [<numba.core.ir.Assign object at 0x7f9157b52950>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c5465710>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f19c54f5e50>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f19c54f5f10>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f19c54f5b10>],
             'align': [<numba.core.ir.Assign object at 0x7f19c54f5990>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f19c54f5850>],
             'size': [<numba.core.ir.Assign object at 0x7f19c54f58d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe1593e1750>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9329ca7d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a425610>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f30b37d0>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422b046d0>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fe1593e1f50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fe1593e1b90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fe1593e1e90>],
             'align': [<numba.core.ir.Assign object at 0x7fe1593e1a90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fe1593e19d0>],
             'cls': [<numba.core.ir.Assign object at 0x7fe1593e1950>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157adb650>
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fc9329d1090>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fc9329cac90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fc9329caf90>],
             'align': [<numba.core.ir.Assign object at 0x7fc9329cab50>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fc9329caa90>],
             'cls': [<numba.core.ir.Assign object at 0x7fc9329caa10>]})
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f0e3a425e10>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f0e3a425a50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f0e3a425d50>],
             'align': [<numba.core.ir.Assign object at 0x7f0e3a425950>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f0e3a425890>],
             'cls': [<numba.core.ir.Assign object at 0x7f0e3a425810>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f99f30b3f50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f99f30b3b90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f99f30b3e90>],
             'align': [<numba.core.ir.Assign object at 0x7f99f30b3a90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f99f30b39d0>],
             'cls': [<numba.core.ir.Assign object at 0x7f99f30b3950>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f9422b04f50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f9422b04b50>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f9422b04e50>],
             'align': [<numba.core.ir.Assign object at 0x7f9422b049d0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f9422b04890>],
             'cls': [<numba.core.ir.Assign object at 0x7f9422b04090>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f9157adbdd0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f9157adb990>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f9157adbcd0>],
             'align': [<numba.core.ir.Assign object at 0x7f9157adb890>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f9157adb7d0>],
             'cls': [<numba.core.ir.Assign object at 0x7f9157adb750>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c547d590>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f19c547dc50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f19c547d890>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f19c547db90>],
             'align': [<numba.core.ir.Assign object at 0x7f19c547d790>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f19c547d6d0>],
             'cls': [<numba.core.ir.Assign object at 0x7f19c547d650>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61556d3750>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f6155764f90>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f615576a090>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f6155764c90>],
             'align': [<numba.core.ir.Assign object at 0x7f6155764a50>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f6155764910>],
             'size': [<numba.core.ir.Assign object at 0x7f6155764990>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f61556ed550>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f61556edd90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f61556ed990>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f61556edcd0>],
             'align': [<numba.core.ir.Assign object at 0x7f61556ed890>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f61556ed7d0>],
             'cls': [<numba.core.ir.Assign object at 0x7f61556ed750>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe15935e0d0>
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157a59a90>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f30301d0>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a80390>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9329479d0>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fe159366910>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fe159366a50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fe159366750>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fe159366350>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fe1593663d0>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fe159366490>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f9157a60650>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f9157a60790>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9157a60490>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f9157a59090>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f9157a60150>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f9157a60210>]})
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f9422a89910>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f9422a89a50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9422a89750>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f9422a80150>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f9422a89310>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f9422a89410>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f99f3038890>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f99f30389d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f99f30386d0>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f99f3038290>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f99f3038310>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f99f30383d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fc93294f910>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fc93294fa50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fc93294f750>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fc9329470d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fc93294f390>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fc93294f450>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a3aaf50>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f0e3a3aa7d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f0e3a3aa8d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f0e3a3aa610>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f0e3a3a2090>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f0e3a3aa250>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f0e3a3aa310>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c5402f50>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f19c5402650>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f19c5402750>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f19c5402490>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f19c5402050>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f19c5402110>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f19c54021d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615566a710>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f61556717d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f61556718d0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f6155671610>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f61556711d0>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f6155671250>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f6155671310>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159316450>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422a2e350>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f318e4d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157bb6d90>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f9157a09ad0>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f9157a09d10>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f9157bb6050>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f9157a0c990>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f9157a0cdd0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f9157a0cf50>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f9157a0f1d0>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f9157a0f6d0>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f9157a0f910>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f9157bb65d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f9157a0fc10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f9157bb6b90>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f9157bb67d0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f9157bb6d50>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f9157bb6a50>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f9157ba0d50>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f9157ba0dd0>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f9157ba0e50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f9157a76510>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f9157a76490>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f9157a76c10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f9157a05190>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f9157a05610>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f9157a05850>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f9157a05b90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f9157a05dd0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f9157a05f10>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f9157a09190>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f9157a09510>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f9157a09750>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f9157a0c190>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f9157a0ca90>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f9157a0f090>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f9157a0f7d0>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f9157a0fad0>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f9157a768d0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f9157a76ad0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f9157a05510>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f9157a09050>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f9157a09410>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f9157a099d0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f9157bb6310>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f9157bb6950>],
             'ax': [<numba.core.ir.Assign object at 0x7f9157ba0cd0>],
             'bool102': [<numba.core.ir.Assign object at 0x7f9157a09c10>],
             'bool140': [<numba.core.ir.Assign object at 0x7f9157a0ccd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7f9157a76750>],
             'bool68': [<numba.core.ir.Assign object at 0x7f9157a05750>],
             'bool76': [<numba.core.ir.Assign object at 0x7f9157a05cd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f9157a09650>],
             'inferred': [<numba.core.ir.Assign object at 0x7f9157a09ed0>,
                          <numba.core.ir.Assign object at 0x7f9157a0c650>],
             'known_size': [<numba.core.ir.Assign object at 0x7f9157b46510>,
                            <numba.core.ir.Assign object at 0x7f9157a76e10>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f9157a76e50>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f9157b46410>,
                               <numba.core.ir.Assign object at 0x7f9157ba0fd0>],
             'ok': [<numba.core.ir.Assign object at 0x7f9157a0c290>,
                    <numba.core.ir.Assign object at 0x7f9157a0cb90>],
             'origsize': [<numba.core.ir.Assign object at 0x7f9157b46890>],
             's': [<numba.core.ir.Assign object at 0x7f9157beb2d0>],
             'shape': [<numba.core.ir.Assign object at 0x7f9157b46650>]})
[numba.core.ssa DEBUG]  SSA violators {'ok', 'inferred', 'num_neg_value', 'known_size'}
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f99f2fe2a90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f99f2fe2cd0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f99f318a590>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f99f2fe5950>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f99f2fe5d90>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f99f2fe5f50>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f99f2fe81d0>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f99f2fe8690>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f99f2fe88d0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f99f318e0d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f99f2fe8b90>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f99f318e390>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f99f318e5d0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f99f318ef10>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f99f318ec10>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f99f318e1d0>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f99f3171e50>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f99f318ed90>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f99f304f610>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f99f304f250>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f99f304fc50>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f99f2fde190>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f99f2fde610>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f99f2fde850>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f99f2fdeb90>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f99f2fdedd0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f99f2fdef10>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f99f2fe2190>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f99f2fe24d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f99f2fe2710>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f99f2fe5150>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f99f2fe5a50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f99f2fe8090>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f99f2fe8790>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f99f2fe8a50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f99f304f7d0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f99f304fb10>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f99f2fde510>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f99f2fe2050>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f99f2fe23d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f99f2fe2990>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f99f318e810>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f99f318ee90>],
             'ax': [<numba.core.ir.Assign object at 0x7f99f3171fd0>],
             'bool102': [<numba.core.ir.Assign object at 0x7f99f2fe2bd0>],
             'bool140': [<numba.core.ir.Assign object at 0x7f99f2fe5c90>],
             'bool34': [<numba.core.ir.Assign object at 0x7f99f304f750>],
             'bool68': [<numba.core.ir.Assign object at 0x7f99f2fde750>],
             'bool76': [<numba.core.ir.Assign object at 0x7f99f2fdecd0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f99f2fe2610>],
             'inferred': [<numba.core.ir.Assign object at 0x7f99f2fe2e90>,
                          <numba.core.ir.Assign object at 0x7f99f2fe5610>],
             'known_size': [<numba.core.ir.Assign object at 0x7f99f3202c50>,
                            <numba.core.ir.Assign object at 0x7f99f304fe50>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f99f304fe90>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f99f3202b10>,
                               <numba.core.ir.Assign object at 0x7f99f3171ed0>],
             'ok': [<numba.core.ir.Assign object at 0x7f99f2fe5250>,
                    <numba.core.ir.Assign object at 0x7f99f2fe5b50>],
             'origsize': [<numba.core.ir.Assign object at 0x7f99f32021d0>],
             's': [<numba.core.ir.Assign object at 0x7f99f3171dd0>],
             'shape': [<numba.core.ir.Assign object at 0x7f99f32026d0>]})
[numba.core.ssa DEBUG]  SSA violators {'num_neg_value', 'ok', 'known_size', 'inferred'}
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f9422a32b50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f9422a32d90>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f9422bdae10>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f9422a34a10>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f9422a34e50>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f9422a34fd0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f9422a38250>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f9422a38750>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f9422a38990>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f9422bda6d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f9422a38c90>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f9422bdae50>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f9422bdac50>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f9422bda2d0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f9422bdadd0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f9422bcab50>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f9422bcaf90>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f9422bcaa50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f9422aa15d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f9422aa1550>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f9422aa1cd0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f9422a2e250>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f9422a2e6d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f9422a2e910>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f9422a2ec50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f9422a2ee90>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f9422a2ef90>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f9422a32210>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f9422a32590>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f9422a327d0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f9422a34210>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f9422a34b10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f9422a38110>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f9422a38850>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f9422a38b50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f9422aa1750>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f9422aa1b90>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f9422a2e5d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f9422a320d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f9422a32490>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f9422a32a50>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f9422bda490>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f9422bcad50>],
             'ax': [<numba.core.ir.Assign object at 0x7f9422bcab10>],
             'bool102': [<numba.core.ir.Assign object at 0x7f9422a32c90>],
             'bool140': [<numba.core.ir.Assign object at 0x7f9422a34d50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f9422aa1810>],
             'bool68': [<numba.core.ir.Assign object at 0x7f9422a2e810>],
             'bool76': [<numba.core.ir.Assign object at 0x7f9422a2ed90>],
             'bool94': [<numba.core.ir.Assign object at 0x7f9422a326d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7f9422a32f50>,
                          <numba.core.ir.Assign object at 0x7f9422a346d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7f9422bdae90>,
                            <numba.core.ir.Assign object at 0x7f9422aa1ed0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f9422aa1f10>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f9422b6d510>,
                               <numba.core.ir.Assign object at 0x7f9422c489d0>],
             'ok': [<numba.core.ir.Assign object at 0x7f9422a34310>,
                    <numba.core.ir.Assign object at 0x7f9422a34c10>],
             'origsize': [<numba.core.ir.Assign object at 0x7f9422b6dfd0>],
             's': [<numba.core.ir.Assign object at 0x7f9422c48d10>],
             'shape': [<numba.core.ir.Assign object at 0x7f9422b6dc10>]})
[numba.core.ssa DEBUG]  SSA violators {'num_neg_value', 'known_size', 'inferred', 'ok'}
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fe159310c10>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fe159310e50>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fe1594bc250>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fe159312ad0>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fe159312ed0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fe159316090>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fe1593162d0>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fe159316810>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fe159316a50>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fe1594bc990>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fe159316d50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fe1594bcc50>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fe1594b0b90>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fe159491250>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fe1594914d0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fe1594917d0>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fe159491810>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fe159491a10>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fe15937da90>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fe15937d910>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fe15937dd90>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fe15930c310>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fe15930c790>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fe15930c9d0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fe15930cd10>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fe15930cf50>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fe159310090>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fe1593102d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fe159310650>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fe159310890>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fe1593122d0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fe159312bd0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fe159316190>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fe159316910>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fe159316c10>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fe15937da10>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fe15937dc50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fe15930c690>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fe159310190>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fe159310550>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fe159310b10>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fe1594bcc90>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fe1594916d0>],
             'ax': [<numba.core.ir.Assign object at 0x7fe1594913d0>],
             'bool102': [<numba.core.ir.Assign object at 0x7fe159310d50>],
             'bool140': [<numba.core.ir.Assign object at 0x7fe159312dd0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fe15937d6d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7fe15930c8d0>],
             'bool76': [<numba.core.ir.Assign object at 0x7fe15930ce50>],
             'bool94': [<numba.core.ir.Assign object at 0x7fe159310790>],
             'inferred': [<numba.core.ir.Assign object at 0x7fe159312050>,
                          <numba.core.ir.Assign object at 0x7fe159312790>],
             'known_size': [<numba.core.ir.Assign object at 0x7fe1594bc310>,
                            <numba.core.ir.Assign object at 0x7fe15937df90>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fe15937dfd0>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fe159450490>,
                               <numba.core.ir.Assign object at 0x7fe159491890>],
             'ok': [<numba.core.ir.Assign object at 0x7fe1593123d0>,
                    <numba.core.ir.Assign object at 0x7fe159312cd0>],
             'origsize': [<numba.core.ir.Assign object at 0x7fe15944a990>],
             's': [<numba.core.ir.Assign object at 0x7fe15951c790>],
             'shape': [<numba.core.ir.Assign object at 0x7fe159522c50>]})
[numba.core.ssa DEBUG]  SSA violators {'ok', 'known_size', 'inferred', 'num_neg_value'}
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9328f9950>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fc9328f9c10>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fc9328f9e50>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fc932a33690>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fc9328fbad0>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fc9328fbf10>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fc9328ff0d0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fc9328ff310>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fc9328ff7d0>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fc9328ffa10>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fc932aa5790>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fc9328ffd10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fc932aa5b10>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fc932aa59d0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fc932aa56d0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fc932aa5fd0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fc932a88bd0>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fc932a88f90>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fc932a88e50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fc932967890>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fc932967810>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fc932967d90>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fc9328f5310>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fc9328f5790>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fc9328f59d0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fc9328f5d10>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fc9328f5f50>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fc9328f9090>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fc9328f92d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fc9328f9650>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fc9328f9890>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fc9328fb2d0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fc9328fbbd0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fc9328ff1d0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fc9328ff8d0>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fc9328ffbd0>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fc932967650>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fc932967c90>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fc9328f5690>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fc9328f9190>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fc9328f9550>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fc9328f9b10>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fc932a33fd0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fc932aa5cd0>],
             'ax': [<numba.core.ir.Assign object at 0x7fc932a88ed0>],
             'bool102': [<numba.core.ir.Assign object at 0x7fc9328f9d50>],
             'bool140': [<numba.core.ir.Assign object at 0x7fc9328fbe10>],
             'bool34': [<numba.core.ir.Assign object at 0x7fc9329676d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7fc9328f58d0>],
             'bool76': [<numba.core.ir.Assign object at 0x7fc9328f5e50>],
             'bool94': [<numba.core.ir.Assign object at 0x7fc9328f9790>],
             'inferred': [<numba.core.ir.Assign object at 0x7fc9328fb050>,
                          <numba.core.ir.Assign object at 0x7fc9328fb790>],
             'known_size': [<numba.core.ir.Assign object at 0x7fc932a33490>,
                            <numba.core.ir.Assign object at 0x7fc932967f90>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fc932967fd0>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fc932a331d0>,
                               <numba.core.ir.Assign object at 0x7fc932b0bf90>],
             'ok': [<numba.core.ir.Assign object at 0x7fc9328fb3d0>,
                    <numba.core.ir.Assign object at 0x7fc9328fbcd0>],
             'origsize': [<numba.core.ir.Assign object at 0x7fc932a33d90>],
             's': [<numba.core.ir.Assign object at 0x7fc932b0bfd0>],
             'shape': [<numba.core.ir.Assign object at 0x7fc932a33e10>]})
[numba.core.ssa DEBUG]  SSA violators {'inferred', 'ok', 'known_size', 'num_neg_value'}
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a350250>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a354a50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f0e3a354c90>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f0e3a545650>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f0e3a357910>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f0e3a357d50>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f0e3a357ed0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f0e3a35a150>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f0e3a35a650>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f0e3a35a890>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f0e3a545150>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f0e3a35ab50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f0e3a5454d0>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f0e3a5004d0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f0e3a500b90>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f0e3a500990>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f0e3a4f3710>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f0e3a4ebf10>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f0e3a500c50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f0e3a3c2850>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f0e3a3c22d0>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f0e3a3c2bd0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f0e3a350150>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a3505d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f0e3a350810>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a350b50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f0e3a350d90>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f0e3a350e90>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f0e3a354110>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f0e3a354490>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f0e3a3546d0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f0e3a357110>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f0e3a357a10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f0e3a357fd0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f0e3a35a750>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f0e3a35aa50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f0e3a4ebe50>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f0e3a3c2a90>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f0e3a3504d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f0e3a350f90>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f0e3a354390>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f0e3a354950>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f0e3a5457d0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f0e3a500950>],
             'ax': [<numba.core.ir.Assign object at 0x7f0e3a4ebd50>],
             'bool102': [<numba.core.ir.Assign object at 0x7f0e3a354b90>],
             'bool140': [<numba.core.ir.Assign object at 0x7f0e3a357c50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f0e3a3c2610>],
             'bool68': [<numba.core.ir.Assign object at 0x7f0e3a350710>],
             'bool76': [<numba.core.ir.Assign object at 0x7f0e3a350c90>],
             'bool94': [<numba.core.ir.Assign object at 0x7f0e3a3545d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7f0e3a354e50>,
                          <numba.core.ir.Assign object at 0x7f0e3a3575d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7f0e3a5451d0>,
                            <numba.core.ir.Assign object at 0x7f0e3a3c2dd0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f0e3a3c2e10>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f0e3a527f90>,
                               <numba.core.ir.Assign object at 0x7f0e3a4ebe90>],
             'ok': [<numba.core.ir.Assign object at 0x7f0e3a357210>,
                    <numba.core.ir.Assign object at 0x7f0e3a357b10>],
             'origsize': [<numba.core.ir.Assign object at 0x7f0e470e9850>],
             's': [<numba.core.ir.Assign object at 0x7f0e3a4eb990>],
             'shape': [<numba.core.ir.Assign object at 0x7f0e3a513d50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  SSA violators {'inferred', 'num_neg_value', 'ok', 'known_size'}
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c53f3c10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f19c53ab950>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f19c53abb90>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f19c554d650>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f19c53ae810>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f19c53aec50>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f19c53aedd0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f19c53b1050>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f19c53b1510>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f19c53b1750>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f19c554dad0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f19c53b1a10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f19c554d6d0>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f19c54e8050>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f19c54e8610>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f19c54e8810>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f19c54e89d0>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f19c54e8d10>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f19c54e8c10>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f19c55316d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f19c5531590>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f19c5531710>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f19c5542e90>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f19c54194d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f19c5419710>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f19c5419a50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f19c5419c90>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f19c5419d90>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f19c5419fd0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f19c53ab390>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f19c53ab5d0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f19c53abfd0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f19c53ae910>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f19c53aeed0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f19c53b1610>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f19c53b1910>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f19c54e84d0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f19c5531150>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f19c54193d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f19c5419e90>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f19c53ab290>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f19c53ab850>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f19c554d750>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f19c54e8b90>],
             'ax': [<numba.core.ir.Assign object at 0x7f19c54e8790>],
             'bool102': [<numba.core.ir.Assign object at 0x7f19c53aba90>],
             'bool140': [<numba.core.ir.Assign object at 0x7f19c53aeb50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f19c55310d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7f19c5419610>],
             'bool76': [<numba.core.ir.Assign object at 0x7f19c5419b90>],
             'bool94': [<numba.core.ir.Assign object at 0x7f19c53ab4d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7f19c53abd50>,
                          <numba.core.ir.Assign object at 0x7f19c53ae4d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7f19c554dc10>,
                            <numba.core.ir.Assign object at 0x7f19d128d050>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f19c5542d90>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f19c554df50>,
                               <numba.core.ir.Assign object at 0x7f19c54e85d0>],
             'ok': [<numba.core.ir.Assign object at 0x7f19c53ae110>,
                    <numba.core.ir.Assign object at 0x7f19c53aea10>],
             'origsize': [<numba.core.ir.Assign object at 0x7f19c5564e50>],
             's': [<numba.core.ir.Assign object at 0x7f19c54e8750>],
             'shape': [<numba.core.ir.Assign object at 0x7f19c5564c10>]})
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  SSA violators {'num_neg_value', 'ok', 'known_size', 'inferred'}
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fe159327750>],
             118: [<numba.core.ir.Assign object at 0x7fe159327110>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f942335a950>],
             36: [<numba.core.ir.Assign object at 0x7f9422a49f50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f99f2fe8d50>],
             36: [<numba.core.ir.Assign object at 0x7f99f2ff9790>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f9157bb6fd0>],
             118: [<numba.core.ir.Assign object at 0x7f9157a20dd0>]})
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fc932910050>],
             118: [<numba.core.ir.Assign object at 0x7fc932910e10>]})
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f0e3a35ae90>],
             118: [<numba.core.ir.Assign object at 0x7f0e3a3508d0>]})
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f19c5553fd0>],
             36: [<numba.core.ir.Assign object at 0x7f19c554d290>]})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe159316f50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4490>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0e3a35ac50>],
             36: [<numba.core.ir.Assign object at 0x7f0e3a48ed50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc9328ffad0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fc932910410>],
             118: [<numba.core.ir.Assign object at 0x7fc932910b50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f9157bf4490>],
             118: [<numba.core.ir.Assign object at 0x7f9157a20690>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f318e850>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f99f2ff9990>],
             118: [<numba.core.ir.Assign object at 0x7f99f2ff9750>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f304fdd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38f50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422c52050>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f9422a49fd0>],
             50: [<numba.core.ir.Assign object at 0x7f9422a49510>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f19c5553490>],
             118: [<numba.core.ir.Assign object at 0x7f19c5553ed0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327250>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fe159327990>],
             50: [<numba.core.ir.Assign object at 0x7fe159327490>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c0d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f9157bf4290>],
             36: [<numba.core.ir.Assign object at 0x7f9157a0fd10>]})
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932a79110>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fc9329109d0>],
             50: [<numba.core.ir.Assign object at 0x7fc932910510>]})
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f99f2fe8d10>],
             50: [<numba.core.ir.Assign object at 0x7f99f2ff93d0>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c5531090>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fe159327090>],
             118: [<numba.core.ir.Assign object at 0x7fe159327d10>]})
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f9422a49110>],
             118: [<numba.core.ir.Assign object at 0x7f9422a49050>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f0e3a36bdd0>],
             118: [<numba.core.ir.Assign object at 0x7f0e3a36b350>]})
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157bf4190>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f19c5553e10>],
             50: [<numba.core.ir.Assign object at 0x7f19c53b11d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15930c090>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9157bb6590>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f9157a0fe50>],
             50: [<numba.core.ir.Assign object at 0x7f9157a20590>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9157a20c50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f311c0d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f99f2ff9210>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f99f318ed50>],
             118: [<numba.core.ir.Assign object at 0x7f99f3002350>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f99f2fe8f10>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422aa1a90>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9422b6d410>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f9422a38f10>],
             118: [<numba.core.ir.Assign object at 0x7f9422a51990>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9422a38e10>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c53c25d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f19c53b1b90>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f19c53c2810>],
             118: [<numba.core.ir.Assign object at 0x7f19c53c2c50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fe159327790>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fe159327fd0>],
             36: [<numba.core.ir.Assign object at 0x7fe159327a10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fe15944ad50>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a36bf90>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f0e3a35ae10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f0e3a500e50>],
             50: [<numba.core.ir.Assign object at 0x7f0e3a48e890>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a333d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fc932967ad0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fc932aa5050>],
             36: [<numba.core.ir.Assign object at 0x7fc932910e10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fc932a43350>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f0e3a3c2d50>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f19c54ec850>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615561a790>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f615561aa50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f615561ac90>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f61557c2f90>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f615561d910>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f615561dd50>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f615561ded0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f6155620150>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f6155620650>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f6155620890>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f61557c24d0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f6155620b50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f61557c2250>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f61557c2c90>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f61557c2c10>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f61557c2550>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f61557b2d50>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f61557b2d10>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f61557b2b50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f6155689650>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f61556895d0>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f6155689bd0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f6155616110>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f6155616590>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f61556167d0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f6155616b10>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f6155616d50>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f6155616e90>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f615561a110>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f615561a490>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f615561a6d0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f615561d110>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f615561da10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f615561dfd0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f6155620750>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f6155620a50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f61556898d0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f6155689a90>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f6155616490>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f6155616f90>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f615561a390>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f615561a950>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f61557c2d90>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f61557c2d10>],
             'ax': [<numba.core.ir.Assign object at 0x7f61557b2e90>],
             'bool102': [<numba.core.ir.Assign object at 0x7f615561ab90>],
             'bool140': [<numba.core.ir.Assign object at 0x7f615561dc50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f6155689710>],
             'bool68': [<numba.core.ir.Assign object at 0x7f61556166d0>],
             'bool76': [<numba.core.ir.Assign object at 0x7f6155616c50>],
             'bool94': [<numba.core.ir.Assign object at 0x7f615561a5d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7f615561ae50>,
                          <numba.core.ir.Assign object at 0x7f615561d5d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7f61557bcb50>,
                            <numba.core.ir.Assign object at 0x7f6155689d90>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f6155689dd0>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f6155755210>,
                               <numba.core.ir.Assign object at 0x7f61557b2e10>],
             'ok': [<numba.core.ir.Assign object at 0x7f615561d210>,
                    <numba.core.ir.Assign object at 0x7f615561db10>],
             'origsize': [<numba.core.ir.Assign object at 0x7f6155755390>],
             's': [<numba.core.ir.Assign object at 0x7f61557b2fd0>],
             'shape': [<numba.core.ir.Assign object at 0x7f6155755c50>]})
[numba.core.ssa DEBUG]  SSA violators {'ok', 'num_neg_value', 'inferred', 'known_size'}
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f6155620e50>],
             118: [<numba.core.ir.Assign object at 0x7f6155631650>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689850>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f615583a5d0>],
             36: [<numba.core.ir.Assign object at 0x7f6155755310>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155620f90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f6155631c10>],
             118: [<numba.core.ir.Assign object at 0x7f61556313d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155631fd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f6155620cd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f6155620e90>],
             50: [<numba.core.ir.Assign object at 0x7f6155689850>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f6155689e50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f2eefd10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422942f50>
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f99f2efa150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f99f2efa290>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f99f2ef3fd0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f99f2ef3dd0>]})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f94229491d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9422949310>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f9422949090>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f9422942e50>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157917a50>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe15921fc50>
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f915791af90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9157922110>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f915791aed0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f915791ad10>]})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fe15922a1d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fe15922a310>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fe15922a090>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fe159223e50>]})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc932807b90>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fc932812090>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc9328121d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fc93280bf50>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fc93280bdd0>]})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a262990>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f0e3a269ed0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f0e3a269fd0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0e3a269d90>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f0e3a269bd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c52c0c90>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f19c52c0ed0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f19c52c0fd0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f19c52c0dd0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f19c52c0bd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f2e50b90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f94228a3f50>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe15917fb50>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157877ad0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f94228a91d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f94228a9310>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f94228a9090>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f94228a3e50>]})
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f99f2e59190>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f99f2e592d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f99f2e59050>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f99f2e53e10>]})
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fe159189190>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fe1591892d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fe159189090>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fe159183e10>]})
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f915787cfd0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9157883150>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f915787cf10>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f915787cd50>]})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc9327e6bd0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fc9327700d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fc932770210>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fc93276af90>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fc93276ae10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a1c28d0>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f0e3a1c6ed0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f0e3a1c6fd0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f0e3a1c6dd0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f0e3a1c6c10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c521dd10>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f19c521df50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f19c5223090>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f19c521de50>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f19c521dc90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615552cc90>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f6155533150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f6155533250>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f615552cfd0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f615552cd90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fe159174bd0>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9422888cd0>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f99f2e45e90>
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9157861950>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fe1591743d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fe159174610>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fe159174710>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fe159174850>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fe159174210>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fe15916cfd0>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fe15916c210>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fe15916cd90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fe15916ce50>]})
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f9422894390>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f94228945d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f9422894710>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f9422894850>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f94228941d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f942288bf50>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f942288bcd0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f942288bd50>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f942288be10>]})
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f99f2e45390>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f99f2e455d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f99f2e456d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f99f2e45810>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f99f2e451d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f99f2e3cf50>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f99f2e3c1d0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f99f2e3cd50>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f99f2e3ce10>]})
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f915786c210>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f915786c450>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f915786c550>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f915786c690>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f915786c050>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f9157865e50>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f9157865250>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f9157865c50>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f9157865d10>]})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fc93274fa90>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fc93275c310>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fc93275c550>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fc93275c650>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fc93275c790>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fc93275c150>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fc932753f10>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fc9327532d0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fc932753d50>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fc932753e10>]})
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f0e3a1afdd0>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f0e3a1b7110>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f0e3a1b7350>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f0e3a1b7450>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f0e3a1b7550>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f0e3a1aff10>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f0e3a1afd10>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f0e3a1af0d0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f0e3a1afb10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f0e3a1afbd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f19c5206e50>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f19c520e190>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f19c520e3d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f19c520e4d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f19c520e5d0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f19c5206f90>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f19c5206d90>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f19c5206a50>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f19c5206b90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f19c5206c50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f615548b290>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f6155492150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f6155492250>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f615548bfd0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f615548bdd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f6155471950>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f615547d2d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f615547d510>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f615547d650>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f615547d750>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f615547d110>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f6155475e90>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f6155475b90>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f6155475cd0>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f6155475d90>]})
[numba.core.ssa DEBUG]  SSA violators set()
Finished initialization.
[torcpy.runtime WARNING]  MPI.Query_thread returns 3
[torcpy.runtime WARNING]  Info: MPI.Query_thread returns MPI.THREAD_MULTIPLE
[32mTORCPY: main starts[0m
[32mTORCPY: node[0]: created=11680001, executed=1460001[0m
Finished initialization.
[32mTORCPY: node[3]: created=0, executed=1460000[0m
Finished initialization.
[32mTORCPY: node[5]: created=0, executed=1460000[0m
Finished initialization.
[32mTORCPY: node[6]: created=0, executed=1460000[0m
Finished initialization.
[32mTORCPY: node[4]: created=0, executed=1460000[0m
Finished initialization.
[32mTORCPY: node[2]: created=0, executed=1460000[0m
Finished initialization.
[32mTORCPY: node[7]: created=0, executed=1460000[0m
Finished initialization.
[32mTORCPY: node[1]: created=0, executed=1460000[0m
Complete Runtime:  1052.1117625236511
20000,1052.1117625236511
Complete Runtime:  1052.140364408493
20000,1052.140364408493
Complete Runtime:  1052.1477200984955
20000,1052.1477200984955
Complete Runtime:  1052.1507482528687
20000,1052.1507482528687
Complete Runtime:  1052.1425294876099
20000,1052.1425294876099
Complete Runtime:  1052.1499698162079
20000,1052.1499698162079
Complete Runtime:  1052.1493668556213
20000,1052.1493668556213
Complete Runtime:  1052.1496920585632
20000,1052.1496920585632
