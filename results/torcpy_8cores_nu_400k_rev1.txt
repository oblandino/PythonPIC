[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[torcpy.runtime DEBUG]  mpi4py module was succesfully imported
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  matplotlib data path: /home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/matplotlib/mpl-data
[matplotlib DEBUG]  CONFIGDIR=/home/oblandino/.config/matplotlib
[matplotlib DEBUG]  interactive is False
[matplotlib DEBUG]  platform is linux
[matplotlib DEBUG]  loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', '_collections_abc', 'posixpath', 'genericpath', 'os.path', '_sitebuiltins', '_distutils_hack', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'mpl_toolkits', 'pythonpic', 'pythonpic.helper_functions', 'pythonpic.helper_functions.helpers', 'argparse', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'gettext', 'locale', 'errno', 'time', 'subprocess', 'signal', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', '_weakrefset', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy._version', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'numpy._distributor_init', 'mkl', 'ctypes', '_ctypes', 'struct', '_struct', 'ctypes._endian', 'mkl._mklinit', 'mkl._py_mkl_service', 'cython_runtime', 'numbers', 'numpy.core', 'numpy.version', 'numpy.core.multiarray', 'numpy.core.overrides', 'textwrap', 'datetime', '_datetime', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'pathlib', 'fnmatch', 'ntpath', 'urllib', 'urllib.parse', 'pickle', '_compat_pickle', '_pickle', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs_scalars', 'platform', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'ast', '_ast', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.lib.stride_tricks', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'weakref', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_28', 'numpy.random._common', 'secrets', 'base64', 'binascii', 'hmac', '_hashlib', 'hashlib', '_blake2', '_sha3', 'random', 'bisect', '_bisect', '_random', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'inspect', 'dis', 'opcode', '_opcode', 'numpy.ma.extras', 'pythonpic.algorithms', 'pythonpic.algorithms.BoundaryCondition', 'pythonpic.configs', 'pythonpic.configs.benchmark_run', 'pythonpic.classes', 'pythonpic.classes.grid', 'h5py', 'atexit', 'h5py._errors', 'h5py.version', 'h5py.h5', '_cython_0_29_24', 'h5py.defs', 'h5py._objects', 'gc', 'h5py.h5py_warnings', 'h5py._conv', 'h5py.h5r', 'h5py.h5t', 'h5py.h5p', 'h5py.h5s', 'h5py.utils', 'h5py.h5ac', 'logging', 'string', '_string', 'h5py.h5z', 'h5py.h5a', 'h5py._proxy', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5f', 'h5py.h5g', 'h5py.h5i', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.filters', 'h5py._hl.compat', 'h5py._hl.base', 'h5py._hl.files', 'h5py._hl.group', 'h5py.h5o', 'h5py.h5l', 'h5py._hl.dataset', 'cached_property', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'copy', 'h5py._hl.attrs', 'uuid', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'typing', 'typing.io', 'typing.re', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._fftlog', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', '_cython_0_29_25', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.linalg', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.linalg._decomp_cossin', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'scipy.integrate', 'scipy.integrate._quadrature', '__future__', 'scipy.integrate.odepack', 'scipy.integrate._odepack', 'scipy.integrate.quadpack', 'scipy.integrate._quadpack', 'scipy.integrate._ode', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._bvp', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy._lib.decorator', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._differentiable_functions', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy._lib.messagestream', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._constraints', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'difflib', 'pprint', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize._nnls', 'scipy.optimize.__nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_highs', 'scipy.optimize._highs', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.linalg.interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg._interpolative', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_doc', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy.spatial._procrustes', 'scipy.spatial._geometric_slerp', 'scipy.spatial.distance', 'dataclasses', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.spatial._distance_pybind', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.integrate._ivp', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._quad_vec', 'pythonpic.helper_functions.physics', 'numba', 'numba._version', 'numba.misc', 'numba.misc.init_utils', 'numba.core', 'numba.core.config', 'llvmlite', 'llvmlite._version', 'llvmlite.binding', 'llvmlite.binding.dylib', 'llvmlite.binding.ffi', 'llvmlite.binding.common', 'llvmlite.utils', 'pkg_resources', 'zipfile', 'pkgutil', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'email', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'pkg_resources.extern.jaraco.text', 'importlib.resources', 'pkg_resources._vendor.importlib_resources', 'pkg_resources._vendor.importlib_resources._common', 'pkg_resources._vendor.importlib_resources.abc', 'pkg_resources._vendor.importlib_resources._compat', 'pkg_resources._vendor.zipp', 'pkg_resources._vendor.importlib_resources._legacy', 'pkg_resources.extern.importlib_resources', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.more_itertools', 'pkg_resources._vendor.more_itertools.more', 'queue', '_queue', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.context', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.tags', 'sysconfig', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'llvmlite.binding.executionengine', 'llvmlite.binding.targets', 'llvmlite.binding.object_file', 'llvmlite.binding.initfini', 'llvmlite.binding.linker', 'llvmlite.binding.module', 'llvmlite.binding.value', 'llvmlite.binding.context', 'llvmlite.binding.options', 'llvmlite.binding.passmanagers', 'llvmlite.binding.transforms', 'llvmlite.binding.analysis', 'llvmlite.ir', 'llvmlite.ir.types', 'llvmlite.ir._utils', 'llvmlite.ir.values', 'llvmlite.ir.module', 'llvmlite.ir.context', 'llvmlite.ir.builder', 'llvmlite.ir.instructions', 'llvmlite.ir.transforms', 'numba.core.types', 'numba.core.utils', 'timeit', 'numba.core.types.abstract', 'numba.core.types.containers', 'numba.core.types.common', 'numba.core.errors', 'numba.core.types.misc', 'numba.core.typeconv', 'numba.core.typeconv.castgraph', 'numba.core.ir', 'numba.core.consts', 'numba.core.types.functions', 'numba.core.types.iterators', 'numba.core.types.npytypes', 'numba.core.types.scalars', 'numba.np', 'numba.np.npdatetime_helpers', 'numba.core.types.function_type', 'numba.misc.special', 'numba.core.typing', 'numba.core.typing.context', 'numba.core.typeconv.rules', 'numba.core.typeconv.typeconv', 'numba.core.typeconv._typeconv', 'numba.core.typing.templates', 'numba.core.targetconfig', 'numba.core.cpu_options', 'numba.core.typing.typeof', 'numba.np.numpy_support', 'numba.core.cgutils', 'numba.core.debuginfo', 'numba.core.datamodel', 'numba.core.datamodel.manager', 'numba.core.datamodel.packer', 'numba.core.datamodel.registry', 'numba.core.datamodel.models', 'numba.core.typing.asnumbatype', 'numba.core.decorators', 'numba.stencils', 'numba.stencils.stencil', 'numba.core.ir_utils', 'numba.core.extending', 'numba.core.imputils', 'numba.core.pythonapi', 'llvmlite.llvmpy', 'llvmlite.llvmpy.core', 'numba._helperlib', 'numba.core.lowering', 'numba.core.funcdesc', 'numba.core.itanium_mangler', 'numba.core.generators', 'numba.core.removerefctpass', 'numba.core.environment', 'numba._dynfunc', 'numba.core.analysis', 'numba.core.controlflow', 'numba.core.serialize', 'numba.cloudpickle', 'numba.cloudpickle.cloudpickle', 'numba.cloudpickle.compat', 'typing_extensions', 'numba.cloudpickle.cloudpickle_fast', 'numba.core.postproc', 'numba.core.transforms', 'numba.core.rewrites', 'numba.core.rewrites.registry', 'numba.core.rewrites.static_getitem', 'numba.core.rewrites.static_raise', 'numba.core.rewrites.static_binop', 'numba.core.rewrites.ir_print', 'numba.core.registry', 'numba.core.descriptors', 'numba.core.dispatcher', 'numba._devicearray', 'numba._dispatcher', 'numba.core.compiler', 'numba.core.tracing', 'numba.core.interpreter', 'numba.core.dataflow', 'numba.core.byteflow', 'numba.core.unsafe', 'numba.core.unsafe.eh', 'numba.cpython', 'numba.cpython.unsafe', 'numba.cpython.unsafe.tuple', 'numba.core.bytecode', 'numba.core.callconv', 'numba.core.base', 'numba.core.event', 'numba.core.compiler_lock', 'numba.cpython.builtins', 'numba.core.typing.builtins', 'numba.parfors', 'numba.parfors.parfor_lowering', 'numba.parfors.parfor', 'numba.core.typeinfer', 'numba.stencils.stencilparfor', 'numba.core.typing.npydecl', 'numba.core.overload_glue', 'numba.parfors.array_analysis', 'numba.np.unsafe', 'numba.np.unsafe.ndarray', 'numba.core.sigutils', 'numba.parfors.parfor_lowering_utils', 'numba.extending', 'numba.core.cpu', 'numba.core.callwrapper', 'numba.core.codegen', 'html', 'html.entities', 'llvmlite.llvmpy.passes', 'numba.core.runtime', 'numba.core.runtime.nrt', 'numba.core.runtime.nrtdynmod', 'numba.core.runtime._nrt_python', 'numba.core.runtime.nrtopt', 'numba.misc.inspection', 'numba.misc.llvm_pass_timings', 'numba.core.externals', 'numba.core.intrinsics', 'numba.core.fastmathpass', 'numba.core.options', 'numba.core.entrypoints', 'numba.np.ufunc_db', 'numba.core.compiler_machinery', 'numba.core.untyped_passes', 'numba.core.ssa', 'numba.core.typed_passes', 'numba.core.annotations', 'numba.core.annotations.type_annotations', 'numba.core.object_mode_passes', 'numba.core.pylowering', 'numba.core.caching', 'numba.misc.appdirs', 'numba.core.retarget', 'numba.np.ufunc', 'numba.np.ufunc.decorators', 'numba.np.ufunc._internal', 'numba.np.ufunc.parallel', 'numba.np.ufunc.wrappers', 'numba.np.ufunc.ufuncbuilder', 'numba.core.target_extension', 'numba.np.ufunc.sigparse', 'numba.np.ufunc.dufunc', 'numba.np.ufunc.gufunc', 'numba.np.ufunc.array_exprs', 'numba.experimental', 'numba.experimental.jitclass', 'numba.experimental.jitclass.decorators', 'numba.experimental.jitclass.boxing', 'numba.core.withcontexts', 'numba.typed', 'pythonpic.algorithms.FieldSolver', 'pythonpic.algorithms.field_interpolation', 'pythonpic.algorithms.current_deposition', 'torcpy', 'torcpy.runtime', 'termcolor', 'coloredlogs', 'humanfriendly', 'decimal', '_decimal', 'humanfriendly.compat', 'html.parser', '_markupbase', 'humanfriendly.deprecation', 'humanfriendly.text', 'humanfriendly.terminal', 'fcntl', 'termios', 'humanfriendly.decorators', 'humanfriendly.usage', 'csv', '_csv', 'mpi4py', 'mpi4py.rc', 'mpi4py.MPI', '_cython_0_29_14', 'pythonpic.classes.simulation', 'matplotlib', 'packaging', 'packaging.__about__', 'packaging.version', 'packaging._structures', 'matplotlib._api', 'matplotlib._api.deprecation', 'matplotlib._version', 'matplotlib.cbook', 'gzip', 'shlex', 'matplotlib._c_internal_utils', 'matplotlib.docstring', 'matplotlib.rcsetup', 'matplotlib.colors', 'PIL', 'PIL._version', 'PIL.Image', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'PIL.PngImagePlugin', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.ImagePalette', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImageSequence', 'matplotlib.scale', 'matplotlib.ticker', 'matplotlib.transforms', 'matplotlib._path', 'matplotlib.path', 'matplotlib.bezier', 'matplotlib._color_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'pyparsing.util', 'pyparsing.exceptions', 'pyparsing.unicode', 'pyparsing.actions', 'pyparsing.core', 'pyparsing.results', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'matplotlib._enums', 'cycler', 'matplotlib.ft2font', 'dateutil', 'dateutil._version', 'kiwisolver']
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib DEBUG]  CACHEDIR=/home/oblandino/.cache/matplotlib
[matplotlib.font_manager DEBUG]  Using fontManager instance from /home/oblandino/.cache/matplotlib/fontlist-v330.json
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
[matplotlib.pyplot DEBUG]  Loaded backend agg version unknown.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
crit density 9.847700361687113e+26
[numexpr.utils INFO]  Note: detected 256 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[numexpr.utils INFO]  Note: NumExpr detected 256 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
[numexpr.utils INFO]  NumExpr defaulting to 8 threads.
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9468c2c50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e31d4b10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a15a090>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a64c710>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e240790>
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f905211a4d0>
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fa946902790>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fa9469027d0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fa9469172d0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fa946917490>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fa946917550>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fa946917750>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fa946917a10>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fa946917e50>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fa94692b250>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fa94692b350>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fa94692b450>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fa94692b890>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa946908190>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fa94692b990>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fa94692ba90>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fa94692be50>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fa946972d50>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fa946917890>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fa946917c90>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fa94692b110>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fa94692b790>],
             'dx': [<numba.core.ir.Assign object at 0x7fa946908810>],
             'field': [<numba.core.ir.Assign object at 0x7fa94692bb90>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fa946902410>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fa946917b10>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fa946908990>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fa95407b990>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f18e3212f90>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f18e32125d0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f18e32350d0>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f18e3235290>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f18e3235350>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f18e3235550>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f18e3235810>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f18e3235c50>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f18e323b050>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f18e323b150>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f18e323b250>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f18e323b690>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f18e3282b10>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f18e323b790>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f18e323b890>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f18e323bc50>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f18e3282f90>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f18e3235690>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f18e3235a90>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f18e3235ed0>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f18e323b590>],
             'dx': [<numba.core.ir.Assign object at 0x7f18e3218650>],
             'field': [<numba.core.ir.Assign object at 0x7f18e323b990>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f18e3212610>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f18e3235910>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f18e32187d0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f18e3218f90>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f260a202310>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f260a202b90>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f260a197990>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f260a197b50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f260a197c10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f260a197e10>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f260a1b7090>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f260a1b7510>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f260a1b78d0>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f260a1b79d0>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f260a1b7ad0>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f260a1b7f10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f260a192690>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f260a1b9050>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f260a1b9150>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f260a1b9510>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f260a202f50>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f260a197f50>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f260a1b7350>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f260a1b7790>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f260a1b7e10>],
             'dx': [<numba.core.ir.Assign object at 0x7f260a192d10>],
             'field': [<numba.core.ir.Assign object at 0x7f260a1b9250>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f260a202910>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f260a1b71d0>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f260a192e90>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f260a1978d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7ffb7a6fbdd0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7ffb7a6fbb50>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7ffb7a690c90>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7ffb7a690e50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7ffb7a690f10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7ffb7a6ae150>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7ffb7a6ae410>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7ffb7a6ae850>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7ffb7a6aec10>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7ffb7a6aed10>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7ffb7a6aee10>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7ffb7a6b3290>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7ffb7a7051d0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7ffb7a6b3390>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7ffb7a6b3490>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7ffb7a6b3850>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7ffb7a6fb810>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7ffb7a6ae290>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7ffb7a6ae690>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7ffb7a6aead0>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7ffb7a6b3190>],
             'dx': [<numba.core.ir.Assign object at 0x7ffb7a705d50>],
             'field': [<numba.core.ir.Assign object at 0x7ffb7a6b3590>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7ffb7a6fb650>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7ffb7a6ae510>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7ffb7a705ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7ffb7a690c50>]})
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7fd90e2efdd0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7fd90e2efb50>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7fd90e284c90>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7fd90e284e50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7fd90e284f10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7fd90e2a2150>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7fd90e2a2410>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7fd90e2a2850>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7fd90e2a2c10>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7fd90e2a2d10>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7fd90e2a2e10>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7fd90e2a7290>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fd90e2f91d0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7fd90e2a7390>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7fd90e2a7490>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7fd90e2a7850>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fd90e2ef810>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7fd90e2a2290>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7fd90e2a2690>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fd90e2a2ad0>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7fd90e2a7190>],
             'dx': [<numba.core.ir.Assign object at 0x7fd90e2f9d50>],
             'field': [<numba.core.ir.Assign object at 0x7fd90e2a7590>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7fd90e284a90>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7fd90e2a2510>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7fd90e2f9ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7fd90e284bd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f9052154610>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f9052154bd0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f90520eaa90>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f90520eac50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f90520ead10>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f90520eaf10>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f9052109190>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f90521095d0>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f9052109990>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f9052109a90>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f9052109b90>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f9052109fd0>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f90520e41d0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f905210d110>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f905210d210>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f905210d5d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f9052154f90>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f9052109050>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f9052109410>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f9052109850>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f9052109ed0>],
             'dx': [<numba.core.ir.Assign object at 0x7f90520e4d50>],
             'field': [<numba.core.ir.Assign object at 0x7f905210d310>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f9052154950>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f9052109290>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f90520e4ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f90520eaa10>]})
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2034302d90>
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f2026fdded0>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f2026fddc50>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f2026f72d90>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f2026f72f50>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f2026f90050>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f2026f90250>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f2026f90510>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f2026f90950>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f2026f90d10>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f2026f90e10>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f2026f90f10>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f2026f95390>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f2026f6c190>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f2026f95490>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f2026f95590>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f2026f95950>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f2026fdd8d0>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f2026f90390>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f2026f90790>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f2026f90bd0>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f2026f95290>],
             'dx': [<numba.core.ir.Assign object at 0x7f2026f6cd50>],
             'field': [<numba.core.ir.Assign object at 0x7f2026f95690>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f2026f72610>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f2026f90610>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f2026f6ced0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f2026f72d50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa946858590>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0e8ed0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5e12d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3168750>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f905203b0d0>
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e1d5650>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa946860350>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa946860490>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fa946858fd0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fa946860090>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f18e3170390>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f18e3170510>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f18e3168a50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f18e31700d0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f260a0e8e90>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f260a0f1050>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f260a0e8b50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f260a0e8bd0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7ffb7a5e9110>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7ffb7a5e9290>],
             'dx_1': [<numba.core.ir.Assign object at 0x7ffb7a5e1d90>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7ffb7a5e1e10>]})
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f905203bfd0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9052042190>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f905203bcd0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f905203bd50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fd90e1dc250>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fd90e1dc390>],
             'dx_1': [<numba.core.ir.Assign object at 0x7fd90e1d5ed0>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7fd90e1d5f50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f20343a9d90>
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f2026eca1d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f2026eca310>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f2026ec3e50>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f2026ec3ed0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

Laser amplitude: 6.137836e+11
99.9 grid cells per laser wavelength.
Thermal velocity for this simulation should be on the order of 0.063c.
Simulation prepared.
Distributing electrons nonuniformly.
Distributing protons nonuniformly.
Finished initial distribution of particles.
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_FAST(arg=2, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_METHOD(arg=0, lineno=32)
          10	LOAD_GLOBAL(arg=1, lineno=32)
          12	LOAD_ATTR(arg=2, lineno=32)
          14	CALL_METHOD(arg=1, lineno=32)
          16	STORE_FAST(arg=3, lineno=32)
          18	LOAD_FAST(arg=0, lineno=33)
          20	LOAD_FAST(arg=2, lineno=33)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=33)
          24	LOAD_FAST(arg=3, lineno=33)
          26	BINARY_SUBTRACT(arg=None, lineno=33)
          28	LOAD_METHOD(arg=3, lineno=33)
          30	LOAD_FAST(arg=0, lineno=33)
          32	LOAD_ATTR(arg=4, lineno=33)
          34	LOAD_CONST(arg=1, lineno=33)
          36	BUILD_TUPLE(arg=2, lineno=33)
          38	CALL_METHOD(arg=1, lineno=33)
          40	STORE_FAST(arg=4, lineno=33)
          42	LOAD_CONST(arg=1, lineno=34)
          44	LOAD_FAST(arg=4, lineno=34)
          46	BINARY_SUBTRACT(arg=None, lineno=34)
          48	LOAD_FAST(arg=1, lineno=34)
          50	LOAD_FAST(arg=3, lineno=34)
          52	LOAD_CONST(arg=1, lineno=34)
          54	BINARY_ADD(arg=None, lineno=34)
          56	BINARY_SUBSCR(arg=None, lineno=34)
          58	BINARY_MULTIPLY(arg=None, lineno=34)
          60	LOAD_FAST(arg=4, lineno=35)
          62	LOAD_FAST(arg=1, lineno=35)
          64	LOAD_FAST(arg=3, lineno=35)
          66	LOAD_CONST(arg=2, lineno=35)
          68	BINARY_ADD(arg=None, lineno=35)
          70	BINARY_SUBSCR(arg=None, lineno=35)
          72	BINARY_MULTIPLY(arg=None, lineno=35)
          74	BINARY_ADD(arg=None, lineno=35)
          76	STORE_FAST(arg=5, lineno=35)
          78	LOAD_FAST(arg=5, lineno=36)
          80	RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles2.0', '$dx4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$8load_method.3']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$10load_global.4']
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$8load_method.3', '$12load_attr.5']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=3, lineno=32)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$14call_method.6']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$x_particles18.7', '$dx20.8']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9']
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$22binary_true_divide.9', '$logical_coordinates24.10']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$26binary_subtract.11']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=33)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$28load_method.12']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$x_particles30.13']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$32load_attr.14', '$const34.15']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$28load_method.12', '$36build_tuple.16']
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=STORE_FAST(arg=4, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  stack ['$38call_method.17']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=34)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$const42.18']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=BINARY_SUBTRACT(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack ['$const42.18', '$right_fractions44.19']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=BINARY_ADD(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$logical_coordinates50.22', '$const52.23']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$scalar_field48.21', '$54binary_add.24']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$46binary_subtract.20', '$56binary_subscr.25']
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26']
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$logical_coordinates64.29', '$const66.30']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$scalar_field62.28', '$68binary_add.31']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$right_fractions60.27', '$70binary_subscr.32']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.byteflow DEBUG]  stack ['$58binary_multiply.26', '$72binary_multiply.33']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=STORE_FAST(arg=5, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.byteflow DEBUG]  stack ['$74binary_add.34']
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_FAST(arg=5, lineno=36)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=36)
[numba.core.byteflow DEBUG]  stack ['$field78.35']
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles2.0'}), (4, {'res': '$dx4.1'}), (6, {'lhs': '$x_particles2.0', 'rhs': '$dx4.1', 'res': '$6binary_true_divide.2'}), (8, {'item': '$6binary_true_divide.2', 'res': '$8load_method.3'}), (10, {'res': '$10load_global.4'}), (12, {'item': '$10load_global.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$x_particles18.7'}), (20, {'res': '$dx20.8'}), (22, {'lhs': '$x_particles18.7', 'rhs': '$dx20.8', 'res': '$22binary_true_divide.9'}), (24, {'res': '$logical_coordinates24.10'}), (26, {'lhs': '$22binary_true_divide.9', 'rhs': '$logical_coordinates24.10', 'res': '$26binary_subtract.11'}), (28, {'item': '$26binary_subtract.11', 'res': '$28load_method.12'}), (30, {'res': '$x_particles30.13'}), (32, {'item': '$x_particles30.13', 'res': '$32load_attr.14'}), (34, {'res': '$const34.15'}), (36, {'items': ['$32load_attr.14', '$const34.15'], 'res': '$36build_tuple.16'}), (38, {'func': '$28load_method.12', 'args': ['$36build_tuple.16'], 'res': '$38call_method.17'}), (40, {'value': '$38call_method.17'}), (42, {'res': '$const42.18'}), (44, {'res': '$right_fractions44.19'}), (46, {'lhs': '$const42.18', 'rhs': '$right_fractions44.19', 'res': '$46binary_subtract.20'}), (48, {'res': '$scalar_field48.21'}), (50, {'res': '$logical_coordinates50.22'}), (52, {'res': '$const52.23'}), (54, {'lhs': '$logical_coordinates50.22', 'rhs': '$const52.23', 'res': '$54binary_add.24'}), (56, {'index': '$54binary_add.24', 'target': '$scalar_field48.21', 'res': '$56binary_subscr.25'}), (58, {'lhs': '$46binary_subtract.20', 'rhs': '$56binary_subscr.25', 'res': '$58binary_multiply.26'}), (60, {'res': '$right_fractions60.27'}), (62, {'res': '$scalar_field62.28'}), (64, {'res': '$logical_coordinates64.29'}), (66, {'res': '$const66.30'}), (68, {'lhs': '$logical_coordinates64.29', 'rhs': '$const66.30', 'res': '$68binary_add.31'}), (70, {'index': '$68binary_add.31', 'target': '$scalar_field62.28', 'res': '$70binary_subscr.32'}), (72, {'lhs': '$right_fractions60.27', 'rhs': '$70binary_subscr.32', 'res': '$72binary_multiply.33'}), (74, {'lhs': '$58binary_multiply.26', 'rhs': '$72binary_multiply.33', 'res': '$74binary_add.34'}), (76, {'value': '$74binary_add.34'}), (78, {'res': '$field78.35'}), (80, {'retval': '$field78.35', 'castval': '$80return_value.36'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94680d910>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3177210>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051feeb10>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e2eff50>
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a58de50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.interpreter DEBUG]  label 0:
    x_particles = arg(0, name=x_particles)   ['x_particles']
    scalar_field = arg(1, name=scalar_field) ['scalar_field']
    dx = arg(2, name=dx)                     ['dx']
    $6binary_true_divide.2 = x_particles / dx ['$6binary_true_divide.2', 'dx', 'x_particles']
    $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype) ['$6binary_true_divide.2', '$8load_method.3']
    $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>) ['$10load_global.4']
    $12load_attr.5 = getattr(value=$10load_global.4, attr=int32) ['$10load_global.4', '$12load_attr.5']
    logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$8load_method.3', 'logical_coordinates']
    $22binary_true_divide.9 = x_particles / dx ['$22binary_true_divide.9', 'dx', 'x_particles']
    $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates ['$22binary_true_divide.9', '$26binary_subtract.11', 'logical_coordinates']
    $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape) ['$26binary_subtract.11', '$28load_method.12']
    $32load_attr.14 = getattr(value=x_particles, attr=size) ['$32load_attr.14', 'x_particles']
    $const34.15 = const(int, 1)              ['$const34.15']
    $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)]) ['$32load_attr.14', '$36build_tuple.16', '$const34.15']
    right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None) ['$28load_method.12', '$36build_tuple.16', 'right_fractions']
    $const42.18 = const(int, 1)              ['$const42.18']
    $46binary_subtract.20 = $const42.18 - right_fractions ['$46binary_subtract.20', '$const42.18', 'right_fractions']
    $const52.23 = const(int, 1)              ['$const52.23']
    $54binary_add.24 = logical_coordinates + $const52.23 ['$54binary_add.24', '$const52.23', 'logical_coordinates']
    $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>) ['$54binary_add.24', '$56binary_subscr.25', 'scalar_field']
    $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25 ['$46binary_subtract.20', '$56binary_subscr.25', '$58binary_multiply.26']
    $const66.30 = const(int, 2)              ['$const66.30']
    $68binary_add.31 = logical_coordinates + $const66.30 ['$68binary_add.31', '$const66.30', 'logical_coordinates']
    $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>) ['$68binary_add.31', '$70binary_subscr.32', 'scalar_field']
    $72binary_multiply.33 = right_fractions * $70binary_subscr.32 ['$70binary_subscr.32', '$72binary_multiply.33', 'right_fractions']
    field = $58binary_multiply.26 + $72binary_multiply.33 ['$58binary_multiply.26', '$72binary_multiply.33', 'field']
    $80return_value.36 = cast(value=field)   ['$80return_value.36', 'field']
    return $80return_value.36                ['$80return_value.36']

[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fa94682fb10>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fa94682fe90>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fa946834210>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fa94681ce50>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fa946826790>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fa9468269d0>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fa94680d1d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fa946826d10>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fa94682b110>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fa94682b350>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa94681c910>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fa94682b650>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fa94682b890>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fa94682bc50>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fa94682bd50>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fa94682be50>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa94681c550>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fa94682f210>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fa94682f450>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fa94681cd50>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fa94682f9d0>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fa94682fd50>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fa94680d090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fa94682b550>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fa94682bb10>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fa94682f110>],
             'bool34': [<numba.core.ir.Assign object at 0x7fa9468268d0>],
             'bool58': [<numba.core.ir.Assign object at 0x7fa946807d90>],
             'bool66': [<numba.core.ir.Assign object at 0x7fa94682b250>],
             'bool74': [<numba.core.ir.Assign object at 0x7fa94682b790>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa94681c8d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7fa94682f350>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fa94680d650>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fa9468263d0>,
                            <numba.core.ir.Assign object at 0x7fa94682fb50>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fa94681c790>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fa94681c5d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fa946826c90>],
             'src_index': [<numba.core.ir.Assign object at 0x7fa946826050>,
                           <numba.core.ir.Assign object at 0x7fa94680d5d0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fa94681c410>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fa94681c750>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f18e313fd90>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f18e3142150>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f18e31424d0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f18e312c190>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f18e312ca50>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f18e312cc90>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f18e311b4d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f18e313a1d0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f18e313a3d0>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f18e313a610>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f18e3126ed0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f18e313a910>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f18e313ab50>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f18e313aed0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f18e313afd0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f18e313f110>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f18e3126810>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f18e313f490>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f18e313f6d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f18e312c050>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f18e313fc50>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f18e3142050>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f18e311b3d0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f18e313a810>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f18e313add0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f18e313f390>],
             'bool34': [<numba.core.ir.Assign object at 0x7f18e312cb90>],
             'bool58': [<numba.core.ir.Assign object at 0x7f18e3170d10>],
             'bool66': [<numba.core.ir.Assign object at 0x7f18e313a510>],
             'bool74': [<numba.core.ir.Assign object at 0x7f18e313aa50>],
             'bool8': [<numba.core.ir.Assign object at 0x7f18e3126b90>],
             'bool94': [<numba.core.ir.Assign object at 0x7f18e313f5d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f18e311ba50>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f18e312c690>,
                            <numba.core.ir.Assign object at 0x7f18e313fe10>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f18e3126a50>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f18e3126ad0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f18e312cf50>],
             'src_index': [<numba.core.ir.Assign object at 0x7f18e312c350>,
                           <numba.core.ir.Assign object at 0x7f18e311b9d0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f18e31266d0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f18e3126790>]})
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f9052010890>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f9052010c10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f9052010f90>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f9051fffc10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f9052008550>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f9052008790>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f9051fee190>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f9052008ad0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f9052008e90>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f905200d110>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f9051fff710>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f905200d410>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f905200d650>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f905200d9d0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f905200dad0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f905200dbd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f9051fff350>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f905200df50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f90520101d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f9051fffb10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f9052010750>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f9052010b10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f9051fee050>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f905200d310>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f905200d8d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f905200de50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f9052008690>],
             'bool58': [<numba.core.ir.Assign object at 0x7f9051fe8c90>],
             'bool66': [<numba.core.ir.Assign object at 0x7f9052008fd0>],
             'bool74': [<numba.core.ir.Assign object at 0x7f905200d550>],
             'bool8': [<numba.core.ir.Assign object at 0x7f9051fff6d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f90520100d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f9051fee590>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f9052008190>,
                            <numba.core.ir.Assign object at 0x7f9052010910>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f9051fff590>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f9051fff3d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f9052008a50>],
             'src_index': [<numba.core.ir.Assign object at 0x7f9051fffdd0>,
                           <numba.core.ir.Assign object at 0x7f9051fee510>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f9051fff210>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f9051fff550>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fd90e1abb90>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fd90e1abf10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fd90e1b0290>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fd90e195f50>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fd90e1a2890>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fd90e1a2ad0>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fd90e187210>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fd90e1f2f10>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fd90e1a6210>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fd90e1a6450>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fd90e195d50>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fd90e1a6750>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fd90e1a6990>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fd90e1a6d10>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fd90e1a6e10>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fd90e1a6f10>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fd90e195690>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fd90e1ab2d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fd90e1ab510>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fd90e195e50>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fd90e1aba50>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fd90e1abdd0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fd90e1875d0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fd90e1a6650>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fd90e1a6c10>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fd90e1ab1d0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fd90e1a29d0>],
             'bool58': [<numba.core.ir.Assign object at 0x7fd90e187350>],
             'bool66': [<numba.core.ir.Assign object at 0x7fd90e1a6350>],
             'bool74': [<numba.core.ir.Assign object at 0x7fd90e1a6890>],
             'bool8': [<numba.core.ir.Assign object at 0x7fd90e195a10>],
             'bool94': [<numba.core.ir.Assign object at 0x7fd90e1ab410>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fd90e187810>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fd90e1a24d0>,
                            <numba.core.ir.Assign object at 0x7fd90e1abbd0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fd90e195990>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fd90e195950>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fd90e1a2d90>],
             'src_index': [<numba.core.ir.Assign object at 0x7fd90e1a2150>,
                           <numba.core.ir.Assign object at 0x7fd90e187790>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fd90e195510>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fd90e195490>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f260a0bd950>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f260a0bdcd0>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f260a0c2090>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f260a0aad10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f260a0b4610>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f260a0b4850>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f260a09b1d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f260a0b4b90>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f260a0b4f50>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f260a0b91d0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f260a0aaa90>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f260a0b94d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f260a0b9710>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f260a0b9a90>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f260a0b9b90>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f260a0b9c90>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f260a0aa3d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f260a0bd050>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f260a0bd290>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f260a0aabd0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f260a0bd810>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f260a0bdbd0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f260a09b090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f260a0b93d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f260a0b9990>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f260a0b9f10>],
             'bool34': [<numba.core.ir.Assign object at 0x7f260a0b4750>],
             'bool58': [<numba.core.ir.Assign object at 0x7f260a095d50>],
             'bool66': [<numba.core.ir.Assign object at 0x7f260a0b90d0>],
             'bool74': [<numba.core.ir.Assign object at 0x7f260a0b9610>],
             'bool8': [<numba.core.ir.Assign object at 0x7f260a0aa750>],
             'bool94': [<numba.core.ir.Assign object at 0x7f260a0bd190>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f260a09b610>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f260a0b4250>,
                            <numba.core.ir.Assign object at 0x7f260a0bd9d0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f260a0aa5d0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f260a0aa450>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f260a0b4b10>],
             'src_index': [<numba.core.ir.Assign object at 0x7f260a0aaed0>,
                           <numba.core.ir.Assign object at 0x7f260a09b590>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f260a0aa290>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f260a0aa710>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7ffb7a5b7b50>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7ffb7a5b7ed0>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7ffb7a5bb290>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7ffb7a5a1f10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a5ae810>],
             '$34pred': [<numba.core.ir.Assign object at 0x7ffb7a5aea50>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7ffb7a593410>],
             '$58pred': [<numba.core.ir.Assign object at 0x7ffb7a5aed90>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a5b4190>],
             '$66pred': [<numba.core.ir.Assign object at 0x7ffb7a5b43d0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a5a1cd0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a5b46d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7ffb7a5b4910>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7ffb7a5b4c90>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7ffb7a5b4d90>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7ffb7a5b4e90>],
             '$8pred': [<numba.core.ir.Assign object at 0x7ffb7a5a1b10>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a5b7250>],
             '$94pred': [<numba.core.ir.Assign object at 0x7ffb7a5b7490>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7ffb7a5a1dd0>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7ffb7a5b7a10>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7ffb7a5b7dd0>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7ffb7a5932d0>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7ffb7a5b45d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7ffb7a5b4b90>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7ffb7a5b7150>],
             'bool34': [<numba.core.ir.Assign object at 0x7ffb7a5ae950>],
             'bool58': [<numba.core.ir.Assign object at 0x7ffb7a5ae790>],
             'bool66': [<numba.core.ir.Assign object at 0x7ffb7a5b42d0>],
             'bool74': [<numba.core.ir.Assign object at 0x7ffb7a5b4810>],
             'bool8': [<numba.core.ir.Assign object at 0x7ffb7a5a1810>],
             'bool94': [<numba.core.ir.Assign object at 0x7ffb7a5b7390>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7ffb7a5938d0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7ffb7a5ae450>,
                            <numba.core.ir.Assign object at 0x7ffb7a5b7bd0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7ffb7a5a1850>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7ffb7a5a16d0>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7ffb7a5aed10>],
             'src_index': [<numba.core.ir.Assign object at 0x7ffb7a5ae110>,
                           <numba.core.ir.Assign object at 0x7ffb7a593850>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7ffb7a5a1510>],
             'src_shape': [<numba.core.ir.Assign object at 0x7ffb7a5a1990>]})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  SSA violators {'dest_index', 'src_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa94680d890>],
             104: [<numba.core.ir.Assign object at 0x7fa946834b50>]})
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f18e311b690>],
             104: [<numba.core.ir.Assign object at 0x7f18e3142cd0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f9051feed10>],
             104: [<numba.core.ir.Assign object at 0x7f9051fa28d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fd90e187e50>],
             104: [<numba.core.ir.Assign object at 0x7fd90e1b0b50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f260a09b8d0>],
             104: [<numba.core.ir.Assign object at 0x7f260a0f1a10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7ffb7a5bb9d0>],
             104: [<numba.core.ir.Assign object at 0x7ffb7a5bb310>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e96894650>
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: x_particles = arg(0, name=x_particles)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: scalar_field = arg(1, name=scalar_field)
[numba.core.ssa DEBUG]  on stmt: dx = arg(2, name=dx)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $8load_method.3 = getattr(value=$6binary_true_divide.2, attr=astype)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $10load_global.4 = global(np: <module 'numpy' from '/home/oblandino/anaconda3/envs/pythonpic/lib/python3.7/site-packages/numpy/__init__.py'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  on stmt: $12load_attr.5 = getattr(value=$10load_global.4, attr=int32)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: logical_coordinates = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, field_interpolation.py:32)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $22binary_true_divide.9 = x_particles / dx
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $26binary_subtract.11 = $22binary_true_divide.9 - logical_coordinates
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $28load_method.12 = getattr(value=$26binary_subtract.11, attr=reshape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $32load_attr.14 = getattr(value=x_particles, attr=size)
[numba.core.ssa DEBUG]  on stmt: $const34.15 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $36build_tuple.16 = build_tuple(items=[Var($32load_attr.14, field_interpolation.py:33), Var($const34.15, field_interpolation.py:33)])
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: right_fractions = call $28load_method.12($36build_tuple.16, func=$28load_method.12, args=[Var($36build_tuple.16, field_interpolation.py:33)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const42.18 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $46binary_subtract.20 = $const42.18 - right_fractions
[numba.core.ssa DEBUG]  on stmt: $const52.23 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $54binary_add.24 = logical_coordinates + $const52.23
[numba.core.ssa DEBUG]  on stmt: $56binary_subscr.25 = getitem(value=scalar_field, index=$54binary_add.24, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $58binary_multiply.26 = $46binary_subtract.20 * $56binary_subscr.25
[numba.core.ssa DEBUG]  on stmt: $const66.30 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $68binary_add.31 = logical_coordinates + $const66.30
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $70binary_subscr.32 = getitem(value=scalar_field, index=$68binary_add.31, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: $72binary_multiply.33 = right_fractions * $70binary_subscr.32
[numba.core.ssa DEBUG]  on stmt: field = $58binary_multiply.26 + $72binary_multiply.33
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $80return_value.36 = cast(value=field)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9052010ed0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1e3c50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $80return_value.36
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10load_global.4': [<numba.core.ir.Assign object at 0x7f1e96943e50>],
             '$12load_attr.5': [<numba.core.ir.Assign object at 0x7f1e96943bd0>],
             '$22binary_true_divide.9': [<numba.core.ir.Assign object at 0x7f1e968d8c50>],
             '$26binary_subtract.11': [<numba.core.ir.Assign object at 0x7f1e968d8e10>],
             '$28load_method.12': [<numba.core.ir.Assign object at 0x7f1e968d8ed0>],
             '$32load_attr.14': [<numba.core.ir.Assign object at 0x7f1e968f7110>],
             '$36build_tuple.16': [<numba.core.ir.Assign object at 0x7f1e968f7390>],
             '$46binary_subtract.20': [<numba.core.ir.Assign object at 0x7f1e968f77d0>],
             '$54binary_add.24': [<numba.core.ir.Assign object at 0x7f1e968f7b90>],
             '$56binary_subscr.25': [<numba.core.ir.Assign object at 0x7f1e968f7c90>],
             '$58binary_multiply.26': [<numba.core.ir.Assign object at 0x7f1e968f7d90>],
             '$68binary_add.31': [<numba.core.ir.Assign object at 0x7f1e968fb210>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f1e968d31d0>],
             '$70binary_subscr.32': [<numba.core.ir.Assign object at 0x7f1e968fb310>],
             '$72binary_multiply.33': [<numba.core.ir.Assign object at 0x7f1e968fb410>],
             '$80return_value.36': [<numba.core.ir.Assign object at 0x7f1e968fb7d0>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7f1e96943810>],
             '$const34.15': [<numba.core.ir.Assign object at 0x7f1e968f7210>],
             '$const42.18': [<numba.core.ir.Assign object at 0x7f1e968f7610>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7f1e968f7a50>],
             '$const66.30': [<numba.core.ir.Assign object at 0x7f1e968fb110>],
             'dx': [<numba.core.ir.Assign object at 0x7f1e968d3d50>],
             'field': [<numba.core.ir.Assign object at 0x7f1e968fb510>],
             'logical_coordinates': [<numba.core.ir.Assign object at 0x7f1e96943650>],
             'right_fractions': [<numba.core.ir.Assign object at 0x7f1e968f7490>],
             'scalar_field': [<numba.core.ir.Assign object at 0x7f1e968d3ed0>],
             'x_particles': [<numba.core.ir.Assign object at 0x7f1e968d8bd0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa946867110>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa94680d910>],
             104: [<numba.core.ir.Assign object at 0x7fa9468344d0>]})
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9052042890>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e1f2d90>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f9051fe8fd0>],
             104: [<numba.core.ir.Assign object at 0x7f9051fa20d0>]})
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fd90e187fd0>],
             104: [<numba.core.ir.Assign object at 0x7fd90e1b0450>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e31772d0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f18e313f1d0>],
             104: [<numba.core.ir.Assign object at 0x7f18e30d2250>]})
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a0f1790>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a5b4f50>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f260a095d90>],
             104: [<numba.core.ir.Assign object at 0x7f260a0c2210>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7ffb7a5bb550>],
             104: [<numba.core.ir.Assign object at 0x7ffb7a593d90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa946807d10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1870d0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e311bdd0>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fff850>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a0aa8d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a58de10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f203429c510>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f2026e99b90>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f2026e99f10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f2026e9d2d0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f2026e84f10>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f2026e90810>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f2026e90a50>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f2026e762d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f2026e90d90>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f2026e96190>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f2026e963d0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f2026e849d0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f2026e966d0>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f2026e96910>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f2026e96cd0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f2026e96dd0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f2026e96ed0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f2026e84610>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f2026e99290>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f2026e994d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f2026e84e10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f2026e99a50>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f2026e99e10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f2026e76190>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f2026e965d0>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f2026e96b90>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f2026e99190>],
             'bool34': [<numba.core.ir.Assign object at 0x7f2026e90950>],
             'bool58': [<numba.core.ir.Assign object at 0x7f2026e90790>],
             'bool66': [<numba.core.ir.Assign object at 0x7f2026e962d0>],
             'bool74': [<numba.core.ir.Assign object at 0x7f2026e96810>],
             'bool8': [<numba.core.ir.Assign object at 0x7f2026e84990>],
             'bool94': [<numba.core.ir.Assign object at 0x7f2026e993d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f2026e76790>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f2026e90450>,
                            <numba.core.ir.Assign object at 0x7f2026e99c10>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f2026e84850>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f2026e84690>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f2026e90d10>],
             'src_index': [<numba.core.ir.Assign object at 0x7f2026e90110>,
                           <numba.core.ir.Assign object at 0x7f2026e76710>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f2026e844d0>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f2026e84810>]})
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f2026e760d0>],
             104: [<numba.core.ir.Assign object at 0x7f2026e9dd10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026ed1050>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f2026e76d50>],
             104: [<numba.core.ir.Assign object at 0x7f2026e9d890>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=1, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.byteflow DEBUG]  stack ['$x_particles_12.0', '$dx_14.1']
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_12.0'}), (4, {'res': '$dx_14.1'}), (6, {'lhs': '$x_particles_12.0', 'rhs': '$dx_14.1', 'res': '$6binary_true_divide.2'}), (8, {'retval': '$6binary_true_divide.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.interpreter DEBUG]  label 0:
    dx_1 = arg(0, name=dx_1)                 ['dx_1']
    x_particles_1 = arg(1, name=x_particles_1) ['x_particles_1']
    $6binary_true_divide.2 = x_particles_1 / dx_1 ['$6binary_true_divide.2', 'dx_1', 'x_particles_1']
    $8return_value.3 = cast(value=$6binary_true_divide.2) ['$6binary_true_divide.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e96827290>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: dx_1 = arg(0, name=dx_1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: x_particles_1 = arg(1, name=x_particles_1)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_1 / dx_1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_true_divide.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f1e96833050>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f1e96833190>],
             'dx_1': [<numba.core.ir.Assign object at 0x7f1e96827d10>],
             'x_particles_1': [<numba.core.ir.Assign object at 0x7f1e96827d90>]})
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026e99590>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$src_ndim2.0', '$dest_ndim4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
[numba.core.byteflow DEBUG]  stack ['$6compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
[numba.core.byteflow DEBUG]  stack ['$const10.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=14 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
[numba.core.byteflow DEBUG]  stack ['$const14.0']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$dest_ndim18.1', '$src_ndim20.2']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
[numba.core.byteflow DEBUG]  stack ['$22binary_subtract.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=26 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$src_index28.0', '$src_ndim30.1']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
[numba.core.byteflow DEBUG]  stack ['$32compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$src_shape36.0', '$src_index38.1']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
[numba.core.byteflow DEBUG]  stack ['$40binary_subscr.2']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$dest_shape44.3', '$dest_index46.4']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
[numba.core.byteflow DEBUG]  stack ['$48binary_subscr.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$dest_dim_size52.6', '$const54.7']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
[numba.core.byteflow DEBUG]  stack ['$56compare_op.8']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size60.0', '$dest_dim_size62.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$64compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
[numba.core.byteflow DEBUG]  stack ['$dest_index124.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size68.0', '$const70.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
[numba.core.byteflow DEBUG]  stack ['$72compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$src_index104.0', '$const106.1']
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
[numba.core.byteflow DEBUG]  stack ['$108inplace_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$dest_index112.3', '$const114.4']
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
[numba.core.byteflow DEBUG]  stack ['$116inplace_add.5']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
[numba.core.byteflow DEBUG]  stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$dest_index76.0', '$const78.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$80binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
[numba.core.byteflow DEBUG]  stack ['$82unary_negative.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e967ff490>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7f1e967ffa90>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7f1e967ffe10>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7f1e968041d0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7f1e967ebe50>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7f1e967f6750>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f1e967f6990>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7f1e967dd1d0>],
             '$58pred': [<numba.core.ir.Assign object at 0x7f1e967f6cd0>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7f1e967fb0d0>],
             '$66pred': [<numba.core.ir.Assign object at 0x7f1e967fb310>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7f1e967ebbd0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7f1e967fb610>],
             '$74pred': [<numba.core.ir.Assign object at 0x7f1e967fb850>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7f1e967fbbd0>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7f1e967fbcd0>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7f1e967fbdd0>],
             '$8pred': [<numba.core.ir.Assign object at 0x7f1e967eb510>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f1e967ff190>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f1e967ff3d0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7f1e967ebd10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7f1e967ff950>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7f1e967ffd10>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7f1e967dd090>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7f1e967fb510>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7f1e967fbad0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f1e967ff090>],
             'bool34': [<numba.core.ir.Assign object at 0x7f1e967f6890>],
             'bool58': [<numba.core.ir.Assign object at 0x7f1e967d7e10>],
             'bool66': [<numba.core.ir.Assign object at 0x7f1e967fb210>],
             'bool74': [<numba.core.ir.Assign object at 0x7f1e967fb750>],
             'bool8': [<numba.core.ir.Assign object at 0x7f1e967eb890>],
             'bool94': [<numba.core.ir.Assign object at 0x7f1e967ff2d0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7f1e967dd6d0>],
             'dest_index': [<numba.core.ir.Assign object at 0x7f1e967f6390>,
                            <numba.core.ir.Assign object at 0x7f1e967ffb10>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7f1e967eb710>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7f1e967eb590>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7f1e967f6c50>],
             'src_index': [<numba.core.ir.Assign object at 0x7f1e967f6050>,
                           <numba.core.ir.Assign object at 0x7f1e967dd650>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7f1e967eb350>],
             'src_shape': [<numba.core.ir.Assign object at 0x7f1e967eb810>]})
[numba.core.ssa DEBUG]  SSA violators {'src_index', 'dest_index'}
[numba.core.ssa DEBUG]  Fix SSA violator on var src_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  first assign: src_index
[numba.core.ssa DEBUG]  replaced with: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index = $108inplace_add.2
[numba.core.ssa DEBUG]  replaced with: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f1e967d7c50>],
             104: [<numba.core.ir.Assign object at 0x7f1e968049d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def src_index = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96833a10>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.ssa DEBUG]  Fix SSA violator on var dest_index
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  first assign: dest_index
[numba.core.ssa DEBUG]  replaced with: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index = $116inplace_add.5
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.ssa DEBUG]  replaced with: dest_index.1 = $116inplace_add.5
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967ddc50>
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7f1e967dda90>],
             104: [<numba.core.ir.Assign object at 0x7f1e96804550>]})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.ssa DEBUG]  on stmt: src_ndim = arg(0, name=src_ndim)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: src_shape = arg(1, name=src_shape)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.ssa DEBUG]  on stmt: dest_ndim = arg(2, name=dest_ndim)
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.ssa DEBUG]  on stmt: dest_shape = arg(3, name=dest_shape)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $6compare_op.2 = src_ndim > dest_ndim
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: bool8 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  on stmt: branch $8pred, 10, 14
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: $const10.0 = const(int, 0)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $12return_value.1 = cast(value=$const10.0)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: return $12return_value.1
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 14
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: src_index = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  on stmt: jump 26
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 26
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 28
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
[numba.core.ssa DEBUG]  on stmt: $32compare_op.2 = src_index.2 < src_ndim
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 122
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  find_def_from_top label 28
[numba.core.ssa DEBUG]  insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 26
[numba.core.ssa DEBUG]  find_def_from_top label 26
[numba.core.ssa DEBUG]  idom 14 from label 26
[numba.core.ssa DEBUG]  find_def_from_bottom label 14
[numba.core.ssa DEBUG]  incoming_def dest_index = dest_ndim - src_ndim
[numba.core.ssa DEBUG]  replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const54.7 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $56compare_op.8 = dest_dim_size != $const54.7
[numba.core.ssa DEBUG]  on stmt: bool58 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $58pred, 60, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
[numba.core.ssa DEBUG]  on stmt: bool66 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $66pred, 68, 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 68
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: $const70.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $72compare_op.2 = src_dim_size != $const70.1
[numba.core.ssa DEBUG]  on stmt: bool74 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: branch $74pred, 76, 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94677eb90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e308ae10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 76
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: $const78.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051ee6990>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e0fac90>
[numba.core.ssa DEBUG]  on stmt: $80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  find_def_from_top label 76
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  idom 68 from label 76
[numba.core.ssa DEBUG]  find_def_from_bottom label 68
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  find_def_from_top label 68
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  idom 60 from label 68
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  idom 36 from label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f91a10>
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fa94679d310>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa94679d3d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa946798f90>],
             'align': [<numba.core.ir.Assign object at 0x7fa946798d50>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fa946798c10>],
             'size': [<numba.core.ir.Assign object at 0x7fa946798c90>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f18e30ac610>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f18e30ac710>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f18e30ac310>],
             'align': [<numba.core.ir.Assign object at 0x7f18e30ac110>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f18e30a6f90>],
             'size': [<numba.core.ir.Assign object at 0x7f18e30ac050>]})
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f9051f7f0d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f9051f7f1d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f9051f79d90>],
             'align': [<numba.core.ir.Assign object at 0x7f9051f79b50>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f9051f79a10>],
             'size': [<numba.core.ir.Assign object at 0x7f9051f79a90>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fd90e1193d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fd90e119490>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fd90e1190d0>],
             'align': [<numba.core.ir.Assign object at 0x7fd90e112e90>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fd90e112d50>],
             'size': [<numba.core.ir.Assign object at 0x7fd90e112dd0>]})
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  replaced with: $80binary_add.2 = dest_index.2 + $const78.1
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $84return_value.4
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f260a02b1d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f260a02b2d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f260a026e90>],
             'align': [<numba.core.ir.Assign object at 0x7f260a026c90>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f260a026a90>],
             'size': [<numba.core.ir.Assign object at 0x7f260a026b50>]})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = src_dim_size != $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a506c10>
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 104
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 36 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7ffb7a525350>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7ffb7a525450>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7ffb7a51efd0>],
             'align': [<numba.core.ir.Assign object at 0x7ffb7a51ee10>],
             'arrtype': [<numba.core.ir.Assign object at 0x7ffb7a51ecd0>],
             'size': [<numba.core.ir.Assign object at 0x7ffb7a51ed50>]})
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: dest_shape[dest_index.2] = src_dim_size
[numba.core.ssa DEBUG]  on stmt: jump 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: $const106.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: src_index.1 = $108inplace_add.2
[numba.core.ssa DEBUG]  on stmt: $const114.4 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 104
[numba.core.ssa DEBUG]  idom 36 from label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 28 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: dest_index.1 = $116inplace_add.5
[numba.core.ssa DEBUG]  on stmt: jump 28
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 122
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: jump 124
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 124
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1ea3c3e950>
[numba.core.ssa DEBUG]  on stmt: $126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
[numba.core.ssa DEBUG]  find_def_from_top label 124
[numba.core.ssa DEBUG]  idom 122 from label 124
[numba.core.ssa DEBUG]  find_def_from_bottom label 122
[numba.core.ssa DEBUG]  find_def_from_top label 122
[numba.core.ssa DEBUG]  idom 28 from label 122
[numba.core.ssa DEBUG]  find_def_from_bottom label 28
[numba.core.ssa DEBUG]  replaced with: $126return_value.1 = cast(value=dest_index.2)
[numba.core.ssa DEBUG]  on stmt: return $126return_value.1
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94671f990>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e302ec50>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051f00790>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e09ba50>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa9467261d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa94671fd90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa946726110>],
             'align': [<numba.core.ir.Assign object at 0x7fa94671fc50>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fa94671fb90>],
             'cls': [<numba.core.ir.Assign object at 0x7fa94671fb10>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f18e3035490>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f18e3035090>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f18e30353d0>],
             'align': [<numba.core.ir.Assign object at 0x7f18e302ef50>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f18e302ee90>],
             'cls': [<numba.core.ir.Assign object at 0x7f18e302ee10>]})
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609fac810>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f9051f00f90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f9051f00b90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f9051f00e90>],
             'align': [<numba.core.ir.Assign object at 0x7f9051f00a50>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f9051f00990>],
             'cls': [<numba.core.ir.Assign object at 0x7f9051f00910>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fd90e0a2210>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fd90e09be10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fd90e0a2150>],
             'align': [<numba.core.ir.Assign object at 0x7fd90e09bcd0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fd90e09bb90>],
             'cls': [<numba.core.ir.Assign object at 0x7fd90e09b210>]})
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f2609fb3090>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2609facc10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f2609facf50>],
             'align': [<numba.core.ir.Assign object at 0x7f2609faca90>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f2609fac9d0>],
             'cls': [<numba.core.ir.Assign object at 0x7f2609fac950>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a4a6a10>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7ffb7a4ad190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7ffb7a4a6d10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7ffb7a4ad090>],
             'align': [<numba.core.ir.Assign object at 0x7ffb7a4a6bd0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7ffb7a4a6b10>],
             'cls': [<numba.core.ir.Assign object at 0x7ffb7a4a6a90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026de8c90>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f2026e073d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f2026e07490>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f2026e07090>],
             'align': [<numba.core.ir.Assign object at 0x7f2026e00e50>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f2026e00d10>],
             'size': [<numba.core.ir.Assign object at 0x7f2026e00d90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026d89b50>
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f2026d902d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2026d89f10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f2026d90210>],
             'align': [<numba.core.ir.Assign object at 0x7f2026d89dd0>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f2026d89d10>],
             'cls': [<numba.core.ir.Assign object at 0x7f2026d89c90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa94669acd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e2fa6e10>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051e7e810>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e019a90>
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fa9466a4b10>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa9466a4c10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fa9466a4950>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fa9466a4510>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fa9466a4590>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fa9466a4650>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f18e2fb0dd0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f18e2fb0f10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f18e2fb0c10>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f18e2fb0090>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f18e2fb0850>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f18e2fb0910>]})
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f9051e858d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f9051e85a10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f9051e85710>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f9051e7e090>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f9051e85350>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f9051e85410>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7fd90e020910>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fd90e020a50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7fd90e020750>],
             'dx_2': [<numba.core.ir.Assign object at 0x7fd90e019190>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7fd90e020350>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7fd90e020450>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f2ad90>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a420f90>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f2609f31910>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f2609f31a50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f2609f31750>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f2609f2a910>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f2609f2a1d0>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f2609f31450>]})
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7ffb7a429b50>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7ffb7a429c90>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7ffb7a429990>],
             'dx_2': [<numba.core.ir.Assign object at 0x7ffb7a420390>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7ffb7a4295d0>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7ffb7a429690>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026d03b50>
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f2026d0cc10>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f2026d0cd10>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f2026d0ca50>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f2026d03390>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f2026d0c690>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f2026d0c750>]})
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3664)
           2	LOAD_FAST(arg=0, lineno=3664)
           4	LOAD_METHOD(arg=0, lineno=3664)
           6	LOAD_FAST(arg=1, lineno=3664)
           8	LOAD_FAST(arg=2, lineno=3664)
          10	CALL_METHOD(arg=2, lineno=3664)
          12	RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$arrtype2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$4load_method.1', '$size6.2', '$align8.3']
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3664)
[numba.core.byteflow DEBUG]  stack ['$10call_method.4']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e966d3ad0>
[numba.core.ssa DEBUG]  on stmt: arrtype = arg(0, name=arrtype)
[numba.core.ssa DEBUG]  on stmt: size = arg(1, name=size)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
[numba.core.ssa DEBUG]  on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3664), Var(align, arrayobj.py:3664)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10call_method.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f1e9676d250>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f1e9676d350>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7f1e96768f10>],
             'align': [<numba.core.ir.Assign object at 0x7f1e96768d10>],
             'arrtype': [<numba.core.ir.Assign object at 0x7f1e96768bd0>],
             'size': [<numba.core.ir.Assign object at 0x7f1e96768c50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=3657)
           2	LOAD_GLOBAL(arg=0, lineno=3657)
           4	LOAD_FAST(arg=1, lineno=3657)
           6	LOAD_FAST(arg=2, lineno=3657)
           8	CALL_FUNCTION(arg=2, lineno=3657)
          10	RETURN_VALUE(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3657)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3657)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1']
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3657)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3657)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$8call_function.3']
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.interpreter DEBUG]  label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e966ef990>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: cls = arg(0, name=cls)
[numba.core.ssa DEBUG]  on stmt: allocsize = arg(1, name=allocsize)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: align = arg(2, name=align)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa953d12210>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e3107a50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3657), Var(align, arrayobj.py:3657)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $10return_value.4 = cast(value=$8call_function.3)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: return $10return_value.4
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f1e966f6190>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7f1e966efd90>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7f1e966f60d0>],
             'align': [<numba.core.ir.Assign object at 0x7f1e966efc50>],
             'allocsize': [<numba.core.ir.Assign object at 0x7f1e966efb90>],
             'cls': [<numba.core.ir.Assign object at 0x7f1e966efb10>]})
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051fc7dd0>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90e175690>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fa94664ee50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fa9466520d0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fa9467fa7d0>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fa946652d10>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fa946655190>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fa946655310>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fa946655550>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fa946655a50>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fa946655c90>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fa9467fa250>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fa946655f50>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fa94678c590>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fa94678c550>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fa94678c450>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fa94686d950>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fa94686d590>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa94686df50>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fa94686d050>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fa9466bb4d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fa9466bbc50>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fa9466bbfd0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fa94664a550>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fa94664a9d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fa94664ac10>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fa94664af50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fa94664e1d0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fa94664e2d0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fa94664e510>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fa94664e890>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fa94664ead0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fa946652510>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fa946652e10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fa946655410>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fa946655b50>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fa946655e50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fa9466bb910>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fa9466bbe90>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fa94664a8d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fa94664e3d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fa94664e790>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fa94664ed50>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fa953c04090>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fa94686dc90>],
             'ax': [<numba.core.ir.Assign object at 0x7fa94686d150>],
             'bool102': [<numba.core.ir.Assign object at 0x7fa94664ef90>],
             'bool140': [<numba.core.ir.Assign object at 0x7fa946655090>],
             'bool34': [<numba.core.ir.Assign object at 0x7fa9466bb790>],
             'bool68': [<numba.core.ir.Assign object at 0x7fa94664ab10>],
             'bool76': [<numba.core.ir.Assign object at 0x7fa94664e0d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7fa94664e9d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7fa946652290>,
                          <numba.core.ir.Assign object at 0x7fa9466529d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7fa9467fa0d0>,
                            <numba.core.ir.Assign object at 0x7fa94664a210>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fa94664a250>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fa9467fa610>,
                               <numba.core.ir.Assign object at 0x7fa946858b10>],
             'ok': [<numba.core.ir.Assign object at 0x7fa946652610>,
                    <numba.core.ir.Assign object at 0x7fa946652f10>],
             'origsize': [<numba.core.ir.Assign object at 0x7fa9467e4f10>],
             's': [<numba.core.ir.Assign object at 0x7fa9466bbb10>],
             'shape': [<numba.core.ir.Assign object at 0x7fa9467fadd0>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f18e2f61050>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f18e2f61290>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f18e317db10>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f18e2f61ed0>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f18e2f65350>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f18e2f654d0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f18e2f65710>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f18e2f65bd0>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f18e2f65e10>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f18e317d950>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f18e2f6a150>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f18e317d790>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f18e3107b90>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f18e3107610>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f18e3107950>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f18e3107090>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f18e3107e50>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f18e3107350>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f18e311bc10>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f18e30fce10>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f18e30fc4d0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f18e30fc690>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f18e2fc9b90>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f18e2fc9dd0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f18e2f5e150>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f18e2f5e390>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f18e2f5e490>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f18e2f5e6d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f18e2f5ea50>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f18e2f5ec90>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f18e2f616d0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f18e2f61fd0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f18e2f655d0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f18e2f65cd0>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f18e2f65fd0>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f18e311b310>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f18e30fcc10>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f18e2fc9a90>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f18e2f5e590>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f18e2f5e950>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f18e2f5ef10>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f18e317de10>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f18e31077d0>],
             'ax': [<numba.core.ir.Assign object at 0x7f18e3107f50>],
             'bool102': [<numba.core.ir.Assign object at 0x7f18e2f61190>],
             'bool140': [<numba.core.ir.Assign object at 0x7f18e2f65250>],
             'bool34': [<numba.core.ir.Assign object at 0x7f18e30fc590>],
             'bool68': [<numba.core.ir.Assign object at 0x7f18e2fc9cd0>],
             'bool76': [<numba.core.ir.Assign object at 0x7f18e2f5e290>],
             'bool94': [<numba.core.ir.Assign object at 0x7f18e2f5eb90>],
             'inferred': [<numba.core.ir.Assign object at 0x7f18e2f61450>,
                          <numba.core.ir.Assign object at 0x7f18e2f61b90>],
             'known_size': [<numba.core.ir.Assign object at 0x7f18e309c590>,
                            <numba.core.ir.Assign object at 0x7f18e30fc6d0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f18e30fc510>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f18e309c750>,
                               <numba.core.ir.Assign object at 0x7f18e3107450>],
             'ok': [<numba.core.ir.Assign object at 0x7f18e2f617d0>,
                    <numba.core.ir.Assign object at 0x7f18e2f65110>],
             'origsize': [<numba.core.ir.Assign object at 0x7f18e3177d90>],
             's': [<numba.core.ir.Assign object at 0x7f18e3107550>],
             'shape': [<numba.core.ir.Assign object at 0x7f18e309cb90>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  SSA violators {'ok', 'inferred', 'num_neg_value', 'known_size'}
[numba.core.ssa DEBUG]  SSA violators {'ok', 'inferred', 'num_neg_value', 'known_size'}
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f9051e2fd10>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f9051e2ff50>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f9051fdb310>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f9051e33bd0>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f9051e36050>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f9051e361d0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f9051e36410>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f9051e36910>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f9051e36b50>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f9051fdb510>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f9051e36e10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f9051fdbe10>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f9051fdbc10>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f9051fdbf90>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f9051fdbd10>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f9051fc7ed0>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f9051fc7bd0>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f9051fc7e10>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f9051e9c690>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f9051e9c710>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f9051e9ce90>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f9051e2b410>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f9051e2b890>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f9051e2bad0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f9051e2be10>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f9051e2f090>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f9051e2f190>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f9051e2f3d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f9051e2f750>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f9051e2f990>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f9051e333d0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f9051e33cd0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f9051e362d0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f9051e36a10>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f9051e36d10>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f9051e9c850>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f9051e9cd50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f9051e2b790>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f9051e2f290>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f9051e2f650>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f9051e2fc10>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f9051fdb810>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f9051fc7910>],
             'ax': [<numba.core.ir.Assign object at 0x7f9051fc7a50>],
             'bool102': [<numba.core.ir.Assign object at 0x7f9051e2fe50>],
             'bool140': [<numba.core.ir.Assign object at 0x7f9051e33f10>],
             'bool34': [<numba.core.ir.Assign object at 0x7f9051e9c2d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7f9051e2b9d0>],
             'bool76': [<numba.core.ir.Assign object at 0x7f9051e2bf50>],
             'bool94': [<numba.core.ir.Assign object at 0x7f9051e2f890>],
             'inferred': [<numba.core.ir.Assign object at 0x7f9051e33150>,
                          <numba.core.ir.Assign object at 0x7f9051e33890>],
             'known_size': [<numba.core.ir.Assign object at 0x7f9051fd6390>,
                            <numba.core.ir.Assign object at 0x7f9051e9cf90>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f9051e2b110>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f9051f69d10>,
                               <numba.core.ir.Assign object at 0x7f9051e9ca90>],
             'ok': [<numba.core.ir.Assign object at 0x7f9051e334d0>,
                    <numba.core.ir.Assign object at 0x7f9051e33dd0>],
             'origsize': [<numba.core.ir.Assign object at 0x7f9051f69410>],
             's': [<numba.core.ir.Assign object at 0x7f9051e9c9d0>],
             'shape': [<numba.core.ir.Assign object at 0x7f9051f69250>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fd90dfcac10>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fd90dfcae50>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fd90e175810>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fd90dfcead0>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fd90dfcef10>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fd90dfd10d0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fd90dfd1310>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fd90dfd17d0>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fd90dfd1a10>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fd90e175e90>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fd90dfd1d10>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fd90e175fd0>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fd90e1084d0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fd90e108250>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fd90e108150>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fd90e1e9ad0>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fd90e1e9b50>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fd90e1e9450>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fd90e037710>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fd90e037690>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fd90e037e10>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fd90dfc6310>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fd90dfc6790>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fd90dfc69d0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fd90dfc6d10>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fd90dfc6f50>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fd90dfca090>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fd90dfca2d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fd90dfca650>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fd90dfca890>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fd90dfce2d0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fd90dfcebd0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fd90dfd11d0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fd90dfd18d0>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fd90dfd1bd0>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fd90e037ad0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fd90e037cd0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fd90dfc6690>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fd90dfca190>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fd90dfca550>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fd90dfcab10>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fd90e175710>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fd90e108350>],
             'ax': [<numba.core.ir.Assign object at 0x7fd90e1e9c90>],
             'bool102': [<numba.core.ir.Assign object at 0x7fd90dfcad50>],
             'bool140': [<numba.core.ir.Assign object at 0x7fd90dfcee10>],
             'bool34': [<numba.core.ir.Assign object at 0x7fd90e037950>],
             'bool68': [<numba.core.ir.Assign object at 0x7fd90dfc68d0>],
             'bool76': [<numba.core.ir.Assign object at 0x7fd90dfc6e50>],
             'bool94': [<numba.core.ir.Assign object at 0x7fd90dfca790>],
             'inferred': [<numba.core.ir.Assign object at 0x7fd90dfce050>,
                          <numba.core.ir.Assign object at 0x7fd90dfce790>],
             'known_size': [<numba.core.ir.Assign object at 0x7fd90e175290>,
                            <numba.core.ir.Assign object at 0x7fd90e037fd0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fd90dfc6050>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fd90e175110>,
                               <numba.core.ir.Assign object at 0x7fd90e1e9650>],
             'ok': [<numba.core.ir.Assign object at 0x7fd90dfce3d0>,
                    <numba.core.ir.Assign object at 0x7fd90dfcecd0>],
             'origsize': [<numba.core.ir.Assign object at 0x7fd90e160d10>],
             's': [<numba.core.ir.Assign object at 0x7fd90e1e9cd0>],
             'shape': [<numba.core.ir.Assign object at 0x7fd90e160fd0>]})
[numba.core.ssa DEBUG]  SSA violators {'num_neg_value', 'known_size', 'inferred', 'ok'}
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  SSA violators {'inferred', 'known_size', 'ok', 'num_neg_value'}
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609f48bd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a5f5590>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f2609edcc50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f2609edce90>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f260a088650>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f2609ee0b10>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f2609ee0f50>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f2609ee3110>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f2609ee3350>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f2609ee3850>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f2609ee3a90>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f260a088cd0>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f2609ee3d90>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f260a088f50>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f260a083550>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f260a083810>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f260a083590>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f260a0fb350>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f260a0fb290>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f260a0fb7d0>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f2609f48810>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f2609f48410>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f2609f48dd0>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f2609ed8350>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f2609ed87d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f2609ed8a10>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f2609ed8d50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f2609ed8f90>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f2609edc0d0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f2609edc310>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f2609edc690>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f2609edc8d0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f2609ee0310>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f2609ee0c10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f2609ee3210>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f2609ee3950>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f2609ee3c50>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f2609f489d0>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f2609f48cd0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f2609ed86d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f2609edc1d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f2609edc590>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f2609edcb50>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f260a088bd0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f260a0768d0>],
             'ax': [<numba.core.ir.Assign object at 0x7f260a0fb790>],
             'bool102': [<numba.core.ir.Assign object at 0x7f2609edcd90>],
             'bool140': [<numba.core.ir.Assign object at 0x7f2609ee0e50>],
             'bool34': [<numba.core.ir.Assign object at 0x7f2609f48950>],
             'bool68': [<numba.core.ir.Assign object at 0x7f2609ed8910>],
             'bool76': [<numba.core.ir.Assign object at 0x7f2609ed8e90>],
             'bool94': [<numba.core.ir.Assign object at 0x7f2609edc7d0>],
             'inferred': [<numba.core.ir.Assign object at 0x7f2609ee0090>,
                          <numba.core.ir.Assign object at 0x7f2609ee07d0>],
             'known_size': [<numba.core.ir.Assign object at 0x7f260a088150>,
                            <numba.core.ir.Assign object at 0x7f2609f48fd0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f2609ed8050>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f260a088410>,
                               <numba.core.ir.Assign object at 0x7f260a0fb550>],
             'ok': [<numba.core.ir.Assign object at 0x7f2609ee0410>,
                    <numba.core.ir.Assign object at 0x7f2609ee0d10>],
             'origsize': [<numba.core.ir.Assign object at 0x7f260a073bd0>],
             's': [<numba.core.ir.Assign object at 0x7f260a0fb250>],
             'shape': [<numba.core.ir.Assign object at 0x7f260a073e90>]})
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  SSA violators {'known_size', 'ok', 'inferred', 'num_neg_value'}
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a3d6f90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7ffb7a3d9210>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7ffb7a581390>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7ffb7a3d9e50>],
             '$140pred': [<numba.core.ir.Assign object at 0x7ffb7a3dd2d0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7ffb7a3dd450>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7ffb7a3dd690>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7ffb7a3ddb90>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7ffb7a3dddd0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7ffb7a514210>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7ffb7a3e2110>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7ffb7a514450>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7ffb7a5f5b50>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7ffb7a5f5510>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7ffb7a5f5dd0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7ffb7a5f5750>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7ffb7a5f5410>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7ffb7a5f5c50>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7ffb7a4429d0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7ffb7a442d90>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7ffb7a3d2110>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7ffb7a3d2650>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a3d2ad0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7ffb7a3d2d10>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a3d6090>],
             '$76pred': [<numba.core.ir.Assign object at 0x7ffb7a3d62d0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7ffb7a3d6410>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7ffb7a3d6650>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7ffb7a3d69d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7ffb7a3d6c10>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7ffb7a3d9650>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7ffb7a3d9f50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7ffb7a3dd550>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7ffb7a3ddc90>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7ffb7a3ddf90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7ffb7a442b10>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7ffb7a442fd0>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7ffb7a3d29d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7ffb7a3d6510>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7ffb7a3d68d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7ffb7a3d6e90>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7ffb7a5148d0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7ffb7a5f54d0>],
             'ax': [<numba.core.ir.Assign object at 0x7ffb7a5f55d0>],
             'bool102': [<numba.core.ir.Assign object at 0x7ffb7a3d9110>],
             'bool140': [<numba.core.ir.Assign object at 0x7ffb7a3dd1d0>],
             'bool34': [<numba.core.ir.Assign object at 0x7ffb7a442a50>],
             'bool68': [<numba.core.ir.Assign object at 0x7ffb7a3d2c10>],
             'bool76': [<numba.core.ir.Assign object at 0x7ffb7a3d61d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7ffb7a3d6b10>],
             'inferred': [<numba.core.ir.Assign object at 0x7ffb7a3d93d0>,
                          <numba.core.ir.Assign object at 0x7ffb7a3d9b10>],
             'known_size': [<numba.core.ir.Assign object at 0x7ffb7a581850>,
                            <numba.core.ir.Assign object at 0x7ffb7a3d2310>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7ffb7a3d2350>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7ffb7a581410>,
                               <numba.core.ir.Assign object at 0x7ffb7a5f5c10>],
             'ok': [<numba.core.ir.Assign object at 0x7ffb7a3d9750>,
                    <numba.core.ir.Assign object at 0x7ffb7a3dd090>],
             'origsize': [<numba.core.ir.Assign object at 0x7ffb7a581750>],
             's': [<numba.core.ir.Assign object at 0x7ffb7a56cf50>],
             'shape': [<numba.core.ir.Assign object at 0x7ffb7a581710>]})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  SSA violators {'ok', 'num_neg_value', 'inferred', 'known_size'}
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fa94678c690>],
             118: [<numba.core.ir.Assign object at 0x7fa9467fa890>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f18e2f61a90>],
             118: [<numba.core.ir.Assign object at 0x7f18e2f6ae50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fd90dfc6a90>],
             36: [<numba.core.ir.Assign object at 0x7fd90dfe04d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f9051e45d50>],
             118: [<numba.core.ir.Assign object at 0x7f9051e45e50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f2609ee3f90>],
             50: [<numba.core.ir.Assign object at 0x7f2609ef2610>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7ffb7a3e2310>],
             118: [<numba.core.ir.Assign object at 0x7ffb7a3e2f90>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94664a650>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e037bd0>
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fa94664a650>],
             118: [<numba.core.ir.Assign object at 0x7fa94665ab50>]})
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f18e3098f90>],
             118: [<numba.core.ir.Assign object at 0x7f18e30fc2d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee3b50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051fdbe50>
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f9051f69e10>],
             50: [<numba.core.ir.Assign object at 0x7f9051f69810>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fd90dfe0190>],
             50: [<numba.core.ir.Assign object at 0x7fd90dfe0b10>]})
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7ffb7a514610>],
             36: [<numba.core.ir.Assign object at 0x7ffb7a510a50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f6abd0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f2609ef2750>],
             118: [<numba.core.ir.Assign object at 0x7f2609ef2b50>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e3168b90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa94665af50>],
             36: [<numba.core.ir.Assign object at 0x7fa946787c90>]})
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f18e3098690>],
             36: [<numba.core.ir.Assign object at 0x7f18e3183150>]})
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3e2ad0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e1033d0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f9051e45a90>],
             118: [<numba.core.ir.Assign object at 0x7f9051e45790>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037990>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7ffb7a3e2b10>],
             118: [<numba.core.ir.Assign object at 0x7ffb7a3e2590>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fd90dfe08d0>],
             118: [<numba.core.ir.Assign object at 0x7fd90dfe0550>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f2609ef2110>],
             118: [<numba.core.ir.Assign object at 0x7f2609ef26d0>]})
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665a9d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18ef40c810>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051fdbe50>
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a3d9a10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ed80d0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90dfc6410>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fa94678c390>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f18e2f65f50>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa94678c210>],
             50: [<numba.core.ir.Assign object at 0x7fa9467871d0>]})
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f18e317ded0>],
             50: [<numba.core.ir.Assign object at 0x7f18e2f6a210>]})
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f9051e33d50>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f9051e45b90>],
             36: [<numba.core.ir.Assign object at 0x7f9051e45910>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7fd90e037bd0>
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f260a083510>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7ffb7a3e2350>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f2609ef2690>],
             36: [<numba.core.ir.Assign object at 0x7f2609ef27d0>]})
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7ffb7a3e2ad0>],
             50: [<numba.core.ir.Assign object at 0x7ffb7a510950>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fd90dfe0bd0>],
             118: [<numba.core.ir.Assign object at 0x7fd90dfe9a10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f18e2f61350>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fa94665aa10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7fd90e103d50>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred.1 = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f9051e9cdd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2609ee34d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1741), Var(inferred.1, arrayobj.py:1744)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7ffb7a442c10>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026cc4e10>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f2026cb8f50>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f2026cbb1d0>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f2026e63d50>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f2026cbbe10>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f2026cbf290>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f2026cbf410>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f2026cbf650>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f2026cbfb10>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f2026cbfd50>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f2026df6710>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f2026cc4050>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f2026df66d0>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f2026e51190>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f2026ed7c10>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f2026ed7710>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f2026ed7cd0>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f2026ed7d50>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f2026ed7650>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f2026d25b90>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f2026d25b10>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f2026cb4110>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f2026cb4650>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f2026cb4ad0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f2026cb4d10>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f2026cb8090>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f2026cb82d0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f2026cb83d0>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f2026cb8610>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f2026cb8990>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f2026cb8bd0>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f2026cbb610>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f2026cbbf10>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f2026cbf510>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f2026cbfc10>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f2026cbff10>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f2026d25e10>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f2026d25f90>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f2026cb49d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f2026cb84d0>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f2026cb8890>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f2026cb8e50>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f2026e63b50>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f2026ed7810>],
             'ax': [<numba.core.ir.Assign object at 0x7f2026ed7f90>],
             'bool102': [<numba.core.ir.Assign object at 0x7f2026cbb0d0>],
             'bool140': [<numba.core.ir.Assign object at 0x7f2026cbf190>],
             'bool34': [<numba.core.ir.Assign object at 0x7f2026d25c50>],
             'bool68': [<numba.core.ir.Assign object at 0x7f2026cb4c10>],
             'bool76': [<numba.core.ir.Assign object at 0x7f2026cb81d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7f2026cb8ad0>],
             'inferred': [<numba.core.ir.Assign object at 0x7f2026cbb390>,
                          <numba.core.ir.Assign object at 0x7f2026cbbad0>],
             'known_size': [<numba.core.ir.Assign object at 0x7f2026e63210>,
                            <numba.core.ir.Assign object at 0x7f2026cb4310>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f2026cb4350>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f2026e63190>,
                               <numba.core.ir.Assign object at 0x7f2026ed7b90>],
             'ok': [<numba.core.ir.Assign object at 0x7f2026cbb710>,
                    <numba.core.ir.Assign object at 0x7f2026cbf050>],
             'origsize': [<numba.core.ir.Assign object at 0x7f2026e63410>],
             's': [<numba.core.ir.Assign object at 0x7f2026f2bbd0>],
             'shape': [<numba.core.ir.Assign object at 0x7f2026e63750>]})
[numba.core.ssa DEBUG]  SSA violators {'known_size', 'ok', 'num_neg_value', 'inferred'}
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f2026df1450>],
             50: [<numba.core.ir.Assign object at 0x7f2026e638d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=2, lineno=32)
           4	LOAD_FAST(arg=0, lineno=32)
           6	BINARY_TRUE_DIVIDE(arg=None, lineno=32)
           8	LOAD_FAST(arg=1, lineno=32)
          10	BINARY_SUBTRACT(arg=None, lineno=32)
          12	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0']
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.byteflow DEBUG]  stack ['$x_particles_22.0', '$dx_24.1']
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=32)
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2']
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=32)
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.byteflow DEBUG]  stack ['$6binary_true_divide.2', '$logical_coordinates_18.3']
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.byteflow DEBUG]  stack ['$10binary_subtract.4']
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_particles_22.0'}), (4, {'res': '$dx_24.1'}), (6, {'lhs': '$x_particles_22.0', 'rhs': '$dx_24.1', 'res': '$6binary_true_divide.2'}), (8, {'res': '$logical_coordinates_18.3'}), (10, {'lhs': '$6binary_true_divide.2', 'rhs': '$logical_coordinates_18.3', 'res': '$10binary_subtract.4'}), (12, {'retval': '$10binary_subtract.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.interpreter DEBUG]  label 0:
    dx_2 = arg(0, name=dx_2)                 ['dx_2']
    logical_coordinates_1 = arg(1, name=logical_coordinates_1) ['logical_coordinates_1']
    x_particles_2 = arg(2, name=x_particles_2) ['x_particles_2']
    $6binary_true_divide.2 = x_particles_2 / dx_2 ['$6binary_true_divide.2', 'dx_2', 'x_particles_2']
    $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1 ['$10binary_subtract.4', '$6binary_true_divide.2', 'logical_coordinates_1']
    $12return_value.5 = cast(value=$10binary_subtract.4) ['$10binary_subtract.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9666a950>
[numba.core.ssa DEBUG]  on stmt: dx_2 = arg(0, name=dx_2)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_1 = arg(1, name=logical_coordinates_1)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  on stmt: x_particles_2 = arg(2, name=x_particles_2)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $6binary_true_divide.2 = x_particles_2 / dx_2
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $10binary_subtract.4 = $6binary_true_divide.2 - logical_coordinates_1
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $12return_value.5 = cast(value=$10binary_subtract.4)
[numba.core.ssa DEBUG]  on stmt: return $12return_value.5
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [<numba.core.ir.Assign object at 0x7f1e96674a10>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7f1e96674b50>],
             '$6binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f1e96674850>],
             'dx_2': [<numba.core.ir.Assign object at 0x7f1e9666a190>],
             'logical_coordinates_1': [<numba.core.ir.Assign object at 0x7f1e96674490>],
             'x_particles_2': [<numba.core.ir.Assign object at 0x7f1e96674550>]})
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f2026df1a10>],
             118: [<numba.core.ir.Assign object at 0x7f2026df1e10>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cc4850>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df18d0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f2026df1f90>],
             36: [<numba.core.ir.Assign object at 0x7f2026cb4750>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1725)
           2	LOAD_CONST(arg=1, lineno=1725)
           4	STORE_FAST(arg=2, lineno=1725)
           6	LOAD_CONST(arg=2, lineno=1726)
           8	STORE_FAST(arg=3, lineno=1726)
          10	SETUP_LOOP(arg=50, lineno=1727)
          12	LOAD_GLOBAL(arg=0, lineno=1727)
          14	LOAD_FAST(arg=1, lineno=1727)
          16	CALL_FUNCTION(arg=1, lineno=1727)
          18	GET_ITER(arg=None, lineno=1727)
>         20	FOR_ITER(arg=38, lineno=1727)
          22	UNPACK_SEQUENCE(arg=2, lineno=1727)
          24	STORE_FAST(arg=4, lineno=1727)
          26	STORE_FAST(arg=5, lineno=1727)
          28	LOAD_FAST(arg=5, lineno=1728)
          30	LOAD_CONST(arg=1, lineno=1728)
          32	COMPARE_OP(arg=0, lineno=1728)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1728)
          36	LOAD_FAST(arg=2, lineno=1729)
          38	LOAD_CONST(arg=2, lineno=1729)
          40	INPLACE_ADD(arg=None, lineno=1729)
          42	STORE_FAST(arg=2, lineno=1729)
          44	LOAD_FAST(arg=4, lineno=1730)
          46	STORE_FAST(arg=6, lineno=1730)
          48	JUMP_ABSOLUTE(arg=20, lineno=1730)
>         50	LOAD_FAST(arg=3, lineno=1732)
          52	LOAD_FAST(arg=5, lineno=1732)
          54	INPLACE_MULTIPLY(arg=None, lineno=1732)
          56	STORE_FAST(arg=3, lineno=1732)
          58	JUMP_ABSOLUTE(arg=20, lineno=1732)
>         60	POP_BLOCK(arg=None, lineno=1732)
>         62	LOAD_FAST(arg=2, lineno=1734)
          64	LOAD_CONST(arg=1, lineno=1734)
          66	COMPARE_OP(arg=2, lineno=1734)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1734)
          70	LOAD_FAST(arg=0, lineno=1735)
          72	LOAD_FAST(arg=3, lineno=1735)
          74	COMPARE_OP(arg=3, lineno=1735)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1735)
          78	LOAD_GLOBAL(arg=1, lineno=1736)
          80	LOAD_CONST(arg=3, lineno=1736)
          82	CALL_FUNCTION(arg=1, lineno=1736)
          84	RAISE_VARARGS(arg=1, lineno=1736)
          86	JUMP_FORWARD(arg=80, lineno=1736)
>         88	LOAD_FAST(arg=2, lineno=1738)
          90	LOAD_CONST(arg=2, lineno=1738)
          92	COMPARE_OP(arg=2, lineno=1738)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1738)
          96	LOAD_FAST(arg=3, lineno=1740)
          98	LOAD_CONST(arg=1, lineno=1740)
         100	COMPARE_OP(arg=2, lineno=1740)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1740)
         104	LOAD_CONST(arg=1, lineno=1741)
         106	STORE_FAST(arg=7, lineno=1741)
         108	LOAD_FAST(arg=0, lineno=1742)
         110	LOAD_CONST(arg=1, lineno=1742)
         112	COMPARE_OP(arg=2, lineno=1742)
         114	STORE_FAST(arg=8, lineno=1742)
         116	JUMP_FORWARD(arg=20, lineno=1742)
>        118	LOAD_FAST(arg=0, lineno=1744)
         120	LOAD_FAST(arg=3, lineno=1744)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
         124	STORE_FAST(arg=7, lineno=1744)
         126	LOAD_FAST(arg=0, lineno=1745)
         128	LOAD_FAST(arg=3, lineno=1745)
         130	BINARY_MODULO(arg=None, lineno=1745)
         132	LOAD_CONST(arg=1, lineno=1745)
         134	COMPARE_OP(arg=2, lineno=1745)
         136	STORE_FAST(arg=8, lineno=1745)
>        138	LOAD_FAST(arg=8, lineno=1746)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1746)
         142	LOAD_GLOBAL(arg=1, lineno=1747)
         144	LOAD_CONST(arg=3, lineno=1747)
         146	CALL_FUNCTION(arg=1, lineno=1747)
         148	RAISE_VARARGS(arg=1, lineno=1747)
>        150	LOAD_FAST(arg=7, lineno=1748)
         152	LOAD_FAST(arg=1, lineno=1748)
         154	LOAD_FAST(arg=6, lineno=1748)
         156	STORE_SUBSCR(arg=None, lineno=1748)
         158	JUMP_FORWARD(arg=8, lineno=1748)
>        160	LOAD_GLOBAL(arg=1, lineno=1751)
         162	LOAD_CONST(arg=4, lineno=1751)
         164	CALL_FUNCTION(arg=1, lineno=1751)
         166	RAISE_VARARGS(arg=1, lineno=1751)
>        168	LOAD_CONST(arg=0, lineno=1751)
         170	RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1725)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1725)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1725)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1726)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1726)
[numba.core.byteflow DEBUG]  stack ['$const6.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=10 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1727)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack ['$12load_global.0']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$12load_global.0', '$shape14.1']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=GET_ITER(arg=None, lineno=1727)
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$16call_function.2']
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1)])
[numba.core.byteflow DEBUG]  stack: ['$phi20.0']
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1727)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.byteflow DEBUG]  stack ['$phi20.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1732)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  stack: ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1727)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$phi22.1']
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.byteflow DEBUG]  dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1727)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.byteflow DEBUG]  dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1727)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$22unpack_sequence.3']
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$phi22.0']
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.byteflow DEBUG]  dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1728)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5']
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.byteflow DEBUG]  dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$s28.5', '$const30.6']
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1728)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.byteflow DEBUG]  stack ['$phi22.0', '$32compare_op.7']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1734)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0']
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1734)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value62.0', '$const64.1']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.byteflow DEBUG]  dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1734)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  stack ['$66compare_op.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack: ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1']
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.byteflow DEBUG]  dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1729)
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1729)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$40inplace_add.3']
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1730)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.byteflow DEBUG]  dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1730)
[numba.core.byteflow DEBUG]  stack ['$phi36.0', '$ax44.4']
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.byteflow DEBUG]  dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1730)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$phi36.0']
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack: ['$phi50.0']
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.byteflow DEBUG]  dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.byteflow DEBUG]  dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1']
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1732)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$known_size50.1', '$s52.2']
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  stack ['$phi50.0', '$54inplace_multiply.3']
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1732)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  stack ['$phi50.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1735)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1735)
[numba.core.byteflow DEBUG]  stack ['$origsize70.0']
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1735)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.byteflow DEBUG]  stack ['$origsize70.0', '$known_size72.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1735)
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  stack ['$74compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f2026df6050>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1738)
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0']
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f2026cc4310>],
             118: [<numba.core.ir.Assign object at 0x7f2026ccf410>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.byteflow DEBUG]  dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1738)
[numba.core.byteflow DEBUG]  stack ['$num_neg_value88.0', '$const90.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.byteflow DEBUG]  dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1738)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.byteflow DEBUG]  stack ['$92compare_op.2']
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1736)
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  stack ['$78load_global.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1736)
[numba.core.byteflow DEBUG]  stack ['$78load_global.0', '$const80.1']
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.byteflow DEBUG]  dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1736)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.byteflow DEBUG]  stack ['$82call_function.2']
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.byteflow DEBUG]  dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1751)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.byteflow DEBUG]  stack ['$const168.0']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.byteflow DEBUG]  dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack ['$known_size96.0']
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  stack ['$known_size96.0', '$const98.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1740)
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.byteflow DEBUG]  stack ['$100compare_op.2']
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.byteflow DEBUG]  dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1751)
[numba.core.byteflow DEBUG]  stack ['$160load_global.0']
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.byteflow DEBUG]  dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.byteflow DEBUG]  stack ['$160load_global.0', '$const162.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1751)
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.byteflow DEBUG]  stack ['$164call_function.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.byteflow DEBUG]  dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1741)
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1741)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.byteflow DEBUG]  stack ['$const104.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1']
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.byteflow DEBUG]  dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1742)
[numba.core.byteflow DEBUG]  stack ['$origsize108.1', '$const110.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1742)
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack ['$112compare_op.3']
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1742)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.byteflow DEBUG]  dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1744)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack ['$origsize118.0']
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.byteflow DEBUG]  dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1744)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.byteflow DEBUG]  stack ['$origsize118.0', '$known_size120.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1744)
[numba.core.byteflow DEBUG]  stack ['$122binary_floor_divide.2']
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.byteflow DEBUG]  dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.byteflow DEBUG]  stack ['$origsize126.3']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$origsize126.3', '$known_size128.4']
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5']
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.byteflow DEBUG]  dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1745)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  stack ['$130binary_modulo.5', '$const132.6']
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.byteflow DEBUG]  dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1745)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.byteflow DEBUG]  stack ['$134compare_op.7']
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1746)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1746)
[numba.core.byteflow DEBUG]  stack ['$ok138.0']
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1747)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.byteflow DEBUG]  stack ['$142load_global.0']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.byteflow DEBUG]  stack ['$142load_global.0', '$const144.1']
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.byteflow DEBUG]  dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1747)
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.byteflow DEBUG]  stack ['$146call_function.2']
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=150 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1748)
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0']
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.byteflow DEBUG]  dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1748)
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1']
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1748)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.byteflow DEBUG]  dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1748)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.byteflow DEBUG]  end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=168 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f2026cb4dd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
[numba.core.byteflow DEBUG]  keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9668bb90>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7f1e9661ee10>],
             '$102pred': [<numba.core.ir.Assign object at 0x7f1e96621090>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7f1e9683d790>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7f1e96621cd0>],
             '$140pred': [<numba.core.ir.Assign object at 0x7f1e96625150>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7f1e966252d0>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7f1e96625510>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7f1e96625990>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7f1e96625bd0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7f1e9683d410>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7f1e96625ed0>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7f1e9683dcd0>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7f1e967c9490>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7f1e967c94d0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7f1e967c91d0>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7f1e967c9b90>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7f1e967c9e90>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7f1e967c9bd0>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7f1e9668b850>],
             '$34pred': [<numba.core.ir.Assign object at 0x7f1e9668b810>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7f1e9668bf90>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7f1e9661a510>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7f1e9661a990>],
             '$68pred': [<numba.core.ir.Assign object at 0x7f1e9661abd0>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7f1e9661af10>],
             '$76pred': [<numba.core.ir.Assign object at 0x7f1e9661e190>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7f1e9661e290>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7f1e9661e4d0>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7f1e9661e850>],
             '$94pred': [<numba.core.ir.Assign object at 0x7f1e9661ea90>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7f1e966214d0>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7f1e96621dd0>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7f1e966253d0>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7f1e96625a90>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7f1e96625d90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7f1e9668bc10>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7f1e9668be50>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7f1e9661a890>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7f1e9661e390>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7f1e9661e710>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7f1e9661ed10>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7f1e9683de10>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7f1e967c9090>],
             'ax': [<numba.core.ir.Assign object at 0x7f1e967c9dd0>],
             'bool102': [<numba.core.ir.Assign object at 0x7f1e9661ef50>],
             'bool140': [<numba.core.ir.Assign object at 0x7f1e96625050>],
             'bool34': [<numba.core.ir.Assign object at 0x7f1e9668b8d0>],
             'bool68': [<numba.core.ir.Assign object at 0x7f1e9661aad0>],
             'bool76': [<numba.core.ir.Assign object at 0x7f1e9661e090>],
             'bool94': [<numba.core.ir.Assign object at 0x7f1e9661e990>],
             'inferred': [<numba.core.ir.Assign object at 0x7f1e96621250>,
                          <numba.core.ir.Assign object at 0x7f1e96621990>],
             'known_size': [<numba.core.ir.Assign object at 0x7f1e9675c210>,
                            <numba.core.ir.Assign object at 0x7f1e9661a1d0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7f1e9661a210>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7f1e96757e90>,
                               <numba.core.ir.Assign object at 0x7f1e967c9d50>],
             'ok': [<numba.core.ir.Assign object at 0x7f1e966215d0>,
                    <numba.core.ir.Assign object at 0x7f1e96621ed0>],
             'origsize': [<numba.core.ir.Assign object at 0x7f1e96757450>],
             's': [<numba.core.ir.Assign object at 0x7f1e967c9f90>],
             'shape': [<numba.core.ir.Assign object at 0x7f1e96757590>]})
[numba.core.ssa DEBUG]  SSA violators {'num_neg_value', 'known_size', 'ok', 'inferred'}
[numba.core.ssa DEBUG]  Fix SSA violator on var num_neg_value
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  first assign: num_neg_value
[numba.core.ssa DEBUG]  replaced with: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = $40inplace_add.3
[numba.core.ssa DEBUG]  replaced with: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f1e967b4fd0>],
             36: [<numba.core.ir.Assign object at 0x7f1e96637750>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  incoming_def num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4f50>
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var known_size
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  first assign: known_size
[numba.core.ssa DEBUG]  replaced with: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size = $54inplace_multiply.3
[numba.core.ssa DEBUG]  replaced with: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7f1e967c9050>],
             50: [<numba.core.ir.Assign object at 0x7f1e966378d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  find_def_from_top label 50
[numba.core.ssa DEBUG]  idom 22 from label 50
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  find_def_from_top label 20
[numba.core.ssa DEBUG]  insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
[numba.core.ssa DEBUG]  find_def_from_bottom label 169
[numba.core.ssa DEBUG]  find_def_from_top label 169
[numba.core.ssa DEBUG]  insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
[numba.core.ssa DEBUG]  find_def_from_bottom label 50
[numba.core.ssa DEBUG]  incoming_def known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  find_def_from_bottom label 36
[numba.core.ssa DEBUG]  find_def_from_top label 36
[numba.core.ssa DEBUG]  idom 22 from label 36
[numba.core.ssa DEBUG]  find_def_from_bottom label 22
[numba.core.ssa DEBUG]  find_def_from_top label 22
[numba.core.ssa DEBUG]  idom 20 from label 22
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
[numba.core.ssa DEBUG]  incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  find_def_from_bottom label 10
[numba.core.ssa DEBUG]  find_def_from_top label 10
[numba.core.ssa DEBUG]  idom 0 from label 10
[numba.core.ssa DEBUG]  find_def_from_bottom label 0
[numba.core.ssa DEBUG]  incoming_def known_size = const(int, 1)
[numba.core.ssa DEBUG]  replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
[numba.core.ssa DEBUG]  find_def_from_top label 70
[numba.core.ssa DEBUG]  idom 62 from label 70
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=inferred = origsize // known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
[numba.core.ssa DEBUG]  find_def_from_top label 118
[numba.core.ssa DEBUG]  idom 96 from label 118
[numba.core.ssa DEBUG]  find_def_from_bottom label 96
[numba.core.ssa DEBUG]  find_def_from_top label 96
[numba.core.ssa DEBUG]  idom 88 from label 96
[numba.core.ssa DEBUG]  find_def_from_bottom label 88
[numba.core.ssa DEBUG]  find_def_from_top label 88
[numba.core.ssa DEBUG]  idom 62 from label 88
[numba.core.ssa DEBUG]  find_def_from_bottom label 62
[numba.core.ssa DEBUG]  find_def_from_top label 62
[numba.core.ssa DEBUG]  idom 60 from label 62
[numba.core.ssa DEBUG]  find_def_from_bottom label 60
[numba.core.ssa DEBUG]  find_def_from_top label 60
[numba.core.ssa DEBUG]  idom 20 from label 60
[numba.core.ssa DEBUG]  find_def_from_bottom label 20
[numba.core.ssa DEBUG]  replaced with: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96637210>
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var ok
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  first assign: ok
[numba.core.ssa DEBUG]  replaced with: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f1e96637710>],
             118: [<numba.core.ir.Assign object at 0x7f1e966379d0>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1742),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.ssa DEBUG]  insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.ssa DEBUG]  incoming_def ok = origsize == $const110.2
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e96757bd0>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Fix SSA violator on var inferred
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.ssa DEBUG]  first assign: inferred
[numba.core.ssa DEBUG]  replaced with: inferred = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: inferred = origsize // known_size.2
[numba.core.ssa DEBUG]  replaced with: inferred.1 = origsize // known_size.2
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FreshVarHandler object at 0x7f1e96637d90>
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7f1e967b4e10>],
             118: [<numba.core.ir.Assign object at 0x7f1e9663b450>]})
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: origsize = arg(0, name=origsize)
[numba.core.ssa DEBUG]  on stmt: shape = arg(1, name=shape)
[numba.core.ssa DEBUG]  on stmt: num_neg_value = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: known_size = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: jump 10
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 10
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
[numba.core.ssa DEBUG]  on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1725)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $phi20.0 = $18get_iter.3
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 20
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1732), Var(known_size, arrayobj.py:1726)], incoming_blocks=[169, 10])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1729), Var(num_neg_value, arrayobj.py:1725)], incoming_blocks=[169, 10])
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $20for_iter.1 = iternext(value=$phi20.0)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.ssa DEBUG]  on stmt: $phi22.1 = $20for_iter.2
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: branch $20for_iter.3, 22, 60
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 22
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: ax = $22unpack_sequence.2
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: s = $22unpack_sequence.3
[numba.core.ssa DEBUG]  on stmt: $const30.6 = const(int, 0)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: $32compare_op.7 = s < $const30.6
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: bool34 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1728),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: branch $34pred, 36, 50
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 36
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $const38.2 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: num_neg_value.1 = $40inplace_add.3
[numba.core.ssa DEBUG]  on stmt: neg_ax = ax
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 50
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
[numba.core.ssa DEBUG]  on stmt: known_size.1 = $54inplace_multiply.3
[numba.core.ssa DEBUG]  on stmt: jump 169
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 60
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: jump 62
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 62
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $const64.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
[numba.core.ssa DEBUG]  on stmt: bool68 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1734),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $68pred, 70, 88
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 70
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $74compare_op.2 = origsize != known_size.2
[numba.core.ssa DEBUG]  on stmt: bool76 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1735),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: branch $76pred, 78, 168
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 78
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.ssa DEBUG]  on stmt: $const80.1 = const(str, total size of new array must be unchanged)
[numba.core.ssa DEBUG]  on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1736)], kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 88
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $const90.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: bool94 = global(bool: <class 'bool'>)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa946562890>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e2e72750>
[numba.core.ssa DEBUG]  on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1738),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: branch $94pred, 96, 160
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 96
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $const98.1 = const(int, 0)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $100compare_op.2 = known_size.2 == $const98.1
[numba.core.ssa DEBUG]  on stmt: bool102 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1740),), kws=(), vararg=None, target=None)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fa946568390>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa946568490>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa946568250>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fa946568050>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f18e2e77510>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f18e2e77650>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f18e2e773d0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f18e2e77190>]})
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: branch $102pred, 104, 118
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 104
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  on stmt: inferred = const(int, 0)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const110.2 = const(int, 0)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: ok = origsize == $const110.2
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 118
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: inferred.1 = origsize // known_size.2
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $130binary_modulo.5 = origsize % known_size.2
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $const132.6 = const(int, 0)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  on stmt: ok.1 = $130binary_modulo.5 == $const132.6
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: jump 138
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 138
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1742), Var(ok.1, arrayobj.py:1745)], incoming_blocks=[104, 118])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: bool140 = global(bool: <class 'bool'>)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1746),), kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: branch $140pred, 150, 142
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 142
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: $const144.1 = const(str, total size of new array must be unchanged)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.ssa DEBUG]  on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1747)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 150
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  on stmt: shape[neg_ax] = inferred
[numba.core.ssa DEBUG]  find_def var='inferred' stmt=shape[neg_ax] = inferred
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  find_def_from_top label 150
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  idom 138 from label 150
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  find_def_from_bottom label 138
[numba.core.ssa DEBUG]  find_def_from_top label 138
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  find_def_from_bottom label 104
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  incoming_def inferred = const(int, 0)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  find_def_from_bottom label 118
[numba.core.ssa DEBUG]  incoming_def inferred.1 = origsize // known_size.2
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  replaced with: shape[neg_ax] = inferred.2
[numba.core.ssa DEBUG]  on stmt: jump 168
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 160
[numba.core.byteflow DEBUG]  stack: []
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $const162.1 = const(str, multiple negative shape values)
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.ssa DEBUG]  on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1751)], kws=(), vararg=None, target=None)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.ssa DEBUG]  on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 168
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.ssa DEBUG]  on stmt: $const168.0 = const(NoneType, None)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.ssa DEBUG]  on stmt: $170return_value.1 = cast(value=$const168.0)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.ssa DEBUG]  on stmt: return $170return_value.1
[numba.core.ssa DEBUG]  ==== SSA block rewrite pass on 169
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.ssa DEBUG]  Running <numba.core.ssa._FixSSAVars object at 0x7f1e967b4c90>
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1732), Var(known_size.2, arrayobj.py:1732)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1729), Var(num_neg_value.1, arrayobj.py:1729)], incoming_blocks=[50, 36])
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: jump 20
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90dedd2d0>
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609deaad0>
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fd90dee3190>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fd90dee3290>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fd90dee3050>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7fd90dedde10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f2609df5250>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f2609df5390>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f2609df5110>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f2609defe90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051d3db90>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f9051d48110>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9051d48250>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f9051d42fd0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f9051d42e10>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a2ea090>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7ffb7a2ef4d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7ffb7a2ef610>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7ffb7a2ef3d0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7ffb7a2ef210>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9464c4790>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e2dd56d0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fa9464ca290>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa9464ca390>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fa9464ca150>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fa9464c4f50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f18e2dd9490>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f18e2dd95d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f18e2dd9350>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f18e2dd9110>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack []
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609dc9f90>
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90de40450>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f2609d57250>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f2609d57390>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f2609d57150>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f2609d51f10>]})
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7fd90de461d0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fd90de46310>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7fd90de460d0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7fd90de40e90>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051d1ebd0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f9051caa150>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f9051caa290>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f9051caa050>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f9051ca4e50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a24d0d0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7ffb7a251450>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7ffb7a251590>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7ffb7a251350>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7ffb7a2511d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fa9464b5fd0>
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f18e2dbd850>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fa9464b5490>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fa9464b56d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fa9464b5810>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fa9464b5910>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fa9464b52d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fa9464b5090>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fa9464add50>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fa9464ade90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fa9464adf50>]})
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f18e2dc5690>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f18e2dc58d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f18e2dc5a10>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f18e2dc5b50>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f18e2dc54d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f18e2dc5290>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f18e2dbdfd0>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f18e2dc5090>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f18e2dc5150>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026bc3d10>
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f2026bd1390>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f2026bd1490>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f2026bd1250>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f2026bcaf90>]})
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2609d36a50>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7fd90de25990>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f2609d42450>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f2609d42690>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f2609d42790>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f2609d428d0>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f2609d42290>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f2609d42050>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f2609d3ad90>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f2609d3ae10>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f2609d3aed0>]})
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7fd90de313d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7fd90de31610>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7fd90de31750>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7fd90de31890>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fd90de31210>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7fd90de28f90>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7fd90de28390>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7fd90de28d90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7fd90de28e50>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f9051c95e90>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f9051c95390>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f9051c955d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f9051c956d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f9051c95810>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f9051c951d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f9051c8cf90>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f9051c8c390>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f9051c8cd90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f9051c8ce50>]})
[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7ffb7a230fd0>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7ffb7a23d690>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7ffb7a23d8d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7ffb7a23d9d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7ffb7a23db10>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7ffb7a23d4d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7ffb7a23d2d0>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7ffb7a23d050>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7ffb7a23d110>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7ffb7a23d1d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026b2d890>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f2026b31410>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f2026b31510>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f2026b312d0>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f2026b310d0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f2026b154d0>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f2026b1d5d0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f2026b1d810>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f2026b1d950>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f2026b1da90>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f2026b1d410>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f2026b1d210>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f2026b15410>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f2026b15f90>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f2026b1d090>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_22.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_22.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_22.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_2 = arg(0, name=logical_coordinates_2) ['logical_coordinates_2']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_2 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_2']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9652ccd0>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_2 = arg(0, name=logical_coordinates_2)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_2 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f1e96537310>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f1e96537450>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f1e965371d0>],
             'logical_coordinates_2': [<numba.core.ir.Assign object at 0x7f1e96530fd0>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=32)
           2	LOAD_FAST(arg=0, lineno=32)
           4	LOAD_CONST(arg=1, lineno=32)
           6	BINARY_ADD(arg=None, lineno=32)
           8	RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=32)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$logical_coordinates_32.0', '$const4.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=32)
[numba.core.byteflow DEBUG]  stack ['$6binary_add.2']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$logical_coordinates_32.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$logical_coordinates_32.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    logical_coordinates_3 = arg(0, name=logical_coordinates_3) ['logical_coordinates_3']
    $const4.1 = const(int, 2)                ['$const4.1']
    $6binary_add.2 = logical_coordinates_3 + $const4.1 ['$6binary_add.2', '$const4.1', 'logical_coordinates_3']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9650bd10>
[numba.core.ssa DEBUG]  on stmt: logical_coordinates_3 = arg(0, name=logical_coordinates_3)
[numba.core.ssa DEBUG]  on stmt: $const4.1 = const(int, 2)
[numba.core.ssa DEBUG]  on stmt: $6binary_add.2 = logical_coordinates_3 + $const4.1
[numba.core.ssa DEBUG]  on stmt: $8return_value.3 = cast(value=$6binary_add.2)
[numba.core.ssa DEBUG]  on stmt: return $8return_value.3
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x7f1e9649a390>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7f1e9649a4d0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x7f1e9649a290>],
             'logical_coordinates_3': [<numba.core.ir.Assign object at 0x7f1e9649a050>]})
[numba.core.ssa DEBUG]  SSA violators set()
[numba.core.byteflow DEBUG]  bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_CONST(arg=1, lineno=1)
           4	LOAD_FAST(arg=2, lineno=33)
           6	BINARY_SUBTRACT(arg=None, lineno=33)
           8	LOAD_FAST(arg=0, lineno=34)
          10	BINARY_MULTIPLY(arg=None, lineno=34)
          12	LOAD_FAST(arg=2, lineno=34)
          14	LOAD_FAST(arg=1, lineno=35)
          16	BINARY_MULTIPLY(arg=None, lineno=35)
          18	BINARY_ADD(arg=None, lineno=35)
          20	RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  pending: deque([State(pc_initial=0 nstack_initial=0)])
[numba.core.byteflow DEBUG]  stack: []
[numba.core.byteflow DEBUG]  dispatch pc=0, inst=NOP(arg=None, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1)
[numba.core.byteflow DEBUG]  stack []
[numba.core.byteflow DEBUG]  dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0']
[numba.core.byteflow DEBUG]  dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=33)
[numba.core.byteflow DEBUG]  stack ['$const2.0', '$right_fractions_14.1']
[numba.core.byteflow DEBUG]  dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2']
[numba.core.byteflow DEBUG]  dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$6binary_subtract.2', '$_56binary_subscr_25_18.3']
[numba.core.byteflow DEBUG]  dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=34)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4']
[numba.core.byteflow DEBUG]  dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5']
[numba.core.byteflow DEBUG]  dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$right_fractions_112.5', '$_70binary_subscr_32_114.6']
[numba.core.byteflow DEBUG]  dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$10binary_multiply.4', '$16binary_multiply.7']
[numba.core.byteflow DEBUG]  dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=35)
[numba.core.byteflow DEBUG]  stack ['$18binary_add.8']
[numba.core.byteflow DEBUG]  end state. edges=[]
[numba.core.byteflow DEBUG]  -------------------------Prune PHIs-------------------------
[numba.core.byteflow DEBUG]  Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
[numba.core.byteflow DEBUG]  defmap: {}
[numba.core.byteflow DEBUG]  phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  changing phismap: defaultdict(<class 'set'>, {})
[numba.core.byteflow DEBUG]  keep phismap: {}
[numba.core.byteflow DEBUG]  new_out: defaultdict(<class 'dict'>, {})
[numba.core.byteflow DEBUG]  ----------------------DONE Prune PHIs-----------------------
[numba.core.byteflow DEBUG]  block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'res': '$right_fractions_14.1'}), (6, {'lhs': '$const2.0', 'rhs': '$right_fractions_14.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$_56binary_subscr_25_18.3'}), (10, {'lhs': '$6binary_subtract.2', 'rhs': '$_56binary_subscr_25_18.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$right_fractions_112.5'}), (14, {'res': '$_70binary_subscr_32_114.6'}), (16, {'lhs': '$right_fractions_112.5', 'rhs': '$_70binary_subscr_32_114.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$10binary_multiply.4', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
[numba.core.interpreter DEBUG]  label 0:
    _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1) ['_56binary_subscr_25_1']
    _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1) ['_70binary_subscr_32_1']
    right_fractions_1 = arg(2, name=right_fractions_1) ['right_fractions_1']
    $const2.0 = const(int, 1)                ['$const2.0']
    $6binary_subtract.2 = $const2.0 - right_fractions_1 ['$6binary_subtract.2', '$const2.0', 'right_fractions_1']
    $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1 ['$10binary_multiply.4', '$6binary_subtract.2', '_56binary_subscr_25_1']
    $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1 ['$16binary_multiply.7', '_70binary_subscr_32_1', 'right_fractions_1']
    $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7 ['$10binary_multiply.4', '$16binary_multiply.7', '$18binary_add.8']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

[numba.core.ssa DEBUG]  ==== SSA block analysis pass on 0
[numba.core.ssa DEBUG]  Running <numba.core.ssa._GatherDefsHandler object at 0x7f1e9647c410>
[numba.core.ssa DEBUG]  on stmt: _56binary_subscr_25_1 = arg(0, name=_56binary_subscr_25_1)
[numba.core.ssa DEBUG]  on stmt: _70binary_subscr_32_1 = arg(1, name=_70binary_subscr_32_1)
[numba.core.ssa DEBUG]  on stmt: right_fractions_1 = arg(2, name=right_fractions_1)
[numba.core.ssa DEBUG]  on stmt: $const2.0 = const(int, 1)
[numba.core.ssa DEBUG]  on stmt: $6binary_subtract.2 = $const2.0 - right_fractions_1
[numba.core.ssa DEBUG]  on stmt: $10binary_multiply.4 = $6binary_subtract.2 * _56binary_subscr_25_1
[numba.core.ssa DEBUG]  on stmt: $16binary_multiply.7 = right_fractions_1 * _70binary_subscr_32_1
[numba.core.ssa DEBUG]  on stmt: $18binary_add.8 = $10binary_multiply.4 + $16binary_multiply.7
[numba.core.ssa DEBUG]  on stmt: $20return_value.9 = cast(value=$18binary_add.8)
[numba.core.ssa DEBUG]  on stmt: return $20return_value.9
[numba.core.ssa DEBUG]  defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x7f1e96484590>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x7f1e964847d0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x7f1e964848d0>],
             '$20return_value.9': [<numba.core.ir.Assign object at 0x7f1e96484a10>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7f1e964843d0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x7f1e964841d0>],
             '_56binary_subscr_25_1': [<numba.core.ir.Assign object at 0x7f1e9647ce10>],
             '_70binary_subscr_32_1': [<numba.core.ir.Assign object at 0x7f1e9647cf50>],
             'right_fractions_1': [<numba.core.ir.Assign object at 0x7f1e96484050>]})
[numba.core.ssa DEBUG]  SSA violators set()
Finished initialization.
[torcpy.runtime WARNING]  MPI.Query_thread returns 3
[torcpy.runtime WARNING]  Info: MPI.Query_thread returns MPI.THREAD_MULTIPLE
[32mTORCPY: main starts[0m
Initialization Runtime:  319.2224907875061
[32mTORCPY: node[0]: created=467210, executed=58402[0m
Finished initialization.
[32mTORCPY: node[1]: created=0, executed=58402[0m
Finished initialization.
Finished initialization.
[32mTORCPY: node[7]: created=0, executed=58401[0m
[32mTORCPY: node[6]: created=0, executed=58401[0m
Finished initialization.
Finished initialization.
[32mTORCPY: node[4]: created=0, executed=58401[0m
[32mTORCPY: node[5]: created=0, executed=58401[0m
Finished initialization.
Finished initialization.
[32mTORCPY: node[3]: created=0, executed=58401[0m
[32mTORCPY: node[2]: created=0, executed=58401[0m
Complete Runtime:  12041.923785686493
400000,12041.923785686493
Complete Runtime:  12040.118928194046
400000,12040.118928194046
Complete Runtime:  12041.221063137054
400000,12041.221063137054
Complete Runtime:  12041.892746210098
400000,12041.892746210098
Complete Runtime:  12041.893929719925
400000,12041.893929719925
Complete Runtime:  12041.894418478012
400000,12041.894418478012
Complete Runtime:  12041.848909378052
400000,12041.848909378052
Complete Runtime:  12041.973829984665
400000,12041.973829984665
